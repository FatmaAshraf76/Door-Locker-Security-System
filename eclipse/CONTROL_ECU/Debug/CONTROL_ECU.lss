
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000261a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000261a  000026ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800076  00800076  000026c4  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001540  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a555  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_4>
      14:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__vector_9>
      28:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__vector_10>
      2c:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 * Initialize the BUZZER:
 * 1. Setup the BUZZER pins directions by use the GPIO driver.
 * 2. Turn off BUZZER.
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
 * Description :
 * BUZZER ON:
 * 1.
 */
 void Buzzer_on(void)
 {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
 }
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
  * Description :
  * BUZZER OFF:
  * 1.
  */
 void Buzzer_off(void)
 {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
 }
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
/*******************************************************************************/
/*                      main application                                       */
/*******************************************************************************/

int main(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6c 97       	sbiw	r28, 0x1c	; 28
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the TIMER driver */
	Timer_ConfigType TIMER_Configurations={0,7813,TIMER1,F_CPU_1024,CTC_Mode};
     bac:	9e 01       	movw	r18, r28
     bae:	2f 5f       	subi	r18, 0xFF	; 255
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	3c 8b       	std	Y+20, r19	; 0x14
     bb4:	2b 8b       	std	Y+19, r18	; 0x13
     bb6:	8f e6       	ldi	r24, 0x6F	; 111
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	9e 8b       	std	Y+22, r25	; 0x16
     bbc:	8d 8b       	std	Y+21, r24	; 0x15
     bbe:	97 e0       	ldi	r25, 0x07	; 7
     bc0:	9f 8b       	std	Y+23, r25	; 0x17
     bc2:	ed 89       	ldd	r30, Y+21	; 0x15
     bc4:	fe 89       	ldd	r31, Y+22	; 0x16
     bc6:	00 80       	ld	r0, Z
     bc8:	2d 89       	ldd	r18, Y+21	; 0x15
     bca:	3e 89       	ldd	r19, Y+22	; 0x16
     bcc:	2f 5f       	subi	r18, 0xFF	; 255
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	3e 8b       	std	Y+22, r19	; 0x16
     bd2:	2d 8b       	std	Y+21, r18	; 0x15
     bd4:	eb 89       	ldd	r30, Y+19	; 0x13
     bd6:	fc 89       	ldd	r31, Y+20	; 0x14
     bd8:	00 82       	st	Z, r0
     bda:	2b 89       	ldd	r18, Y+19	; 0x13
     bdc:	3c 89       	ldd	r19, Y+20	; 0x14
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	3c 8b       	std	Y+20, r19	; 0x14
     be4:	2b 8b       	std	Y+19, r18	; 0x13
     be6:	3f 89       	ldd	r19, Y+23	; 0x17
     be8:	31 50       	subi	r19, 0x01	; 1
     bea:	3f 8b       	std	Y+23, r19	; 0x17
     bec:	8f 89       	ldd	r24, Y+23	; 0x17
     bee:	88 23       	and	r24, r24
     bf0:	41 f7       	brne	.-48     	; 0xbc2 <main+0x2a>
	Timer_init(&TIMER_Configurations);
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Timer_init>
	Timer_setCallBack(Timer_CallBack,TIMER_Configurations.timer_ID);
     bfa:	2d 81       	ldd	r18, Y+5	; 0x05
     bfc:	8d e9       	ldi	r24, 0x9D	; 157
     bfe:	96 e0       	ldi	r25, 0x06	; 6
     c00:	62 2f       	mov	r22, r18
     c02:	0e 94 ca 10 	call	0x2194	; 0x2194 <Timer_setCallBack>

	/* Initialize the PWM driver */
	PWM_Timer0_Start();/* Initialize the PWM driver */
     c06:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM_Timer0_Start>
	PWM_Timer0_Start();
     c0a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM_Timer0_Start>

	/* Initialize the UART driver */
	UART_ConfigType UART_Configurations = {EIGHT_BIT,Disabled,ONE_BIT,BaudRate3};
     c0e:	fe 01       	movw	r30, r28
     c10:	38 96       	adiw	r30, 0x08	; 8
     c12:	f9 8f       	std	Y+25, r31	; 0x19
     c14:	e8 8f       	std	Y+24, r30	; 0x18
     c16:	28 e6       	ldi	r18, 0x68	; 104
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3b 8f       	std	Y+27, r19	; 0x1b
     c1c:	2a 8f       	std	Y+26, r18	; 0x1a
     c1e:	37 e0       	ldi	r19, 0x07	; 7
     c20:	3c 8f       	std	Y+28, r19	; 0x1c
     c22:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c24:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c26:	00 80       	ld	r0, Z
     c28:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c2a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	3b 8f       	std	Y+27, r19	; 0x1b
     c32:	2a 8f       	std	Y+26, r18	; 0x1a
     c34:	e8 8d       	ldd	r30, Y+24	; 0x18
     c36:	f9 8d       	ldd	r31, Y+25	; 0x19
     c38:	00 82       	st	Z, r0
     c3a:	28 8d       	ldd	r18, Y+24	; 0x18
     c3c:	39 8d       	ldd	r19, Y+25	; 0x19
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	39 8f       	std	Y+25, r19	; 0x19
     c44:	28 8f       	std	Y+24, r18	; 0x18
     c46:	3c 8d       	ldd	r19, Y+28	; 0x1c
     c48:	31 50       	subi	r19, 0x01	; 1
     c4a:	3c 8f       	std	Y+28, r19	; 0x1c
     c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c4e:	88 23       	and	r24, r24
     c50:	41 f7       	brne	.-48     	; 0xc22 <main+0x8a>
	UART_init(&UART_Configurations);
     c52:	ce 01       	movw	r24, r28
     c54:	08 96       	adiw	r24, 0x08	; 8
     c56:	0e 94 7d 11 	call	0x22fa	; 0x22fa <UART_init>

	/* Initialize the TWI/I2C driver */
	TWI_ConfigType TWI_Configurations={my_address,rate_400khz};
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	88 8b       	std	Y+16, r24	; 0x10
	TWI_init(&TWI_Configurations);
     c62:	ce 01       	movw	r24, r28
     c64:	0f 96       	adiw	r24, 0x0f	; 15
     c66:	0e 94 f6 10 	call	0x21ec	; 0x21ec <TWI_init>

	/* Initialize the MOTOR driver */
	DcMotor_Init();
     c6a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DcMotor_Init>

	/* Initialize the PIR driver */
	PIR_init();
     c6e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <PIR_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     c72:	af e5       	ldi	r26, 0x5F	; 95
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ef e5       	ldi	r30, 0x5F	; 95
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	8c 93       	st	X, r24

	UART_sendByte(READY);
     c80:	80 e1       	ldi	r24, 0x10	; 16
     c82:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>

    while(1)
    {
		switch (UART_recieveByte()) {
     c86:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
     c8a:	e8 2f       	mov	r30, r24
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	fa 8b       	std	Y+18, r31	; 0x12
     c90:	e9 8b       	std	Y+17, r30	; 0x11
     c92:	29 89       	ldd	r18, Y+17	; 0x11
     c94:	3a 89       	ldd	r19, Y+18	; 0x12
     c96:	22 31       	cpi	r18, 0x12	; 18
     c98:	31 05       	cpc	r19, r1
     c9a:	c9 f0       	breq	.+50     	; 0xcce <main+0x136>
     c9c:	89 89       	ldd	r24, Y+17	; 0x11
     c9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ca0:	83 31       	cpi	r24, 0x13	; 19
     ca2:	91 05       	cpc	r25, r1
     ca4:	34 f4       	brge	.+12     	; 0xcb2 <main+0x11a>
     ca6:	e9 89       	ldd	r30, Y+17	; 0x11
     ca8:	fa 89       	ldd	r31, Y+18	; 0x12
     caa:	e1 31       	cpi	r30, 0x11	; 17
     cac:	f1 05       	cpc	r31, r1
     cae:	61 f0       	breq	.+24     	; 0xcc8 <main+0x130>
     cb0:	ea cf       	rjmp	.-44     	; 0xc86 <main+0xee>
     cb2:	29 89       	ldd	r18, Y+17	; 0x11
     cb4:	3a 89       	ldd	r19, Y+18	; 0x12
     cb6:	24 31       	cpi	r18, 0x14	; 20
     cb8:	31 05       	cpc	r19, r1
     cba:	f9 f0       	breq	.+62     	; 0xcfa <main+0x162>
     cbc:	89 89       	ldd	r24, Y+17	; 0x11
     cbe:	9a 89       	ldd	r25, Y+18	; 0x12
     cc0:	87 31       	cpi	r24, 0x17	; 23
     cc2:	91 05       	cpc	r25, r1
     cc4:	e9 f0       	breq	.+58     	; 0xd00 <main+0x168>
     cc6:	df cf       	rjmp	.-66     	; 0xc86 <main+0xee>
		case EEPROM_SAVE_PASSWORD:
			EEPROM_save_pass();
     cc8:	0e 94 08 08 	call	0x1010	; 0x1010 <EEPROM_save_pass>
     ccc:	dc cf       	rjmp	.-72     	; 0xc86 <main+0xee>
			break;
		case ENTER_PASSWORD:
			Recive_password();
     cce:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Recive_password>
			if (compare_password())
     cd2:	0e 94 55 07 	call	0xeaa	; 0xeaa <compare_password>
     cd6:	88 23       	and	r24, r24
     cd8:	41 f0       	breq	.+16     	; 0xcea <main+0x152>
			{
				while (UART_recieveByte() != READY) {}
     cda:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
     cde:	80 31       	cpi	r24, 0x10	; 16
     ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0x142>
				UART_sendByte(MATCHED);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
     ce8:	ce cf       	rjmp	.-100    	; 0xc86 <main+0xee>
			}
			else
			{
				while (UART_recieveByte() != READY) {}
     cea:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
     cee:	80 31       	cpi	r24, 0x10	; 16
     cf0:	e1 f7       	brne	.-8      	; 0xcea <main+0x152>
				UART_sendByte(UNMATCHED);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
     cf8:	c6 cf       	rjmp	.-116    	; 0xc86 <main+0xee>
			}
			break;
		case DOOR_OPEN:
			open_Door();
     cfa:	0e 94 aa 08 	call	0x1154	; 0x1154 <open_Door>
     cfe:	c3 cf       	rjmp	.-122    	; 0xc86 <main+0xee>
			break;
		case BUZZER_ON:

			seconds = 0;
     d00:	10 92 76 00 	sts	0x0076, r1
     d04:	10 92 77 00 	sts	0x0077, r1
     d08:	10 92 78 00 	sts	0x0078, r1
     d0c:	10 92 79 00 	sts	0x0079, r1
			Buzzer_on();
     d10:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
			while (seconds < 60);
     d14:	80 91 76 00 	lds	r24, 0x0076
     d18:	90 91 77 00 	lds	r25, 0x0077
     d1c:	a0 91 78 00 	lds	r26, 0x0078
     d20:	b0 91 79 00 	lds	r27, 0x0079
     d24:	8c 33       	cpi	r24, 0x3C	; 60
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	98 f3       	brcs	.-26     	; 0xd14 <main+0x17c>
			UART_sendByte(BUZZER_OFF);
     d2e:	88 e1       	ldi	r24, 0x18	; 24
     d30:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
			Buzzer_off();
     d34:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
     d38:	a6 cf       	rjmp	.-180    	; 0xc86 <main+0xee>

00000d3a <Timer_CallBack>:
/*******************************************************************************/
/*                                Functions                                    */
/*******************************************************************************/

void Timer_CallBack(void)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	seconds ++;
     d42:	80 91 76 00 	lds	r24, 0x0076
     d46:	90 91 77 00 	lds	r25, 0x0077
     d4a:	a0 91 78 00 	lds	r26, 0x0078
     d4e:	b0 91 79 00 	lds	r27, 0x0079
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	a1 1d       	adc	r26, r1
     d56:	b1 1d       	adc	r27, r1
     d58:	80 93 76 00 	sts	0x0076, r24
     d5c:	90 93 77 00 	sts	0x0077, r25
     d60:	a0 93 78 00 	sts	0x0078, r26
     d64:	b0 93 79 00 	sts	0x0079, r27
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <Recive_password>:

void Recive_password(void)
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2f 97       	sbiw	r28, 0x0f	; 15
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	UART_sendByte(READY);
     d86:	80 e1       	ldi	r24, 0x10	; 16
     d88:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
    for (i=0;i<PASSWORD_MAX_SIZE;i++)
     d8c:	1f 86       	std	Y+15, r1	; 0x0f
     d8e:	7e c0       	rjmp	.+252    	; 0xe8c <Recive_password+0x11e>
    {
    	password2[i] = UART_recieveByte();
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	08 2f       	mov	r16, r24
     d94:	10 e0       	ldi	r17, 0x00	; 0
     d96:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
     d9a:	f8 01       	movw	r30, r16
     d9c:	ed 57       	subi	r30, 0x7D	; 125
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 83       	st	Z, r24
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	af ea       	ldi	r26, 0xAF	; 175
     da8:	b3 e4       	ldi	r27, 0x43	; 67
     daa:	8b 87       	std	Y+11, r24	; 0x0b
     dac:	9c 87       	std	Y+12, r25	; 0x0c
     dae:	ad 87       	std	Y+13, r26	; 0x0d
     db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8f 83       	std	Y+7, r24	; 0x07
     dcc:	98 87       	std	Y+8, r25	; 0x08
     dce:	a9 87       	std	Y+9, r26	; 0x09
     dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd2:	6f 81       	ldd	r22, Y+7	; 0x07
     dd4:	78 85       	ldd	r23, Y+8	; 0x08
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de6:	88 23       	and	r24, r24
     de8:	2c f4       	brge	.+10     	; 0xdf4 <Recive_password+0x86>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <Recive_password+0x104>
	else if (__tmp > 65535)
     df4:	6f 81       	ldd	r22, Y+7	; 0x07
     df6:	78 85       	ldd	r23, Y+8	; 0x08
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	4c f5       	brge	.+82     	; 0xe5e <Recive_password+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <Recive_password+0xe6>
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <Recive_password+0xd4>
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f7       	brne	.-38     	; 0xe36 <Recive_password+0xc8>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <Recive_password+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9e 83       	std	Y+6, r25	; 0x06
     e70:	8d 83       	std	Y+5, r24	; 0x05
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <Recive_password+0x110>
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01

void Recive_password(void)
{
	uint8 i;
	UART_sendByte(READY);
    for (i=0;i<PASSWORD_MAX_SIZE;i++)
     e86:	8f 85       	ldd	r24, Y+15	; 0x0f
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	8f 87       	std	Y+15, r24	; 0x0f
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	85 30       	cpi	r24, 0x05	; 5
     e90:	08 f4       	brcc	.+2      	; 0xe94 <Recive_password+0x126>
     e92:	7e cf       	rjmp	.-260    	; 0xd90 <Recive_password+0x22>
    {
    	password2[i] = UART_recieveByte();
    	 _delay_ms(350);
    }
}
     e94:	2f 96       	adiw	r28, 0x0f	; 15
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <compare_password>:

uint8 compare_password(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	60 97       	sbiw	r28, 0x10	; 16
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
	for (uint8 i = 0; i < PASSWORD_MAX_SIZE; i++)
     ebe:	1f 86       	std	Y+15, r1	; 0x0f
     ec0:	97 c0       	rjmp	.+302    	; 0xff0 <compare_password+0x146>
	{
		EEPROM_readByte( PASSWORD_ADDRESS+i , &password1[i]);
     ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8f 5e       	subi	r24, 0xEF	; 239
     eca:	9c 4f       	sbci	r25, 0xFC	; 252
     ecc:	ac 01       	movw	r20, r24
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 01       	movw	r18, r24
     ed6:	28 57       	subi	r18, 0x78	; 120
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	ca 01       	movw	r24, r20
     edc:	b9 01       	movw	r22, r18
     ede:	0e 94 bf 09 	call	0x137e	; 0x137e <EEPROM_readByte>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e2       	ldi	r26, 0x20	; 32
     ee8:	b1 e4       	ldi	r27, 0x41	; 65
     eea:	8b 87       	std	Y+11, r24	; 0x0b
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	ad 87       	std	Y+13, r26	; 0x0d
     ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a ef       	ldi	r20, 0xFA	; 250
     f00:	54 e4       	ldi	r21, 0x44	; 68
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	98 87       	std	Y+8, r25	; 0x08
     f0e:	a9 87       	std	Y+9, r26	; 0x09
     f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <compare_password+0x8a>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <compare_password+0x108>
	else if (__tmp > 65535)
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <compare_password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <compare_password+0xea>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <compare_password+0xd8>
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <compare_password+0xcc>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <compare_password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <compare_password+0x114>
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(password1[i] != password2[i])
     fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	e8 57       	subi	r30, 0x78	; 120
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	20 81       	ld	r18, Z
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	ed 57       	subi	r30, 0x7D	; 125
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	28 17       	cp	r18, r24
     fe4:	11 f0       	breq	.+4      	; 0xfea <compare_password+0x140>
		{
			return UNMATCHED;
     fe6:	18 8a       	std	Y+16, r1	; 0x10
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <compare_password+0x152>
    }
}

uint8 compare_password(void)
{
	for (uint8 i = 0; i < PASSWORD_MAX_SIZE; i++)
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8f 87       	std	Y+15, r24	; 0x0f
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <compare_password+0x14e>
     ff6:	65 cf       	rjmp	.-310    	; 0xec2 <compare_password+0x18>
		if(password1[i] != password2[i])
		{
			return UNMATCHED;
		}
	}
	return MATCHED;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	88 8b       	std	Y+16, r24	; 0x10
     ffc:	88 89       	ldd	r24, Y+16	; 0x10
}
     ffe:	60 96       	adiw	r28, 0x10	; 16
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <EEPROM_save_pass>:


void EEPROM_save_pass(void)
{
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	2f 97       	sbiw	r28, 0x0f	; 15
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	UART_sendByte(READY);
    1028:	80 e1       	ldi	r24, 0x10	; 16
    102a:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
	for (i = 0; i < PASSWORD_MAX_SIZE; i++) {
    102e:	1f 86       	std	Y+15, r1	; 0x0f
    1030:	82 c0       	rjmp	.+260    	; 0x1136 <EEPROM_save_pass+0x126>
		EEPROM_writeByte((PASSWORD_ADDRESS+ i), UART_recieveByte());
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	8f 5e       	subi	r24, 0xEF	; 239
    103a:	9c 4f       	sbci	r25, 0xFC	; 252
    103c:	8c 01       	movw	r16, r24
    103e:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
    1042:	28 2f       	mov	r18, r24
    1044:	c8 01       	movw	r24, r16
    1046:	62 2f       	mov	r22, r18
    1048:	0e 94 7e 09 	call	0x12fc	; 0x12fc <EEPROM_writeByte>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e2       	ldi	r26, 0x20	; 32
    1052:	b1 e4       	ldi	r27, 0x41	; 65
    1054:	8b 87       	std	Y+11, r24	; 0x0b
    1056:	9c 87       	std	Y+12, r25	; 0x0c
    1058:	ad 87       	std	Y+13, r26	; 0x0d
    105a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105c:	6b 85       	ldd	r22, Y+11	; 0x0b
    105e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1060:	8d 85       	ldd	r24, Y+13	; 0x0d
    1062:	9e 85       	ldd	r25, Y+14	; 0x0e
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	4a ef       	ldi	r20, 0xFA	; 250
    106a:	54 e4       	ldi	r21, 0x44	; 68
    106c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	8f 83       	std	Y+7, r24	; 0x07
    1076:	98 87       	std	Y+8, r25	; 0x08
    1078:	a9 87       	std	Y+9, r26	; 0x09
    107a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e8       	ldi	r20, 0x80	; 128
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1090:	88 23       	and	r24, r24
    1092:	2c f4       	brge	.+10     	; 0x109e <EEPROM_save_pass+0x8e>
		__ticks = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	3f c0       	rjmp	.+126    	; 0x111c <EEPROM_save_pass+0x10c>
	else if (__tmp > 65535)
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	3f ef       	ldi	r19, 0xFF	; 255
    10aa:	4f e7       	ldi	r20, 0x7F	; 127
    10ac:	57 e4       	ldi	r21, 0x47	; 71
    10ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	4c f5       	brge	.+82     	; 0x1108 <EEPROM_save_pass+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    10bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e2       	ldi	r20, 0x20	; 32
    10c4:	51 e4       	ldi	r21, 0x41	; 65
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <EEPROM_save_pass+0xee>
    10e0:	88 ec       	ldi	r24, 0xC8	; 200
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <EEPROM_save_pass+0xdc>
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	69 f7       	brne	.-38     	; 0x10e0 <EEPROM_save_pass+0xd0>
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <EEPROM_save_pass+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1108:	6f 81       	ldd	r22, Y+7	; 0x07
    110a:	78 85       	ldd	r23, Y+8	; 0x08
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <EEPROM_save_pass+0x118>
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_save_pass(void)
{
	uint8 i;
	UART_sendByte(READY);
	for (i = 0; i < PASSWORD_MAX_SIZE; i++) {
    1130:	8f 85       	ldd	r24, Y+15	; 0x0f
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	8f 87       	std	Y+15, r24	; 0x0f
    1136:	8f 85       	ldd	r24, Y+15	; 0x0f
    1138:	85 30       	cpi	r24, 0x05	; 5
    113a:	08 f4       	brcc	.+2      	; 0x113e <EEPROM_save_pass+0x12e>
    113c:	7a cf       	rjmp	.-268    	; 0x1032 <EEPROM_save_pass+0x22>
		EEPROM_writeByte((PASSWORD_ADDRESS+ i), UART_recieveByte());
		_delay_ms(10);
	}
}
    113e:	2f 96       	adiw	r28, 0x0f	; 15
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <open_Door>:

void open_Door(void)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2e 97       	sbiw	r28, 0x0e	; 14
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
	seconds = 0;
    1168:	10 92 76 00 	sts	0x0076, r1
    116c:	10 92 77 00 	sts	0x0077, r1
    1170:	10 92 78 00 	sts	0x0078, r1
    1174:	10 92 79 00 	sts	0x0079, r1
	DcMotor_Rotate(CW,100);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	64 e6       	ldi	r22, 0x64	; 100
    117c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DcMotor_Rotate>
	while (seconds < 15);
    1180:	80 91 76 00 	lds	r24, 0x0076
    1184:	90 91 77 00 	lds	r25, 0x0077
    1188:	a0 91 78 00 	lds	r26, 0x0078
    118c:	b0 91 79 00 	lds	r27, 0x0079
    1190:	8f 30       	cpi	r24, 0x0F	; 15
    1192:	91 05       	cpc	r25, r1
    1194:	a1 05       	cpc	r26, r1
    1196:	b1 05       	cpc	r27, r1
    1198:	98 f3       	brcs	.-26     	; 0x1180 <open_Door+0x2c>

    UART_sendByte(DOOR_OPEN);
    119a:	84 e1       	ldi	r24, 0x14	; 20
    119c:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>

	while(UART_recieveByte()!=DOOR_STOP){};
    11a0:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
    11a4:	86 31       	cpi	r24, 0x16	; 22
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <open_Door+0x4c>
	DcMotor_Rotate(STOP,0);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DcMotor_Rotate>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	aa e7       	ldi	r26, 0x7A	; 122
    11b6:	b4 e4       	ldi	r27, 0x44	; 68
    11b8:	8b 87       	std	Y+11, r24	; 0x0b
    11ba:	9c 87       	std	Y+12, r25	; 0x0c
    11bc:	ad 87       	std	Y+13, r26	; 0x0d
    11be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4a ef       	ldi	r20, 0xFA	; 250
    11ce:	54 e4       	ldi	r21, 0x44	; 68
    11d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
    11dc:	a9 87       	std	Y+9, r26	; 0x09
    11de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e8       	ldi	r20, 0x80	; 128
    11ee:	5f e3       	ldi	r21, 0x3F	; 63
    11f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	2c f4       	brge	.+10     	; 0x1202 <open_Door+0xae>
		__ticks = 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	3f c0       	rjmp	.+126    	; 0x1280 <open_Door+0x12c>
	else if (__tmp > 65535)
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	57 e4       	ldi	r21, 0x47	; 71
    1212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1216:	18 16       	cp	r1, r24
    1218:	4c f5       	brge	.+82     	; 0x126c <open_Door+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121a:	6b 85       	ldd	r22, Y+11	; 0x0b
    121c:	7c 85       	ldd	r23, Y+12	; 0x0c
    121e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1220:	9e 85       	ldd	r25, Y+14	; 0x0e
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	0f c0       	rjmp	.+30     	; 0x1262 <open_Door+0x10e>
    1244:	88 ec       	ldi	r24, 0xC8	; 200
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <open_Door+0xfc>
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	69 f7       	brne	.-38     	; 0x1244 <open_Door+0xf0>
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <open_Door+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <open_Door+0x138>
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while(PIR_getState()){};
    1294:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <PIR_getState>
    1298:	88 23       	and	r24, r24
    129a:	e1 f7       	brne	.-8      	; 0x1294 <open_Door+0x140>
	UART_sendByte(DOOR_STOP);
    129c:	86 e1       	ldi	r24, 0x16	; 22
    129e:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>

	while(UART_recieveByte()!=DOOR_CLOSE){};
    12a2:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
    12a6:	85 31       	cpi	r24, 0x15	; 21
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <open_Door+0x14e>
	seconds = 0;
    12aa:	10 92 76 00 	sts	0x0076, r1
    12ae:	10 92 77 00 	sts	0x0077, r1
    12b2:	10 92 78 00 	sts	0x0078, r1
    12b6:	10 92 79 00 	sts	0x0079, r1
	DcMotor_Rotate(A_CW,100);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	64 e6       	ldi	r22, 0x64	; 100
    12be:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DcMotor_Rotate>
	while (seconds < 15);
    12c2:	80 91 76 00 	lds	r24, 0x0076
    12c6:	90 91 77 00 	lds	r25, 0x0077
    12ca:	a0 91 78 00 	lds	r26, 0x0078
    12ce:	b0 91 79 00 	lds	r27, 0x0079
    12d2:	8f 30       	cpi	r24, 0x0F	; 15
    12d4:	91 05       	cpc	r25, r1
    12d6:	a1 05       	cpc	r26, r1
    12d8:	b1 05       	cpc	r27, r1
    12da:	98 f3       	brcs	.-26     	; 0x12c2 <open_Door+0x16e>

	DcMotor_Rotate(STOP,0);
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DcMotor_Rotate>
	UART_sendByte(DOOR_CLOSE);
    12e4:	85 e1       	ldi	r24, 0x15	; 21
    12e6:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
}
    12ea:	2e 96       	adiw	r28, 0x0e	; 14
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <EEPROM_writeByte+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <EEPROM_writeByte+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    130e:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1312:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    1316:	88 30       	cpi	r24, 0x08	; 8
    1318:	11 f0       	breq	.+4      	; 0x131e <EEPROM_writeByte+0x22>
        return ERROR;
    131a:	1c 82       	std	Y+4, r1	; 0x04
    131c:	28 c0       	rjmp	.+80     	; 0x136e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	80 70       	andi	r24, 0x00	; 0
    1324:	97 70       	andi	r25, 0x07	; 7
    1326:	88 0f       	add	r24, r24
    1328:	89 2f       	mov	r24, r25
    132a:	88 1f       	adc	r24, r24
    132c:	99 0b       	sbc	r25, r25
    132e:	91 95       	neg	r25
    1330:	80 6a       	ori	r24, 0xA0	; 160
    1332:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1336:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    133a:	88 31       	cpi	r24, 0x18	; 24
    133c:	11 f0       	breq	.+4      	; 0x1342 <EEPROM_writeByte+0x46>
        return ERROR; 
    133e:	1c 82       	std	Y+4, r1	; 0x04
    1340:	16 c0       	rjmp	.+44     	; 0x136e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1348:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    134c:	88 32       	cpi	r24, 0x28	; 40
    134e:	11 f0       	breq	.+4      	; 0x1354 <EEPROM_writeByte+0x58>
        return ERROR;
    1350:	1c 82       	std	Y+4, r1	; 0x04
    1352:	0d c0       	rjmp	.+26     	; 0x136e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    135a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    135e:	88 32       	cpi	r24, 0x28	; 40
    1360:	11 f0       	breq	.+4      	; 0x1366 <EEPROM_writeByte+0x6a>
        return ERROR;
    1362:	1c 82       	std	Y+4, r1	; 0x04
    1364:	04 c0       	rjmp	.+8      	; 0x136e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1366:	0e 94 26 11 	call	0x224c	; 0x224c <TWI_stop>
	
    return SUCCESS;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8c 83       	std	Y+4, r24	; 0x04
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <EEPROM_readByte+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <EEPROM_readByte+0x8>
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	7c 83       	std	Y+4, r23	; 0x04
    1392:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1394:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1398:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	11 f0       	breq	.+4      	; 0x13a4 <EEPROM_readByte+0x26>
        return ERROR;
    13a0:	1d 82       	std	Y+5, r1	; 0x05
    13a2:	44 c0       	rjmp	.+136    	; 0x142c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	80 70       	andi	r24, 0x00	; 0
    13aa:	97 70       	andi	r25, 0x07	; 7
    13ac:	88 0f       	add	r24, r24
    13ae:	89 2f       	mov	r24, r25
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	91 95       	neg	r25
    13b6:	80 6a       	ori	r24, 0xA0	; 160
    13b8:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13bc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    13c0:	88 31       	cpi	r24, 0x18	; 24
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <EEPROM_readByte+0x4a>
        return ERROR;
    13c4:	1d 82       	std	Y+5, r1	; 0x05
    13c6:	32 c0       	rjmp	.+100    	; 0x142c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13ce:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    13d2:	88 32       	cpi	r24, 0x28	; 40
    13d4:	11 f0       	breq	.+4      	; 0x13da <EEPROM_readByte+0x5c>
        return ERROR;
    13d6:	1d 82       	std	Y+5, r1	; 0x05
    13d8:	29 c0       	rjmp	.+82     	; 0x142c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    13da:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    13de:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    13e2:	80 31       	cpi	r24, 0x10	; 16
    13e4:	11 f0       	breq	.+4      	; 0x13ea <EEPROM_readByte+0x6c>
        return ERROR;
    13e6:	1d 82       	std	Y+5, r1	; 0x05
    13e8:	21 c0       	rjmp	.+66     	; 0x142c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	80 70       	andi	r24, 0x00	; 0
    13f0:	97 70       	andi	r25, 0x07	; 7
    13f2:	88 0f       	add	r24, r24
    13f4:	89 2f       	mov	r24, r25
    13f6:	88 1f       	adc	r24, r24
    13f8:	99 0b       	sbc	r25, r25
    13fa:	91 95       	neg	r25
    13fc:	81 6a       	ori	r24, 0xA1	; 161
    13fe:	0e 94 31 11 	call	0x2262	; 0x2262 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1402:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    1406:	80 34       	cpi	r24, 0x40	; 64
    1408:	11 f0       	breq	.+4      	; 0x140e <EEPROM_readByte+0x90>
        return ERROR;
    140a:	1d 82       	std	Y+5, r1	; 0x05
    140c:	0f c0       	rjmp	.+30     	; 0x142c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    140e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <TWI_readByteWithNACK>
    1412:	eb 81       	ldd	r30, Y+3	; 0x03
    1414:	fc 81       	ldd	r31, Y+4	; 0x04
    1416:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1418:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_getStatus>
    141c:	88 35       	cpi	r24, 0x58	; 88
    141e:	11 f0       	breq	.+4      	; 0x1424 <EEPROM_readByte+0xa6>
        return ERROR;
    1420:	1d 82       	std	Y+5, r1	; 0x05
    1422:	04 c0       	rjmp	.+8      	; 0x142c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1424:	0e 94 26 11 	call	0x224c	; 0x224c <TWI_stop>

    return SUCCESS;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_setupPinDirection+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <GPIO_setupPinDirection+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	6a 83       	std	Y+2, r22	; 0x02
    1450:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 30       	cpi	r24, 0x08	; 8
    1456:	08 f0       	brcs	.+2      	; 0x145a <GPIO_setupPinDirection+0x1c>
    1458:	d5 c0       	rjmp	.+426    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	08 f0       	brcs	.+2      	; 0x1462 <GPIO_setupPinDirection+0x24>
    1460:	d1 c0       	rjmp	.+418    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3d 83       	std	Y+5, r19	; 0x05
    146a:	2c 83       	std	Y+4, r18	; 0x04
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <GPIO_setupPinDirection+0x3a>
    1476:	43 c0       	rjmp	.+134    	; 0x14fe <GPIO_setupPinDirection+0xc0>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <GPIO_setupPinDirection+0x4e>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	71 f0       	breq	.+28     	; 0x14a6 <GPIO_setupPinDirection+0x68>
    148a:	bc c0       	rjmp	.+376    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <GPIO_setupPinDirection+0x5a>
    1496:	5f c0       	rjmp	.+190    	; 0x1556 <GPIO_setupPinDirection+0x118>
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <GPIO_setupPinDirection+0x66>
    14a2:	85 c0       	rjmp	.+266    	; 0x15ae <GPIO_setupPinDirection+0x170>
    14a4:	af c0       	rjmp	.+350    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	a1 f4       	brne	.+40     	; 0x14d4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14ac:	aa e3       	ldi	r26, 0x3A	; 58
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ea e3       	ldi	r30, 0x3A	; 58
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x8c>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x88>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	98 c0       	rjmp	.+304    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14d4:	aa e3       	ldi	r26, 0x3A	; 58
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ea e3       	ldi	r30, 0x3A	; 58
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_setupPinDirection+0xb4>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_setupPinDirection+0xb0>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	83 c0       	rjmp	.+262    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	a1 f4       	brne	.+40     	; 0x152c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1504:	a7 e3       	ldi	r26, 0x37	; 55
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e7 e3       	ldi	r30, 0x37	; 55
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0xe4>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0xe0>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	6c c0       	rjmp	.+216    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    152c:	a7 e3       	ldi	r26, 0x37	; 55
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e7 e3       	ldi	r30, 0x37	; 55
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_setupPinDirection+0x10c>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_setupPinDirection+0x108>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	57 c0       	rjmp	.+174    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	a1 f4       	brne	.+40     	; 0x1584 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    155c:	a4 e3       	ldi	r26, 0x34	; 52
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 e3       	ldi	r30, 0x34	; 52
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0x13c>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0x138>
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	40 c0       	rjmp	.+128    	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1584:	a4 e3       	ldi	r26, 0x34	; 52
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_setupPinDirection+0x164>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_setupPinDirection+0x160>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	2b c0       	rjmp	.+86     	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a1 f4       	brne	.+40     	; 0x15dc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15b4:	a1 e3       	ldi	r26, 0x31	; 49
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e1 e3       	ldi	r30, 0x31	; 49
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_setupPinDirection+0x194>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_setupPinDirection+0x190>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15dc:	a1 e3       	ldi	r26, 0x31	; 49
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e1 e3       	ldi	r30, 0x31	; 49
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_setupPinDirection+0x1bc>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_setupPinDirection+0x1b8>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_writePin+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_writePin+0x8>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
    1626:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	08 f0       	brcs	.+2      	; 0x1630 <GPIO_writePin+0x1c>
    162e:	d5 c0       	rjmp	.+426    	; 0x17da <GPIO_writePin+0x1c6>
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	08 f0       	brcs	.+2      	; 0x1638 <GPIO_writePin+0x24>
    1636:	d1 c0       	rjmp	.+418    	; 0x17da <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3d 83       	std	Y+5, r19	; 0x05
    1640:	2c 83       	std	Y+4, r18	; 0x04
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	09 f4       	brne	.+2      	; 0x164e <GPIO_writePin+0x3a>
    164c:	43 c0       	rjmp	.+134    	; 0x16d4 <GPIO_writePin+0xc0>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <GPIO_writePin+0x4e>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	71 f0       	breq	.+28     	; 0x167c <GPIO_writePin+0x68>
    1660:	bc c0       	rjmp	.+376    	; 0x17da <GPIO_writePin+0x1c6>
    1662:	2c 81       	ldd	r18, Y+4	; 0x04
    1664:	3d 81       	ldd	r19, Y+5	; 0x05
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <GPIO_writePin+0x5a>
    166c:	5f c0       	rjmp	.+190    	; 0x172c <GPIO_writePin+0x118>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <GPIO_writePin+0x66>
    1678:	85 c0       	rjmp	.+266    	; 0x1784 <GPIO_writePin+0x170>
    167a:	af c0       	rjmp	.+350    	; 0x17da <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1682:	ab e3       	ldi	r26, 0x3B	; 59
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	eb e3       	ldi	r30, 0x3B	; 59
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x8c>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x88>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	98 c0       	rjmp	.+304    	; 0x17da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16aa:	ab e3       	ldi	r26, 0x3B	; 59
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_writePin+0xb4>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_writePin+0xb0>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	83 c0       	rjmp	.+262    	; 0x17da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16da:	a8 e3       	ldi	r26, 0x38	; 56
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e8 e3       	ldi	r30, 0x38	; 56
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0xe4>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0xe0>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	6c c0       	rjmp	.+216    	; 0x17da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1702:	a8 e3       	ldi	r26, 0x38	; 56
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e8 e3       	ldi	r30, 0x38	; 56
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_writePin+0x10c>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_writePin+0x108>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	57 c0       	rjmp	.+174    	; 0x17da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	a1 f4       	brne	.+40     	; 0x175a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1732:	a5 e3       	ldi	r26, 0x35	; 53
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e5 e3       	ldi	r30, 0x35	; 53
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0x13c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0x138>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	40 c0       	rjmp	.+128    	; 0x17da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    175a:	a5 e3       	ldi	r26, 0x35	; 53
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e3       	ldi	r30, 0x35	; 53
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_writePin+0x164>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_writePin+0x160>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	2b c0       	rjmp	.+86     	; 0x17da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	a1 f4       	brne	.+40     	; 0x17b2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    178a:	a2 e3       	ldi	r26, 0x32	; 50
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_writePin+0x194>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_writePin+0x190>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17b2:	a2 e3       	ldi	r26, 0x32	; 50
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e2 e3       	ldi	r30, 0x32	; 50
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_writePin+0x1bc>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_writePin+0x1b8>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <GPIO_readPin+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_readPin+0x8>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	8a 83       	std	Y+2, r24	; 0x02
    17fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17fc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	08 f0       	brcs	.+2      	; 0x1806 <GPIO_readPin+0x1c>
    1804:	84 c0       	rjmp	.+264    	; 0x190e <GPIO_readPin+0x124>
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	08 f0       	brcs	.+2      	; 0x180e <GPIO_readPin+0x24>
    180c:	80 c0       	rjmp	.+256    	; 0x190e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3d 83       	std	Y+5, r19	; 0x05
    1816:	2c 83       	std	Y+4, r18	; 0x04
    1818:	4c 81       	ldd	r20, Y+4	; 0x04
    181a:	5d 81       	ldd	r21, Y+5	; 0x05
    181c:	41 30       	cpi	r20, 0x01	; 1
    181e:	51 05       	cpc	r21, r1
    1820:	79 f1       	breq	.+94     	; 0x1880 <GPIO_readPin+0x96>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	91 05       	cpc	r25, r1
    182a:	34 f4       	brge	.+12     	; 0x1838 <GPIO_readPin+0x4e>
    182c:	2c 81       	ldd	r18, Y+4	; 0x04
    182e:	3d 81       	ldd	r19, Y+5	; 0x05
    1830:	21 15       	cp	r18, r1
    1832:	31 05       	cpc	r19, r1
    1834:	69 f0       	breq	.+26     	; 0x1850 <GPIO_readPin+0x66>
    1836:	6b c0       	rjmp	.+214    	; 0x190e <GPIO_readPin+0x124>
    1838:	4c 81       	ldd	r20, Y+4	; 0x04
    183a:	5d 81       	ldd	r21, Y+5	; 0x05
    183c:	42 30       	cpi	r20, 0x02	; 2
    183e:	51 05       	cpc	r21, r1
    1840:	b9 f1       	breq	.+110    	; 0x18b0 <GPIO_readPin+0xc6>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <GPIO_readPin+0x64>
    184c:	49 c0       	rjmp	.+146    	; 0x18e0 <GPIO_readPin+0xf6>
    184e:	5f c0       	rjmp	.+190    	; 0x190e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1850:	e9 e3       	ldi	r30, 0x39	; 57
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_readPin+0x7e>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_readPin+0x7a>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	88 23       	and	r24, r24
    1874:	19 f0       	breq	.+6      	; 0x187c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	49 c0       	rjmp	.+146    	; 0x190e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	47 c0       	rjmp	.+142    	; 0x190e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1880:	e6 e3       	ldi	r30, 0x36	; 54
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_readPin+0xae>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_readPin+0xaa>
    189c:	ca 01       	movw	r24, r20
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	88 23       	and	r24, r24
    18a4:	19 f0       	breq	.+6      	; 0x18ac <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	31 c0       	rjmp	.+98     	; 0x190e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	2f c0       	rjmp	.+94     	; 0x190e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18b0:	e3 e3       	ldi	r30, 0x33	; 51
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_readPin+0xde>
    18c4:	55 95       	asr	r21
    18c6:	47 95       	ror	r20
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_readPin+0xda>
    18cc:	ca 01       	movw	r24, r20
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	90 70       	andi	r25, 0x00	; 0
    18d2:	88 23       	and	r24, r24
    18d4:	19 f0       	breq	.+6      	; 0x18dc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	19 c0       	rjmp	.+50     	; 0x190e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	17 c0       	rjmp	.+46     	; 0x190e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_readPin+0x10e>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_readPin+0x10a>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	88 23       	and	r24, r24
    1904:	19 f0       	breq	.+6      	; 0x190c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	01 c0       	rjmp	.+2      	; 0x190e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    190c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_setupPortDirection+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_setupPortDirection+0x8>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	90 f5       	brcc	.+100    	; 0x199a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3c 83       	std	Y+4, r19	; 0x04
    193e:	2b 83       	std	Y+3, r18	; 0x03
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	d1 f0       	breq	.+52     	; 0x197e <GPIO_setupPortDirection+0x5e>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	2c f4       	brge	.+10     	; 0x195e <GPIO_setupPortDirection+0x3e>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	61 f0       	breq	.+24     	; 0x1974 <GPIO_setupPortDirection+0x54>
    195c:	1e c0       	rjmp	.+60     	; 0x199a <GPIO_setupPortDirection+0x7a>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	81 f0       	breq	.+32     	; 0x1988 <GPIO_setupPortDirection+0x68>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	91 05       	cpc	r25, r1
    1970:	81 f0       	breq	.+32     	; 0x1992 <GPIO_setupPortDirection+0x72>
    1972:	13 c0       	rjmp	.+38     	; 0x199a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1974:	ea e3       	ldi	r30, 0x3A	; 58
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	80 83       	st	Z, r24
    197c:	0e c0       	rjmp	.+28     	; 0x199a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    197e:	e7 e3       	ldi	r30, 0x37	; 55
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	80 83       	st	Z, r24
    1986:	09 c0       	rjmp	.+18     	; 0x199a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1988:	e4 e3       	ldi	r30, 0x34	; 52
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 83       	st	Z, r24
    1990:	04 c0       	rjmp	.+8      	; 0x199a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1992:	e1 e3       	ldi	r30, 0x31	; 49
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	80 83       	st	Z, r24
			break;
		}
	}
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_writePort+0x6>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_writePort+0x8>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	90 f5       	brcc	.+100    	; 0x1a22 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3c 83       	std	Y+4, r19	; 0x04
    19c6:	2b 83       	std	Y+3, r18	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	d1 f0       	breq	.+52     	; 0x1a06 <GPIO_writePort+0x5e>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	2c f4       	brge	.+10     	; 0x19e6 <GPIO_writePort+0x3e>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	61 f0       	breq	.+24     	; 0x19fc <GPIO_writePort+0x54>
    19e4:	1e c0       	rjmp	.+60     	; 0x1a22 <GPIO_writePort+0x7a>
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <GPIO_writePort+0x68>
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	83 30       	cpi	r24, 0x03	; 3
    19f6:	91 05       	cpc	r25, r1
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <GPIO_writePort+0x72>
    19fa:	13 c0       	rjmp	.+38     	; 0x1a22 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a06:	e8 e3       	ldi	r30, 0x38	; 56
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a10:	e5 e3       	ldi	r30, 0x35	; 53
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	80 83       	st	Z, r24
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a1a:	e2 e3       	ldi	r30, 0x32	; 50
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_readPort+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_readPort+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a3e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	90 f5       	brcc	.+100    	; 0x1aaa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3c 83       	std	Y+4, r19	; 0x04
    1a4e:	2b 83       	std	Y+3, r18	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	91 05       	cpc	r25, r1
    1a58:	d1 f0       	breq	.+52     	; 0x1a8e <GPIO_readPort+0x5e>
    1a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <GPIO_readPort+0x3e>
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	61 f0       	breq	.+24     	; 0x1a84 <GPIO_readPort+0x54>
    1a6c:	1e c0       	rjmp	.+60     	; 0x1aaa <GPIO_readPort+0x7a>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <GPIO_readPort+0x68>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	91 05       	cpc	r25, r1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <GPIO_readPort+0x72>
    1a82:	13 c0       	rjmp	.+38     	; 0x1aaa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a84:	e9 e3       	ldi	r30, 0x39	; 57
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a8e:	e6 e3       	ldi	r30, 0x36	; 54
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a98:	e3 e3       	ldi	r30, 0x33	; 51
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1aa2:	e0 e3       	ldi	r30, 0x30	; 48
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <DcMotor_Init>:
 * Description :
 * Function responsible for Initializes the DC motor by setting the direction for the motor pins and stopping the
 * motor at the beginning.
 */
void DcMotor_Init(void)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	66 e0       	ldi	r22, 0x06	; 6
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	67 e0       	ldi	r22, 0x07	; 7
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	66 e0       	ldi	r22, 0x06	; 6
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	67 e0       	ldi	r22, 0x07	; 7
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>

	duty_cycle(0);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <duty_cycle>
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <DcMotor_Rotate>:
 * Description :
 * Function responsible for Controls the motor's state (Clockwise/Anti-Clockwise/Stop) .
 * adjusts the speed based on the input duty cycle.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <DcMotor_Rotate+0x6>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	6a 83       	std	Y+2, r22	; 0x02
	if(state==CW) //clockwise
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	88 23       	and	r24, r24
    1b08:	59 f4       	brne	.+22     	; 0x1b20 <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	66 e0       	ldi	r22, 0x06	; 6
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	67 e0       	ldi	r22, 0x07	; 7
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
    1b1e:	1b c0       	rjmp	.+54     	; 0x1b56 <DcMotor_Rotate+0x60>
	}
	else if(state==A_CW) //anti_clockwise
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	59 f4       	brne	.+22     	; 0x1b3c <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	66 e0       	ldi	r22, 0x06	; 6
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	67 e0       	ldi	r22, 0x07	; 7
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
    1b3a:	0d c0       	rjmp	.+26     	; 0x1b56 <DcMotor_Rotate+0x60>
	}
	else if(state==STOP) //stop
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	51 f4       	brne	.+20     	; 0x1b56 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	66 e0       	ldi	r22, 0x06	; 6
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	67 e0       	ldi	r22, 0x07	; 7
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_writePin>
	}
	duty_cycle(speed);
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <duty_cycle>
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <PIR_init>:
 *  Function to initialize the PIR driver
 *  Inputs: None
 *  Return: None
 */
void PIR_init(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_SENSOR_PORT_ID, PIR_SENSOR_PIN_ID , PIN_INPUT);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_setupPinDirection>
}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <PIR_getState>:
 *  Function to return PIR State
 *  Inputs: None
 *  Return: uint8
 */
uint8 PIR_getState(void)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <PIR_getState+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	uint8 state;
	state=GPIO_readPin(PIR_SENSOR_PORT_ID, PIR_SENSOR_PIN_ID);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_readPin>
    1b90:	89 83       	std	Y+1, r24	; 0x01
	if(state==LOGIC_HIGH)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <PIR_getState+0x20>
	{
		return PEOPLE_ENTER;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <PIR_getState+0x22>
	}
	else
	{
        return NO_ONE_ENTER;
    1b9e:	1a 82       	std	Y+2, r1	; 0x02
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <PWM_Timer0_Start>:
 *  Non-inverting mode
 *  The function configures OC0 as the output pin.
 */

void PWM_Timer0_Start(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; // Set Timer Initial Value to 0
    1bb4:	e2 e5       	ldi	r30, 0x52	; 82
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	10 82       	st	Z, r1

	// Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
	GPIO_setupPinDirection(PWM_E_PORT_ID, PWM_E_PIN_ID ,PIN_OUTPUT);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	63 e0       	ldi	r22, 0x03	; 3
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 1f 0a 	call	0x143e	; 0x143e <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS01);
    1bc4:	e3 e5       	ldi	r30, 0x53	; 83
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8b e6       	ldi	r24, 0x6B	; 107
    1bca:	80 83       	st	Z, r24

}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <duty_cycle>:

void duty_cycle(uint8 duty_cycle)
{
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = (uint8)(((uint32)duty_cycle*PWM_MAX_OUTPUT)/(MOTOR_MAX_SPEED)); // Set Compare Value
    1be2:	0c e5       	ldi	r16, 0x5C	; 92
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 93 12 	call	0x2526	; 0x2526 <__mulsi3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	24 e6       	ldi	r18, 0x64	; 100
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 b2 12 	call	0x2564	; 0x2564 <__udivmodsi4>
    1c14:	da 01       	movw	r26, r20
    1c16:	c9 01       	movw	r24, r18
    1c18:	f8 01       	movw	r30, r16
    1c1a:	80 83       	st	Z, r24
}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <__vector_11>:

/********************************************************/
/*                   ISR functions                      */
/********************************************************/

ISR(TIMER0_OVF_vect) {
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    1c52:	80 91 7d 00 	lds	r24, 0x007D
    1c56:	90 91 7e 00 	lds	r25, 0x007E
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <__vector_11+0x40>
	{
		(*g_Timer0CallBackPtr)();
    1c5e:	e0 91 7d 00 	lds	r30, 0x007D
    1c62:	f0 91 7e 00 	lds	r31, 0x007E
    1c66:	09 95       	icall
	}
}
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	ff 91       	pop	r31
    1c6e:	ef 91       	pop	r30
    1c70:	bf 91       	pop	r27
    1c72:	af 91       	pop	r26
    1c74:	9f 91       	pop	r25
    1c76:	8f 91       	pop	r24
    1c78:	7f 91       	pop	r23
    1c7a:	6f 91       	pop	r22
    1c7c:	5f 91       	pop	r21
    1c7e:	4f 91       	pop	r20
    1c80:	3f 91       	pop	r19
    1c82:	2f 91       	pop	r18
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	0f 90       	pop	r0
    1c8a:	1f 90       	pop	r1
    1c8c:	18 95       	reti

00001c8e <__vector_10>:
ISR(TIMER0_COMP_vect) {
    1c8e:	1f 92       	push	r1
    1c90:	0f 92       	push	r0
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	0f 92       	push	r0
    1c96:	11 24       	eor	r1, r1
    1c98:	2f 93       	push	r18
    1c9a:	3f 93       	push	r19
    1c9c:	4f 93       	push	r20
    1c9e:	5f 93       	push	r21
    1ca0:	6f 93       	push	r22
    1ca2:	7f 93       	push	r23
    1ca4:	8f 93       	push	r24
    1ca6:	9f 93       	push	r25
    1ca8:	af 93       	push	r26
    1caa:	bf 93       	push	r27
    1cac:	ef 93       	push	r30
    1cae:	ff 93       	push	r31
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    1cb8:	80 91 7d 00 	lds	r24, 0x007D
    1cbc:	90 91 7e 00 	lds	r25, 0x007E
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <__vector_10+0x40>
	{
		(*g_Timer0CallBackPtr)();
    1cc4:	e0 91 7d 00 	lds	r30, 0x007D
    1cc8:	f0 91 7e 00 	lds	r31, 0x007E
    1ccc:	09 95       	icall
	}
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	ff 91       	pop	r31
    1cd4:	ef 91       	pop	r30
    1cd6:	bf 91       	pop	r27
    1cd8:	af 91       	pop	r26
    1cda:	9f 91       	pop	r25
    1cdc:	8f 91       	pop	r24
    1cde:	7f 91       	pop	r23
    1ce0:	6f 91       	pop	r22
    1ce2:	5f 91       	pop	r21
    1ce4:	4f 91       	pop	r20
    1ce6:	3f 91       	pop	r19
    1ce8:	2f 91       	pop	r18
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	0f 90       	pop	r0
    1cf0:	1f 90       	pop	r1
    1cf2:	18 95       	reti

00001cf4 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1cf4:	1f 92       	push	r1
    1cf6:	0f 92       	push	r0
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	0f 92       	push	r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	2f 93       	push	r18
    1d00:	3f 93       	push	r19
    1d02:	4f 93       	push	r20
    1d04:	5f 93       	push	r21
    1d06:	6f 93       	push	r22
    1d08:	7f 93       	push	r23
    1d0a:	8f 93       	push	r24
    1d0c:	9f 93       	push	r25
    1d0e:	af 93       	push	r26
    1d10:	bf 93       	push	r27
    1d12:	ef 93       	push	r30
    1d14:	ff 93       	push	r31
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    1d1e:	80 91 7f 00 	lds	r24, 0x007F
    1d22:	90 91 80 00 	lds	r25, 0x0080
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	29 f0       	breq	.+10     	; 0x1d34 <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
    1d2a:	e0 91 7f 00 	lds	r30, 0x007F
    1d2e:	f0 91 80 00 	lds	r31, 0x0080
    1d32:	09 95       	icall
	}
}
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	bf 91       	pop	r27
    1d3e:	af 91       	pop	r26
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	7f 91       	pop	r23
    1d46:	6f 91       	pop	r22
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	4f 93       	push	r20
    1d6a:	5f 93       	push	r21
    1d6c:	6f 93       	push	r22
    1d6e:	7f 93       	push	r23
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	af 93       	push	r26
    1d76:	bf 93       	push	r27
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1d84:	80 91 7f 00 	lds	r24, 0x007F
    1d88:	90 91 80 00 	lds	r25, 0x0080
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    1d90:	e0 91 7f 00 	lds	r30, 0x007F
    1d94:	f0 91 80 00 	lds	r31, 0x0080
    1d98:	09 95       	icall
	}
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1dea:	80 91 81 00 	lds	r24, 0x0081
    1dee:	90 91 82 00 	lds	r25, 0x0082
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1df6:	e0 91 81 00 	lds	r30, 0x0081
    1dfa:	f0 91 82 00 	lds	r31, 0x0082
    1dfe:	09 95       	icall
	}
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1e50:	80 91 81 00 	lds	r24, 0x0081
    1e54:	90 91 82 00 	lds	r25, 0x0082
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	29 f0       	breq	.+10     	; 0x1e66 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    1e5c:	e0 91 81 00 	lds	r30, 0x0081
    1e60:	f0 91 82 00 	lds	r31, 0x0082
    1e64:	09 95       	icall
	}
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <Timer_init>:
 *  Function to initialize the Timer driver
 *  Inputs: pointer to the configuration structure with type Timer_ConfigType.
 *  Return: None
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <Timer_init+0x6>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->timer_ID == TIMER0)
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <Timer_init+0x1a>
    1ea4:	52 c0       	rjmp	.+164    	; 0x1f4a <Timer_init+0xbe>
	{
		SET_BIT(TCCR0,FOC0);
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 68       	ori	r24, 0x80	; 128
    1eb2:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->timer_InitialValue;
    1eb4:	a2 e5       	ldi	r26, 0x52	; 82
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	8c 93       	st	X, r24
		TCCR0 = 0;
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	10 82       	st	Z, r1
		TCCR0 |= (Config_Ptr->timer_clock);
    1ec8:	a3 e5       	ldi	r26, 0x53	; 83
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e3 e5       	ldi	r30, 0x53	; 83
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	90 81       	ld	r25, Z
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	85 81       	ldd	r24, Z+5	; 0x05
    1ed8:	89 2b       	or	r24, r25
    1eda:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	86 81       	ldd	r24, Z+6	; 0x06
    1ee2:	88 23       	and	r24, r24
    1ee4:	79 f4       	brne	.+30     	; 0x1f04 <Timer_init+0x78>
		{
			SET_BIT(TIMSK,TOIE0);
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	81 60       	ori	r24, 0x01	; 1
    1ef2:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0);
    1ef4:	a8 e5       	ldi	r26, 0x58	; 88
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e8 e5       	ldi	r30, 0x58	; 88
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	81 60       	ori	r24, 0x01	; 1
    1f00:	8c 93       	st	X, r24
    1f02:	d8 c0       	rjmp	.+432    	; 0x20b4 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    1f04:	e9 81       	ldd	r30, Y+1	; 0x01
    1f06:	fa 81       	ldd	r31, Y+2	; 0x02
    1f08:	86 81       	ldd	r24, Z+6	; 0x06
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <Timer_init+0x84>
    1f0e:	d2 c0       	rjmp	.+420    	; 0x20b4 <Timer_init+0x228>
		{
			SET_BIT(TCCR0,WGM01);
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 60       	ori	r24, 0x08	; 8
    1f1c:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1f1e:	ac e5       	ldi	r26, 0x5C	; 92
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    1f2c:	a9 e5       	ldi	r26, 0x59	; 89
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e9 e5       	ldi	r30, 0x59	; 89
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0);
    1f3a:	a8 e5       	ldi	r26, 0x58	; 88
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e8 e5       	ldi	r30, 0x58	; 88
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	82 60       	ori	r24, 0x02	; 2
    1f46:	8c 93       	st	X, r24
    1f48:	b5 c0       	rjmp	.+362    	; 0x20b4 <Timer_init+0x228>
		}
	}
	else if (Config_Ptr->timer_ID == TIMER1)
    1f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4e:	84 81       	ldd	r24, Z+4	; 0x04
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <Timer_init+0xca>
    1f54:	59 c0       	rjmp	.+178    	; 0x2008 <Timer_init+0x17c>
	{
		TCCR1A =0;
    1f56:	ef e4       	ldi	r30, 0x4F	; 79
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A);
    1f5c:	af e4       	ldi	r26, 0x4F	; 79
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ef e4       	ldi	r30, 0x4F	; 79
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	88 60       	ori	r24, 0x08	; 8
    1f68:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1f6a:	af e4       	ldi	r26, 0x4F	; 79
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	ef e4       	ldi	r30, 0x4F	; 79
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	84 60       	ori	r24, 0x04	; 4
    1f76:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->timer_clock;
    1f78:	ae e4       	ldi	r26, 0x4E	; 78
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f80:	85 81       	ldd	r24, Z+5	; 0x05
    1f82:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->timer_InitialValue;
    1f84:	ac e4       	ldi	r26, 0x4C	; 76
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    1f96:	e9 81       	ldd	r30, Y+1	; 0x01
    1f98:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9a:	86 81       	ldd	r24, Z+6	; 0x06
    1f9c:	88 23       	and	r24, r24
    1f9e:	79 f4       	brne	.+30     	; 0x1fbe <Timer_init+0x132>
		{
			SET_BIT(TIMSK, TOIE1);
    1fa0:	a9 e5       	ldi	r26, 0x59	; 89
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e9 e5       	ldi	r30, 0x59	; 89
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	84 60       	ori	r24, 0x04	; 4
    1fac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    1fae:	a8 e5       	ldi	r26, 0x58	; 88
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e8 e5       	ldi	r30, 0x58	; 88
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	84 60       	ori	r24, 0x04	; 4
    1fba:	8c 93       	st	X, r24
    1fbc:	7b c0       	rjmp	.+246    	; 0x20b4 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <Timer_init+0x13e>
    1fc8:	75 c0       	rjmp	.+234    	; 0x20b4 <Timer_init+0x228>
		{
			SET_BIT(TCCR1B, WGM12);
    1fca:	ae e4       	ldi	r26, 0x4E	; 78
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	ee e4       	ldi	r30, 0x4E	; 78
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 60       	ori	r24, 0x08	; 8
    1fd6:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1fd8:	aa e4       	ldi	r26, 0x4A	; 74
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);
    1fea:	a9 e5       	ldi	r26, 0x59	; 89
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e9 e5       	ldi	r30, 0x59	; 89
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 61       	ori	r24, 0x10	; 16
    1ff6:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A);
    1ff8:	a8 e5       	ldi	r26, 0x58	; 88
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e8 e5       	ldi	r30, 0x58	; 88
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	80 61       	ori	r24, 0x10	; 16
    2004:	8c 93       	st	X, r24
    2006:	56 c0       	rjmp	.+172    	; 0x20b4 <Timer_init+0x228>
		}
	}
	else if (Config_Ptr->timer_ID == TIMER2)
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	84 81       	ldd	r24, Z+4	; 0x04
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	09 f0       	breq	.+2      	; 0x2014 <Timer_init+0x188>
    2012:	50 c0       	rjmp	.+160    	; 0x20b4 <Timer_init+0x228>
	{
		SET_BIT(TCCR2, FOC2);
    2014:	a5 e4       	ldi	r26, 0x45	; 69
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e5 e4       	ldi	r30, 0x45	; 69
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->timer_InitialValue;
    2022:	a4 e4       	ldi	r26, 0x44	; 68
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	8c 93       	st	X, r24
		TCCR2 = 0;
    2030:	e5 e4       	ldi	r30, 0x45	; 69
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	10 82       	st	Z, r1
		TCCR2 |= (Config_Ptr->timer_clock);
    2036:	a5 e4       	ldi	r26, 0x45	; 69
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e5 e4       	ldi	r30, 0x45	; 69
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	90 81       	ld	r25, Z
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	85 81       	ldd	r24, Z+5	; 0x05
    2046:	89 2b       	or	r24, r25
    2048:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    204a:	e9 81       	ldd	r30, Y+1	; 0x01
    204c:	fa 81       	ldd	r31, Y+2	; 0x02
    204e:	86 81       	ldd	r24, Z+6	; 0x06
    2050:	88 23       	and	r24, r24
    2052:	79 f4       	brne	.+30     	; 0x2072 <Timer_init+0x1e6>
		{
			SET_BIT(TIMSK, TOIE2);
    2054:	a9 e5       	ldi	r26, 0x59	; 89
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e9 e5       	ldi	r30, 0x59	; 89
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 64       	ori	r24, 0x40	; 64
    2060:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2);
    2062:	a8 e5       	ldi	r26, 0x58	; 88
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e8 e5       	ldi	r30, 0x58	; 88
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 64       	ori	r24, 0x40	; 64
    206e:	8c 93       	st	X, r24
    2070:	21 c0       	rjmp	.+66     	; 0x20b4 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	86 81       	ldd	r24, Z+6	; 0x06
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	e1 f4       	brne	.+56     	; 0x20b4 <Timer_init+0x228>
		{
			SET_BIT(TCCR0, WGM21);
    207c:	a3 e5       	ldi	r26, 0x53	; 83
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e3 e5       	ldi	r30, 0x53	; 83
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	88 60       	ori	r24, 0x08	; 8
    2088:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    208a:	a3 e4       	ldi	r26, 0x43	; 67
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    2098:	a9 e5       	ldi	r26, 0x59	; 89
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e9 e5       	ldi	r30, 0x59	; 89
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2);
    20a6:	a8 e5       	ldi	r26, 0x58	; 88
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e8 e5       	ldi	r30, 0x58	; 88
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 68       	ori	r24, 0x80	; 128
    20b2:	8c 93       	st	X, r24
		}
	}
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <Timer_deInit>:
 *   Function to disable the Timer via Timer_ID.
 *   Inputs: Timer_ID
 *   Return: None
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
	if (timer_type==TIMER0)
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	88 23       	and	r24, r24
    20ce:	e1 f4       	brne	.+56     	; 0x2108 <Timer_deInit+0x4a>
	{
		OCR0=0;
    20d0:	ec e5       	ldi	r30, 0x5C	; 92
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	10 82       	st	Z, r1
		TCCR0=0;
    20d6:	e3 e5       	ldi	r30, 0x53	; 83
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	10 82       	st	Z, r1
		TCNT0= 0;
    20dc:	e2 e5       	ldi	r30, 0x52	; 82
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    20e2:	a9 e5       	ldi	r26, 0x59	; 89
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e9 e5       	ldi	r30, 0x59	; 89
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8d 7f       	andi	r24, 0xFD	; 253
    20ee:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    20f0:	a9 e5       	ldi	r26, 0x59	; 89
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e9 e5       	ldi	r30, 0x59	; 89
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8e 7f       	andi	r24, 0xFE	; 254
    20fc:	8c 93       	st	X, r24
		g_Timer0CallBackPtr=NULL_PTR;
    20fe:	10 92 7e 00 	sts	0x007E, r1
    2102:	10 92 7d 00 	sts	0x007D, r1
    2106:	42 c0       	rjmp	.+132    	; 0x218c <Timer_deInit+0xce>
	}
	else if (timer_type==TIMER1)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	09 f5       	brne	.+66     	; 0x2150 <Timer_deInit+0x92>
	{
		OCR1A=0;
    210e:	ea e4       	ldi	r30, 0x4A	; 74
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	11 82       	std	Z+1, r1	; 0x01
    2114:	10 82       	st	Z, r1
		TCCR1A=0;
    2116:	ef e4       	ldi	r30, 0x4F	; 79
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	10 82       	st	Z, r1
		TCCR1B=0;
    211c:	ee e4       	ldi	r30, 0x4E	; 78
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	10 82       	st	Z, r1
		TCNT1=0;
    2122:	ec e4       	ldi	r30, 0x4C	; 76
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	11 82       	std	Z+1, r1	; 0x01
    2128:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    212a:	a9 e5       	ldi	r26, 0x59	; 89
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 e5       	ldi	r30, 0x59	; 89
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    2138:	a9 e5       	ldi	r26, 0x59	; 89
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 e5       	ldi	r30, 0x59	; 89
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8f 7e       	andi	r24, 0xEF	; 239
    2144:	8c 93       	st	X, r24
		g_Timer1CallBackPtr=NULL_PTR;
    2146:	10 92 80 00 	sts	0x0080, r1
    214a:	10 92 7f 00 	sts	0x007F, r1
    214e:	1e c0       	rjmp	.+60     	; 0x218c <Timer_deInit+0xce>
	}
	else if (timer_type==TIMER2)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	82 30       	cpi	r24, 0x02	; 2
    2154:	d9 f4       	brne	.+54     	; 0x218c <Timer_deInit+0xce>
	{
		OCR2=0;
    2156:	e3 e4       	ldi	r30, 0x43	; 67
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	10 82       	st	Z, r1
		TCCR2=0;
    215c:	e5 e4       	ldi	r30, 0x45	; 69
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	10 82       	st	Z, r1
		TCNT2=0;
    2162:	e4 e4       	ldi	r30, 0x44	; 68
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE2);
    2168:	a9 e5       	ldi	r26, 0x59	; 89
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e9 e5       	ldi	r30, 0x59	; 89
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 77       	andi	r24, 0x7F	; 127
    2174:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE2);
    2176:	a9 e5       	ldi	r26, 0x59	; 89
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e9 e5       	ldi	r30, 0x59	; 89
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 7b       	andi	r24, 0xBF	; 191
    2182:	8c 93       	st	X, r24
		g_Timer2CallBackPtr=NULL_PTR;
    2184:	10 92 82 00 	sts	0x0082, r1
    2188:	10 92 81 00 	sts	0x0081, r1
	}
}
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <Timer_setCallBack>:
 *   Function to set the Call Back function address to the required Timer.
 *   Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 *   Return: None
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <Timer_setCallBack+0x6>
    219a:	0f 92       	push	r0
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID==TIMER0)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	88 23       	and	r24, r24
    21aa:	39 f4       	brne	.+14     	; 0x21ba <Timer_setCallBack+0x26>
	{
		g_Timer0CallBackPtr=a_ptr;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	90 93 7e 00 	sts	0x007E, r25
    21b4:	80 93 7d 00 	sts	0x007D, r24
    21b8:	13 c0       	rjmp	.+38     	; 0x21e0 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER1)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	39 f4       	brne	.+14     	; 0x21ce <Timer_setCallBack+0x3a>
	{
		g_Timer1CallBackPtr=a_ptr;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	90 93 80 00 	sts	0x0080, r25
    21c8:	80 93 7f 00 	sts	0x007F, r24
    21cc:	09 c0       	rjmp	.+18     	; 0x21e0 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER2)
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	31 f4       	brne	.+12     	; 0x21e0 <Timer_setCallBack+0x4c>
	{
		g_Timer2CallBackPtr=a_ptr;
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	90 93 82 00 	sts	0x0082, r25
    21dc:	80 93 81 00 	sts	0x0081, r24
	}
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <TWI_init+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    21fa:	a0 e2       	ldi	r26, 0x20	; 32
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2200:	fa 81       	ldd	r31, Y+2	; 0x02
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	8c 93       	st	X, r24
	TWSR = 0x00;
    2206:	e1 e2       	ldi	r30, 0x21	; 33
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address)<<1);
    220c:	a2 e2       	ldi	r26, 0x22	; 34
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	80 81       	ld	r24, Z
    2216:	88 0f       	add	r24, r24
    2218:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    221a:	e6 e5       	ldi	r30, 0x56	; 86
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	84 e0       	ldi	r24, 0x04	; 4
    2220:	80 83       	st	Z, r24
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <TWI_start>:

void TWI_start(void)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2234:	e6 e5       	ldi	r30, 0x56	; 86
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	84 ea       	ldi	r24, 0xA4	; 164
    223a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    223c:	e6 e5       	ldi	r30, 0x56	; 86
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	88 23       	and	r24, r24
    2244:	dc f7       	brge	.-10     	; 0x223c <TWI_start+0x10>
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <TWI_stop>:

void TWI_stop(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2254:	e6 e5       	ldi	r30, 0x56	; 86
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	84 e9       	ldi	r24, 0x94	; 148
    225a:	80 83       	st	Z, r24
}
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    226e:	e3 e2       	ldi	r30, 0x23	; 35
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2276:	e6 e5       	ldi	r30, 0x56	; 86
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	84 e8       	ldi	r24, 0x84	; 132
    227c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	dc f7       	brge	.-10     	; 0x227e <TWI_writeByte+0x1c>
}
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2298:	e6 e5       	ldi	r30, 0x56	; 86
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	84 ec       	ldi	r24, 0xC4	; 196
    229e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22a0:	e6 e5       	ldi	r30, 0x56	; 86
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	dc f7       	brge	.-10     	; 0x22a0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22aa:	e3 e2       	ldi	r30, 0x23	; 35
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22be:	e6 e5       	ldi	r30, 0x56	; 86
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	84 e8       	ldi	r24, 0x84	; 132
    22c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22c6:	e6 e5       	ldi	r30, 0x56	; 86
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	dc f7       	brge	.-10     	; 0x22c6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    22d0:	e3 e2       	ldi	r30, 0x23	; 35
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    22e6:	e1 e2       	ldi	r30, 0x21	; 33
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	88 7f       	andi	r24, 0xF8	; 248
    22ee:	89 83       	std	Y+1, r24	; 0x01
    return status;
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <UART_init+0x6>
    2300:	00 d0       	rcall	.+0      	; 0x2302 <UART_init+0x8>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    230a:	1a 82       	std	Y+2, r1	; 0x02
    230c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    230e:	eb e2       	ldi	r30, 0x2B	; 43
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2316:	ea e2       	ldi	r30, 0x2A	; 42
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	88 e1       	ldi	r24, 0x18	; 24
    231c:	80 83       	st	Z, r24
	UCSRC =(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    231e:	a0 e4       	ldi	r26, 0x40	; 64
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e0 e4       	ldi	r30, 0x40	; 64
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	28 2f       	mov	r18, r24
    232a:	29 7f       	andi	r18, 0xF9	; 249
    232c:	eb 81       	ldd	r30, Y+3	; 0x03
    232e:	fc 81       	ldd	r31, Y+4	; 0x04
    2330:	80 81       	ld	r24, Z
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	82 2b       	or	r24, r18
    233c:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) ;
    233e:	a0 e4       	ldi	r26, 0x40	; 64
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e0 e4       	ldi	r30, 0x40	; 64
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	80 68       	ori	r24, 0x80	; 128
    234a:	8c 93       	st	X, r24
	UCSRC =(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    234c:	a0 e4       	ldi	r26, 0x40	; 64
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e0 e4       	ldi	r30, 0x40	; 64
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	28 2f       	mov	r18, r24
    2358:	2f 7c       	andi	r18, 0xCF	; 207
    235a:	eb 81       	ldd	r30, Y+3	; 0x03
    235c:	fc 81       	ldd	r31, Y+4	; 0x04
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	82 95       	swap	r24
    2366:	92 95       	swap	r25
    2368:	90 7f       	andi	r25, 0xF0	; 240
    236a:	98 27       	eor	r25, r24
    236c:	80 7f       	andi	r24, 0xF0	; 240
    236e:	98 27       	eor	r25, r24
    2370:	82 2b       	or	r24, r18
    2372:	8c 93       	st	X, r24
	UCSRC =(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    2374:	a0 e4       	ldi	r26, 0x40	; 64
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e0 e4       	ldi	r30, 0x40	; 64
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	28 2f       	mov	r18, r24
    2380:	27 7f       	andi	r18, 0xF7	; 247
    2382:	eb 81       	ldd	r30, Y+3	; 0x03
    2384:	fc 81       	ldd	r31, Y+4	; 0x04
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	82 2b       	or	r24, r18
    239a:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    239c:	eb 81       	ldd	r30, Y+3	; 0x03
    239e:	fc 81       	ldd	r31, Y+4	; 0x04
    23a0:	83 81       	ldd	r24, Z+3	; 0x03
    23a2:	94 81       	ldd	r25, Z+4	; 0x04
    23a4:	a5 81       	ldd	r26, Z+5	; 0x05
    23a6:	b6 81       	ldd	r27, Z+6	; 0x06
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	aa 1f       	adc	r26, r26
    23ae:	bb 1f       	adc	r27, r27
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	aa 1f       	adc	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	aa 1f       	adc	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	9c 01       	movw	r18, r24
    23c2:	ad 01       	movw	r20, r26
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	92 e1       	ldi	r25, 0x12	; 18
    23c8:	aa e7       	ldi	r26, 0x7A	; 122
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 b2 12 	call	0x2564	; 0x2564 <__udivmodsi4>
    23d4:	da 01       	movw	r26, r20
    23d6:	c9 01       	movw	r24, r18
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    23de:	e0 e4       	ldi	r30, 0x40	; 64
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	89 2f       	mov	r24, r25
    23e8:	99 27       	eor	r25, r25
    23ea:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    23ec:	e9 e2       	ldi	r30, 0x29	; 41
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	80 83       	st	Z, r24
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	0f 92       	push	r0
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    240e:	eb e2       	ldi	r30, 0x2B	; 43
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	80 72       	andi	r24, 0x20	; 32
    241a:	90 70       	andi	r25, 0x00	; 0
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	b9 f3       	breq	.-18     	; 0x240e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2420:	ec e2       	ldi	r30, 0x2C	; 44
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2438:	eb e2       	ldi	r30, 0x2B	; 43
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	88 23       	and	r24, r24
    2440:	dc f7       	brge	.-10     	; 0x2438 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2442:	ec e2       	ldi	r30, 0x2C	; 44
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <UART_sendString+0x6>
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	9b 83       	std	Y+3, r25	; 0x03
    245c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	0e c0       	rjmp	.+28     	; 0x247e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	fc 01       	movw	r30, r24
    246e:	e2 0f       	add	r30, r18
    2470:	f3 1f       	adc	r31, r19
    2472:	80 81       	ld	r24, Z
    2474:	0e 94 01 12 	call	0x2402	; 0x2402 <UART_sendByte>
		i++;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	80 81       	ld	r24, Z
    2490:	88 23       	and	r24, r24
    2492:	39 f7       	brne	.-50     	; 0x2462 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <UART_receiveString+0xa>
    24aa:	0f 92       	push	r0
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	9b 83       	std	Y+3, r25	; 0x03
    24b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24b4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	9b 81       	ldd	r25, Y+3	; 0x03
    24c0:	8c 01       	movw	r16, r24
    24c2:	02 0f       	add	r16, r18
    24c4:	13 1f       	adc	r17, r19
    24c6:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	8c 01       	movw	r16, r24
    24e2:	02 0f       	add	r16, r18
    24e4:	13 1f       	adc	r17, r19
    24e6:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_recieveByte>
    24ea:	f8 01       	movw	r30, r16
    24ec:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	83 32       	cpi	r24, 0x23	; 35
    2502:	31 f7       	brne	.-52     	; 0x24d0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	10 82       	st	Z, r1
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <__mulsi3>:
    2526:	62 9f       	mul	r22, r18
    2528:	d0 01       	movw	r26, r0
    252a:	73 9f       	mul	r23, r19
    252c:	f0 01       	movw	r30, r0
    252e:	82 9f       	mul	r24, r18
    2530:	e0 0d       	add	r30, r0
    2532:	f1 1d       	adc	r31, r1
    2534:	64 9f       	mul	r22, r20
    2536:	e0 0d       	add	r30, r0
    2538:	f1 1d       	adc	r31, r1
    253a:	92 9f       	mul	r25, r18
    253c:	f0 0d       	add	r31, r0
    253e:	83 9f       	mul	r24, r19
    2540:	f0 0d       	add	r31, r0
    2542:	74 9f       	mul	r23, r20
    2544:	f0 0d       	add	r31, r0
    2546:	65 9f       	mul	r22, r21
    2548:	f0 0d       	add	r31, r0
    254a:	99 27       	eor	r25, r25
    254c:	72 9f       	mul	r23, r18
    254e:	b0 0d       	add	r27, r0
    2550:	e1 1d       	adc	r30, r1
    2552:	f9 1f       	adc	r31, r25
    2554:	63 9f       	mul	r22, r19
    2556:	b0 0d       	add	r27, r0
    2558:	e1 1d       	adc	r30, r1
    255a:	f9 1f       	adc	r31, r25
    255c:	bd 01       	movw	r22, r26
    255e:	cf 01       	movw	r24, r30
    2560:	11 24       	eor	r1, r1
    2562:	08 95       	ret

00002564 <__udivmodsi4>:
    2564:	a1 e2       	ldi	r26, 0x21	; 33
    2566:	1a 2e       	mov	r1, r26
    2568:	aa 1b       	sub	r26, r26
    256a:	bb 1b       	sub	r27, r27
    256c:	fd 01       	movw	r30, r26
    256e:	0d c0       	rjmp	.+26     	; 0x258a <__udivmodsi4_ep>

00002570 <__udivmodsi4_loop>:
    2570:	aa 1f       	adc	r26, r26
    2572:	bb 1f       	adc	r27, r27
    2574:	ee 1f       	adc	r30, r30
    2576:	ff 1f       	adc	r31, r31
    2578:	a2 17       	cp	r26, r18
    257a:	b3 07       	cpc	r27, r19
    257c:	e4 07       	cpc	r30, r20
    257e:	f5 07       	cpc	r31, r21
    2580:	20 f0       	brcs	.+8      	; 0x258a <__udivmodsi4_ep>
    2582:	a2 1b       	sub	r26, r18
    2584:	b3 0b       	sbc	r27, r19
    2586:	e4 0b       	sbc	r30, r20
    2588:	f5 0b       	sbc	r31, r21

0000258a <__udivmodsi4_ep>:
    258a:	66 1f       	adc	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	88 1f       	adc	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	1a 94       	dec	r1
    2594:	69 f7       	brne	.-38     	; 0x2570 <__udivmodsi4_loop>
    2596:	60 95       	com	r22
    2598:	70 95       	com	r23
    259a:	80 95       	com	r24
    259c:	90 95       	com	r25
    259e:	9b 01       	movw	r18, r22
    25a0:	ac 01       	movw	r20, r24
    25a2:	bd 01       	movw	r22, r26
    25a4:	cf 01       	movw	r24, r30
    25a6:	08 95       	ret

000025a8 <__prologue_saves__>:
    25a8:	2f 92       	push	r2
    25aa:	3f 92       	push	r3
    25ac:	4f 92       	push	r4
    25ae:	5f 92       	push	r5
    25b0:	6f 92       	push	r6
    25b2:	7f 92       	push	r7
    25b4:	8f 92       	push	r8
    25b6:	9f 92       	push	r9
    25b8:	af 92       	push	r10
    25ba:	bf 92       	push	r11
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	ca 1b       	sub	r28, r26
    25d2:	db 0b       	sbc	r29, r27
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	09 94       	ijmp

000025e0 <__epilogue_restores__>:
    25e0:	2a 88       	ldd	r2, Y+18	; 0x12
    25e2:	39 88       	ldd	r3, Y+17	; 0x11
    25e4:	48 88       	ldd	r4, Y+16	; 0x10
    25e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    25e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    25f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25f2:	b9 84       	ldd	r11, Y+9	; 0x09
    25f4:	c8 84       	ldd	r12, Y+8	; 0x08
    25f6:	df 80       	ldd	r13, Y+7	; 0x07
    25f8:	ee 80       	ldd	r14, Y+6	; 0x06
    25fa:	fd 80       	ldd	r15, Y+5	; 0x05
    25fc:	0c 81       	ldd	r16, Y+4	; 0x04
    25fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2600:	aa 81       	ldd	r26, Y+2	; 0x02
    2602:	b9 81       	ldd	r27, Y+1	; 0x01
    2604:	ce 0f       	add	r28, r30
    2606:	d1 1d       	adc	r29, r1
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	ed 01       	movw	r28, r26
    2614:	08 95       	ret

00002616 <_exit>:
    2616:	f8 94       	cli

00002618 <__stop_program>:
    2618:	ff cf       	rjmp	.-2      	; 0x2618 <__stop_program>
