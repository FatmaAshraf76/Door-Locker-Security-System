
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080013c  0080013c  000043ca  2**0
                  ALLOC
  3 .stab         00003bdc  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d4  00000000  00000000  00007fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000937c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000094bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000962c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cf10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dacb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <__vector_4>
      14:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__vector_9>
      28:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__vector_10>
      2c:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
/*******************************************************************************
 *                          main application                                   *
 *******************************************************************************/

int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	e5 97       	sbiw	r28, 0x35	; 53
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	uint8 key_num;

	/* Initialize the Timer  driver */
	Timer_ConfigType TIMER_Configurations={0,7813,TIMER1,F_CPU_1024,CTC_Mode};
    11d6:	ce 01       	movw	r24, r28
    11d8:	4e 96       	adiw	r24, 0x1e	; 30
    11da:	9d a7       	std	Y+45, r25	; 0x2d
    11dc:	8c a7       	std	Y+44, r24	; 0x2c
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	ff a7       	std	Y+47, r31	; 0x2f
    11e4:	ee a7       	std	Y+46, r30	; 0x2e
    11e6:	f7 e0       	ldi	r31, 0x07	; 7
    11e8:	f8 ab       	std	Y+48, r31	; 0x30
    11ea:	ee a5       	ldd	r30, Y+46	; 0x2e
    11ec:	ff a5       	ldd	r31, Y+47	; 0x2f
    11ee:	00 80       	ld	r0, Z
    11f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    11f2:	9f a5       	ldd	r25, Y+47	; 0x2f
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9f a7       	std	Y+47, r25	; 0x2f
    11f8:	8e a7       	std	Y+46, r24	; 0x2e
    11fa:	ec a5       	ldd	r30, Y+44	; 0x2c
    11fc:	fd a5       	ldd	r31, Y+45	; 0x2d
    11fe:	00 82       	st	Z, r0
    1200:	8c a5       	ldd	r24, Y+44	; 0x2c
    1202:	9d a5       	ldd	r25, Y+45	; 0x2d
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	9d a7       	std	Y+45, r25	; 0x2d
    1208:	8c a7       	std	Y+44, r24	; 0x2c
    120a:	98 a9       	ldd	r25, Y+48	; 0x30
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	98 ab       	std	Y+48, r25	; 0x30
    1210:	e8 a9       	ldd	r30, Y+48	; 0x30
    1212:	ee 23       	and	r30, r30
    1214:	51 f7       	brne	.-44     	; 0x11ea <main+0x28>
	Timer_init(&TIMER_Configurations);
    1216:	ce 01       	movw	r24, r28
    1218:	4e 96       	adiw	r24, 0x1e	; 30
    121a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <Timer_init>
	Timer_setCallBack(Timer_CallBack,TIMER_Configurations.timer_ID);
    121e:	2a a1       	ldd	r18, Y+34	; 0x22
    1220:	85 e5       	ldi	r24, 0x55	; 85
    1222:	9a e0       	ldi	r25, 0x0A	; 10
    1224:	62 2f       	mov	r22, r18
    1226:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <Timer_setCallBack>

	/* Initialize the UART driver */
	UART_ConfigType UART_Configurations = {EIGHT_BIT,Disabled,ONE_BIT,BaudRate3};
    122a:	ce 01       	movw	r24, r28
    122c:	85 96       	adiw	r24, 0x25	; 37
    122e:	9a ab       	std	Y+50, r25	; 0x32
    1230:	89 ab       	std	Y+49, r24	; 0x31
    1232:	ee e2       	ldi	r30, 0x2E	; 46
    1234:	f1 e0       	ldi	r31, 0x01	; 1
    1236:	fc ab       	std	Y+52, r31	; 0x34
    1238:	eb ab       	std	Y+51, r30	; 0x33
    123a:	f7 e0       	ldi	r31, 0x07	; 7
    123c:	fd ab       	std	Y+53, r31	; 0x35
    123e:	eb a9       	ldd	r30, Y+51	; 0x33
    1240:	fc a9       	ldd	r31, Y+52	; 0x34
    1242:	00 80       	ld	r0, Z
    1244:	8b a9       	ldd	r24, Y+51	; 0x33
    1246:	9c a9       	ldd	r25, Y+52	; 0x34
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	9c ab       	std	Y+52, r25	; 0x34
    124c:	8b ab       	std	Y+51, r24	; 0x33
    124e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1250:	fa a9       	ldd	r31, Y+50	; 0x32
    1252:	00 82       	st	Z, r0
    1254:	89 a9       	ldd	r24, Y+49	; 0x31
    1256:	9a a9       	ldd	r25, Y+50	; 0x32
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	9a ab       	std	Y+50, r25	; 0x32
    125c:	89 ab       	std	Y+49, r24	; 0x31
    125e:	9d a9       	ldd	r25, Y+53	; 0x35
    1260:	91 50       	subi	r25, 0x01	; 1
    1262:	9d ab       	std	Y+53, r25	; 0x35
    1264:	ed a9       	ldd	r30, Y+53	; 0x35
    1266:	ee 23       	and	r30, r30
    1268:	51 f7       	brne	.-44     	; 0x123e <main+0x7c>
	UART_init(&UART_Configurations);
    126a:	ce 01       	movw	r24, r28
    126c:	85 96       	adiw	r24, 0x25	; 37
    126e:	0e 94 77 1f 	call	0x3eee	; 0x3eee <UART_init>

	/* Initialize the LCD  driver */
	LCD_init();
    1272:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <LCD_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1276:	af e5       	ldi	r26, 0x5F	; 95
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	ef e5       	ldi	r30, 0x5F	; 95
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	8c 93       	st	X, r24

	while (UART_recieveByte() != READY);
    1284:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1288:	80 31       	cpi	r24, 0x10	; 16
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0xc2>
	Create_password();
    128c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Create_password>

    while(1)
    {
		LCD_clearScreen();
    1290:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	    LCD_displayString("+ :Open Door");
    1294:	80 e6       	ldi	r24, 0x60	; 96
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	    LCD_moveCursor(1,0);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	    LCD_displayString("- :Change Pass");
    12a4:	8d e6       	ldi	r24, 0x6D	; 109
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>

	    key_num=KEYPAD_getPressedKey();
    12ac:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    12b0:	8d 8f       	std	Y+29, r24	; 0x1d
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	aa ef       	ldi	r26, 0xFA	; 250
    12b8:	b3 e4       	ldi	r27, 0x43	; 67
    12ba:	89 8f       	std	Y+25, r24	; 0x19
    12bc:	9a 8f       	std	Y+26, r25	; 0x1a
    12be:	ab 8f       	std	Y+27, r26	; 0x1b
    12c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	69 8d       	ldd	r22, Y+25	; 0x19
    12c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a ef       	ldi	r20, 0xFA	; 250
    12d0:	54 e4       	ldi	r21, 0x44	; 68
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8d 8b       	std	Y+21, r24	; 0x15
    12dc:	9e 8b       	std	Y+22, r25	; 0x16
    12de:	af 8b       	std	Y+23, r26	; 0x17
    12e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <main+0x142>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
    1300:	8b 8b       	std	Y+19, r24	; 0x13
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <main+0x1c0>
	else if (__tmp > 65535)
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	69 8d       	ldd	r22, Y+25	; 0x19
    131e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9c 8b       	std	Y+20, r25	; 0x14
    1342:	8b 8b       	std	Y+19, r24	; 0x13
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <main+0x1a2>
    1346:	88 ec       	ldi	r24, 0xC8	; 200
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9a 8b       	std	Y+18, r25	; 0x12
    134c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134e:	89 89       	ldd	r24, Y+17	; 0x11
    1350:	9a 89       	ldd	r25, Y+18	; 0x12
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <main+0x190>
    1356:	9a 8b       	std	Y+18, r25	; 0x12
    1358:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8b 89       	ldd	r24, Y+19	; 0x13
    135c:	9c 89       	ldd	r25, Y+20	; 0x14
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9c 8b       	std	Y+20, r25	; 0x14
    1362:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8b 89       	ldd	r24, Y+19	; 0x13
    1366:	9c 89       	ldd	r25, Y+20	; 0x14
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <main+0x184>
    136c:	8a c0       	rjmp	.+276    	; 0x1482 <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6d 89       	ldd	r22, Y+21	; 0x15
    1370:	7e 89       	ldd	r23, Y+22	; 0x16
    1372:	8f 89       	ldd	r24, Y+23	; 0x17
    1374:	98 8d       	ldd	r25, Y+24	; 0x18
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9c 8b       	std	Y+20, r25	; 0x14
    1380:	8b 8b       	std	Y+19, r24	; 0x13
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	98 8b       	std	Y+16, r25	; 0x10
    1388:	8f 87       	std	Y+15, r24	; 0x0f
    138a:	8f 85       	ldd	r24, Y+15	; 0x0f
    138c:	98 89       	ldd	r25, Y+16	; 0x10
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <main+0x1cc>
    1392:	98 8b       	std	Y+16, r25	; 0x10
    1394:	8f 87       	std	Y+15, r24	; 0x0f
    1396:	75 c0       	rjmp	.+234    	; 0x1482 <main+0x2c0>
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
		{
			key_num=KEYPAD_getPressedKey();
    1398:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    139c:	8d 8f       	std	Y+29, r24	; 0x1d
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	aa ef       	ldi	r26, 0xFA	; 250
    13a4:	b3 e4       	ldi	r27, 0x43	; 67
    13a6:	8b 87       	std	Y+11, r24	; 0x0b
    13a8:	9c 87       	std	Y+12, r25	; 0x0c
    13aa:	ad 87       	std	Y+13, r26	; 0x0d
    13ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a ef       	ldi	r20, 0xFA	; 250
    13bc:	54 e4       	ldi	r21, 0x44	; 68
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8f 83       	std	Y+7, r24	; 0x07
    13c8:	98 87       	std	Y+8, r25	; 0x08
    13ca:	a9 87       	std	Y+9, r26	; 0x09
    13cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <main+0x22e>
		__ticks = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	3f c0       	rjmp	.+126    	; 0x146e <main+0x2ac>
	else if (__tmp > 65535)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	57 e4       	ldi	r21, 0x47	; 71
    1400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1404:	18 16       	cp	r1, r24
    1406:	4c f5       	brge	.+82     	; 0x145a <main+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <main+0x28e>
    1432:	88 ec       	ldi	r24, 0xC8	; 200
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <main+0x27c>
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	69 f7       	brne	.-38     	; 0x1432 <main+0x270>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <main+0x2b8>
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
	    LCD_displayString("- :Change Pass");

	    key_num=KEYPAD_getPressedKey();
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
    1482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1484:	8d 32       	cpi	r24, 0x2D	; 45
    1486:	21 f0       	breq	.+8      	; 0x1490 <main+0x2ce>
    1488:	8d 8d       	ldd	r24, Y+29	; 0x1d
    148a:	8b 32       	cpi	r24, 0x2B	; 43
    148c:	09 f0       	breq	.+2      	; 0x1490 <main+0x2ce>
    148e:	84 cf       	rjmp	.-248    	; 0x1398 <main+0x1d6>
		{
			key_num=KEYPAD_getPressedKey();
			_delay_ms(500);
		}
	    if(key_num == '+')
    1490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1492:	8b 32       	cpi	r24, 0x2B	; 43
    1494:	19 f4       	brne	.+6      	; 0x149c <main+0x2da>
		{
			Open_Door();
    1496:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    149a:	fa ce       	rjmp	.-524    	; 0x1290 <main+0xce>
		}
		else if(key_num == '-')
    149c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    149e:	8d 32       	cpi	r24, 0x2D	; 45
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0x2e2>
    14a2:	f6 ce       	rjmp	.-532    	; 0x1290 <main+0xce>
		{
			Chanage_Password();
    14a4:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
    14a8:	f3 ce       	rjmp	.-538    	; 0x1290 <main+0xce>

000014aa <Timer_CallBack>:

/*******************************************************************************
 *                          Functions                                    *
 *******************************************************************************/
void Timer_CallBack(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    14b2:	80 91 3c 01 	lds	r24, 0x013C
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	80 93 3c 01 	sts	0x013C, r24
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <Send_password>:


void Send_password(uint8 *ptr)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	61 97       	sbiw	r28, 0x11	; 17
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	99 8b       	std	Y+17, r25	; 0x11
    14d8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	 while (UART_recieveByte() != READY);
    14da:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    14de:	80 31       	cpi	r24, 0x10	; 16
    14e0:	e1 f7       	brne	.-8      	; 0x14da <Send_password+0x18>
    for(i=0;i<PASSWORD_MAX_SIZE;i++)
    14e2:	1f 86       	std	Y+15, r1	; 0x0f
    14e4:	80 c0       	rjmp	.+256    	; 0x15e6 <Send_password+0x124>
    {
        UART_sendByte(ptr[i]);
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	88 89       	ldd	r24, Y+16	; 0x10
    14ee:	99 89       	ldd	r25, Y+17	; 0x11
    14f0:	fc 01       	movw	r30, r24
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 81       	ld	r24, Z
    14f8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	af ea       	ldi	r26, 0xAF	; 175
    1502:	b3 e4       	ldi	r27, 0x43	; 67
    1504:	8b 87       	std	Y+11, r24	; 0x0b
    1506:	9c 87       	std	Y+12, r25	; 0x0c
    1508:	ad 87       	std	Y+13, r26	; 0x0d
    150a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	6b 85       	ldd	r22, Y+11	; 0x0b
    150e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1510:	8d 85       	ldd	r24, Y+13	; 0x0d
    1512:	9e 85       	ldd	r25, Y+14	; 0x0e
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	a9 87       	std	Y+9, r26	; 0x09
    152a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <Send_password+0x8c>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <Send_password+0x10a>
	else if (__tmp > 65535)
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <Send_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <Send_password+0xec>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <Send_password+0xda>
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <Send_password+0xce>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <Send_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <Send_password+0x116>
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01

void Send_password(uint8 *ptr)
{
	uint8 i;
	 while (UART_recieveByte() != READY);
    for(i=0;i<PASSWORD_MAX_SIZE;i++)
    15e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	85 30       	cpi	r24, 0x05	; 5
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <Send_password+0x12c>
    15ec:	7c cf       	rjmp	.-264    	; 0x14e6 <Send_password+0x24>
    {
        UART_sendByte(ptr[i]);
        _delay_ms(350);
    }
}
    15ee:	61 96       	adiw	r28, 0x11	; 17
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <Enter_password>:


void Enter_password(uint8 *ptr)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	62 97       	sbiw	r28, 0x12	; 18
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	9a 8b       	std	Y+18, r25	; 0x12
    1616:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i;
	uint8 key_num;
	/* Get the pressed button from keypad */
	for(i=0;i<PASSWORD_MAX_SIZE;i++)
    1618:	18 8a       	std	Y+16, r1	; 0x10
    161a:	8e c0       	rjmp	.+284    	; 0x1738 <Enter_password+0x138>
	{
		key_num = KEYPAD_getPressedKey();
    161c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    1620:	8f 87       	std	Y+15, r24	; 0x0f
		if(key_num>=0 && key_num<=9)
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	8a 30       	cpi	r24, 0x0A	; 10
    1626:	08 f0       	brcs	.+2      	; 0x162a <Enter_password+0x2a>
    1628:	81 c0       	rjmp	.+258    	; 0x172c <Enter_password+0x12c>
		{
			LCD_displayString("*");
    162a:	8c e7       	ldi	r24, 0x7C	; 124
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
			ptr[i]=key_num;
    1632:	88 89       	ldd	r24, Y+16	; 0x10
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	89 89       	ldd	r24, Y+17	; 0x11
    163a:	9a 89       	ldd	r25, Y+18	; 0x12
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	8f 85       	ldd	r24, Y+15	; 0x0f
    1644:	80 83       	st	Z, r24
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	af ea       	ldi	r26, 0xAF	; 175
    164c:	b3 e4       	ldi	r27, 0x43	; 67
    164e:	8b 87       	std	Y+11, r24	; 0x0b
    1650:	9c 87       	std	Y+12, r25	; 0x0c
    1652:	ad 87       	std	Y+13, r26	; 0x0d
    1654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	6b 85       	ldd	r22, Y+11	; 0x0b
    1658:	7c 85       	ldd	r23, Y+12	; 0x0c
    165a:	8d 85       	ldd	r24, Y+13	; 0x0d
    165c:	9e 85       	ldd	r25, Y+14	; 0x0e
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a ef       	ldi	r20, 0xFA	; 250
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	8f 83       	std	Y+7, r24	; 0x07
    1670:	98 87       	std	Y+8, r25	; 0x08
    1672:	a9 87       	std	Y+9, r26	; 0x09
    1674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1676:	6f 81       	ldd	r22, Y+7	; 0x07
    1678:	78 85       	ldd	r23, Y+8	; 0x08
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e8       	ldi	r20, 0x80	; 128
    1684:	5f e3       	ldi	r21, 0x3F	; 63
    1686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168a:	88 23       	and	r24, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <Enter_password+0x98>
		__ticks = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <Enter_password+0x116>
	else if (__tmp > 65535)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	4c f5       	brge	.+82     	; 0x1702 <Enter_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <Enter_password+0xf8>
    16da:	88 ec       	ldi	r24, 0xC8	; 200
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <Enter_password+0xe6>
    16ea:	9c 83       	std	Y+4, r25	; 0x04
    16ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <Enter_password+0xda>
    1700:	18 c0       	rjmp	.+48     	; 0x1732 <Enter_password+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <Enter_password+0x122>
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <Enter_password+0x132>
			_delay_ms(350);
		}
		else
		{
			i--;
    172c:	88 89       	ldd	r24, Y+16	; 0x10
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	88 8b       	std	Y+16, r24	; 0x10
void Enter_password(uint8 *ptr)
{
	uint8 i;
	uint8 key_num;
	/* Get the pressed button from keypad */
	for(i=0;i<PASSWORD_MAX_SIZE;i++)
    1732:	88 89       	ldd	r24, Y+16	; 0x10
    1734:	8f 5f       	subi	r24, 0xFF	; 255
    1736:	88 8b       	std	Y+16, r24	; 0x10
    1738:	88 89       	ldd	r24, Y+16	; 0x10
    173a:	85 30       	cpi	r24, 0x05	; 5
    173c:	08 f4       	brcc	.+2      	; 0x1740 <Enter_password+0x140>
    173e:	6e cf       	rjmp	.-292    	; 0x161c <Enter_password+0x1c>
		{
			i--;
		}
	}
	/*when press enter mean finish entering the password*/
	while(KEYPAD_getPressedKey() != ENTER){};
    1740:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    1744:	8d 30       	cpi	r24, 0x0D	; 13
    1746:	e1 f7       	brne	.-8      	; 0x1740 <Enter_password+0x140>
}
    1748:	62 96       	adiw	r28, 0x12	; 18
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <compare_password>:

uint8 compare_password(uint8 *ptr1 ,uint8 *ptr2)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <compare_password+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <compare_password+0x8>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <compare_password+0xa>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9b 83       	std	Y+3, r25	; 0x03
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	7d 83       	std	Y+5, r23	; 0x05
    176e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<PASSWORD_MAX_SIZE;i++)
    1770:	19 82       	std	Y+1, r1	; 0x01
    1772:	19 c0       	rjmp	.+50     	; 0x17a6 <compare_password+0x4c>
	{
		if(ptr1[i]!=ptr2[i])
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	fc 01       	movw	r30, r24
    1780:	e2 0f       	add	r30, r18
    1782:	f3 1f       	adc	r31, r19
    1784:	40 81       	ld	r20, Z
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	fc 01       	movw	r30, r24
    1792:	e2 0f       	add	r30, r18
    1794:	f3 1f       	adc	r31, r19
    1796:	80 81       	ld	r24, Z
    1798:	48 17       	cp	r20, r24
    179a:	11 f0       	breq	.+4      	; 0x17a0 <compare_password+0x46>
		{
			return UNMATCHED;
    179c:	1e 82       	std	Y+6, r1	; 0x06
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <compare_password+0x56>
}

uint8 compare_password(uint8 *ptr1 ,uint8 *ptr2)
{
	uint8 i;
	for(i=0;i<PASSWORD_MAX_SIZE;i++)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	85 30       	cpi	r24, 0x05	; 5
    17aa:	20 f3       	brcs	.-56     	; 0x1774 <compare_password+0x1a>
		if(ptr1[i]!=ptr2[i])
		{
			return UNMATCHED;
		}
	}
	return MATCHED;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8e 83       	std	Y+6, r24	; 0x06
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    17b2:	26 96       	adiw	r28, 0x06	; 6
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <Create_password>:


void Create_password(void)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	6d 97       	sbiw	r28, 0x1d	; 29
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	LCD_clearScreen();
    17d8:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    17dc:	8e e7       	ldi	r24, 0x7E	; 126
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	LCD_moveCursor(1, 0);
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	Enter_password(password1);
    17ec:	89 e4       	ldi	r24, 0x49	; 73
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 00 0b 	call	0x1600	; 0x1600 <Enter_password>

	LCD_clearScreen();
    17f4:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	LCD_displayString("PlZ re_Enter the");
    17f8:	8e e8       	ldi	r24, 0x8E	; 142
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	LCD_moveCursor(1,0);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	LCD_displayString("same pass:");
    1808:	8f e9       	ldi	r24, 0x9F	; 159
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	LCD_moveCursor(1,11);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	6b e0       	ldi	r22, 0x0B	; 11
    1814:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	Enter_password(password2);
    1818:	84 e4       	ldi	r24, 0x44	; 68
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 00 0b 	call	0x1600	; 0x1600 <Enter_password>
	LCD_clearScreen();
    1820:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	check=compare_password(password1,password2);
    1824:	89 e4       	ldi	r24, 0x49	; 73
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	24 e4       	ldi	r18, 0x44	; 68
    182a:	31 e0       	ldi	r19, 0x01	; 1
    182c:	b9 01       	movw	r22, r18
    182e:	0e 94 ad 0b 	call	0x175a	; 0x175a <compare_password>
    1832:	8d 8f       	std	Y+29, r24	; 0x1d

	if (check == UNMATCHED)
    1834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1836:	88 23       	and	r24, r24
    1838:	09 f0       	breq	.+2      	; 0x183c <Create_password+0x78>
    183a:	7b c0       	rjmp	.+246    	; 0x1932 <Create_password+0x16e>
	{
		LCD_displayString(" rejected ");
    183c:	8a ea       	ldi	r24, 0xAA	; 170
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	aa ef       	ldi	r26, 0xFA	; 250
    184a:	b3 e4       	ldi	r27, 0x43	; 67
    184c:	89 8f       	std	Y+25, r24	; 0x19
    184e:	9a 8f       	std	Y+26, r25	; 0x1a
    1850:	ab 8f       	std	Y+27, r26	; 0x1b
    1852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	69 8d       	ldd	r22, Y+25	; 0x19
    1856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8d 8b       	std	Y+21, r24	; 0x15
    186e:	9e 8b       	std	Y+22, r25	; 0x16
    1870:	af 8b       	std	Y+23, r26	; 0x17
    1872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <Create_password+0xd2>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <Create_password+0x150>
	else if (__tmp > 65535)
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <Create_password+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	69 8d       	ldd	r22, Y+25	; 0x19
    18b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <Create_password+0x132>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9a 8b       	std	Y+18, r25	; 0x12
    18de:	89 8b       	std	Y+17, r24	; 0x11
    18e0:	89 89       	ldd	r24, Y+17	; 0x11
    18e2:	9a 89       	ldd	r25, Y+18	; 0x12
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <Create_password+0x120>
    18e8:	9a 8b       	std	Y+18, r25	; 0x12
    18ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8b 89       	ldd	r24, Y+19	; 0x13
    18f8:	9c 89       	ldd	r25, Y+20	; 0x14
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <Create_password+0x114>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <Create_password+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9c 8b       	std	Y+20, r25	; 0x14
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	8b 89       	ldd	r24, Y+19	; 0x13
    1916:	9c 89       	ldd	r25, Y+20	; 0x14
    1918:	98 8b       	std	Y+16, r25	; 0x10
    191a:	8f 87       	std	Y+15, r24	; 0x0f
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	98 89       	ldd	r25, Y+16	; 0x10
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <Create_password+0x15c>
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_clearScreen();
    1928:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		Create_password();
    192c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Create_password>
    1930:	7f c0       	rjmp	.+254    	; 0x1a30 <Create_password+0x26c>
	}
	else
	{
		LCD_displayString(" accepted ");
    1932:	85 eb       	ldi	r24, 0xB5	; 181
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	aa ef       	ldi	r26, 0xFA	; 250
    1940:	b3 e4       	ldi	r27, 0x43	; 67
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	9c 87       	std	Y+12, r25	; 0x0c
    1946:	ad 87       	std	Y+13, r26	; 0x0d
    1948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6b 85       	ldd	r22, Y+11	; 0x0b
    194c:	7c 85       	ldd	r23, Y+12	; 0x0c
    194e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1950:	9e 85       	ldd	r25, Y+14	; 0x0e
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8f 83       	std	Y+7, r24	; 0x07
    1964:	98 87       	std	Y+8, r25	; 0x08
    1966:	a9 87       	std	Y+9, r26	; 0x09
    1968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <Create_password+0x1c8>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <Create_password+0x246>
	else if (__tmp > 65535)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <Create_password+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <Create_password+0x228>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <Create_password+0x216>
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <Create_password+0x20a>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <Create_password+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <Create_password+0x252>
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_clearScreen();
    1a1e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		UART_sendByte(EEPROM_SAVE_PASSWORD);
    1a22:	81 e1       	ldi	r24, 0x11	; 17
    1a24:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		Send_password(password1);
    1a28:	89 e4       	ldi	r24, 0x49	; 73
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <Send_password>
	}
}
    1a30:	6d 96       	adiw	r28, 0x1d	; 29
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <Open_Door>:

void Open_Door(void)
{
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	c6 55       	subi	r28, 0x56	; 86
    1a50:	d0 40       	sbci	r29, 0x00	; 0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	uint8 key_num;
	try_agin++;
    1a5c:	80 91 3d 01 	lds	r24, 0x013D
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 93 3d 01 	sts	0x013D, r24
	LCD_clearScreen();
    1a66:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	LCD_displayString( "plz enter Pass:");
    1a6a:	80 ec       	ldi	r24, 0xC0	; 192
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	Enter_password(password1);
    1a7a:	89 e4       	ldi	r24, 0x49	; 73
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0e 94 00 0b 	call	0x1600	; 0x1600 <Enter_password>

	UART_sendByte(ENTER_PASSWORD);
    1a82:	82 e1       	ldi	r24, 0x12	; 18
    1a84:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
	Send_password(password1);
    1a88:	89 e4       	ldi	r24, 0x49	; 73
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <Send_password>
	UART_sendByte(READY);
    1a90:	80 e1       	ldi	r24, 0x10	; 16
    1a92:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
	check=UART_recieveByte();
    1a96:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ea 5a       	subi	r30, 0xAA	; 170
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 83       	st	Z, r24

	if(check == MATCHED)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	ea 5a       	subi	r30, 0xAA	; 170
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <Open_Door+0x6e>
    1aae:	b1 c1       	rjmp	.+866    	; 0x1e12 <Open_Door+0x3d0>
	{
		UART_sendByte(DOOR_OPEN);
    1ab0:	84 e1       	ldi	r24, 0x14	; 20
    1ab2:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		seconds = 0;
    1ab6:	10 92 3c 01 	sts	0x013C, r1
		LCD_clearScreen();
    1aba:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		LCD_displayString("Door Unlocking..");
    1abe:	80 ed       	ldi	r24, 0xD0	; 208
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		while (seconds < 15);
    1ac6:	80 91 3c 01 	lds	r24, 0x013C
    1aca:	8f 30       	cpi	r24, 0x0F	; 15
    1acc:	e0 f3       	brcs	.-8      	; 0x1ac6 <Open_Door+0x84>


		while (UART_recieveByte() != DOOR_OPEN){};
    1ace:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1ad2:	84 31       	cpi	r24, 0x14	; 20
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <Open_Door+0x8c>

		UART_sendByte(DOOR_STOP);
    1ad6:	86 e1       	ldi	r24, 0x16	; 22
    1ad8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		LCD_clearScreen();
    1adc:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		LCD_displayString("Wait for people");
    1ae0:	81 ee       	ldi	r24, 0xE1	; 225
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		LCD_moveCursor(1,6);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	66 e0       	ldi	r22, 0x06	; 6
    1aec:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
		LCD_displayString("to Enter");
    1af0:	81 ef       	ldi	r24, 0xF1	; 241
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		//_delay_ms(500);
		while (UART_recieveByte() != DOOR_STOP){};
    1af8:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1afc:	86 31       	cpi	r24, 0x16	; 22
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <Open_Door+0xb6>

		UART_sendByte(DOOR_CLOSE);
    1b00:	85 e1       	ldi	r24, 0x15	; 21
    1b02:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		seconds = 0;
    1b06:	10 92 3c 01 	sts	0x013C, r1
		LCD_clearScreen();
    1b0a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		LCD_displayString("Door locking.. ");
    1b0e:	8a ef       	ldi	r24, 0xFA	; 250
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		while (seconds < 15);
    1b16:	80 91 3c 01 	lds	r24, 0x013C
    1b1a:	8f 30       	cpi	r24, 0x0F	; 15
    1b1c:	e0 f3       	brcs	.-8      	; 0x1b16 <Open_Door+0xd4>

		while (UART_recieveByte() != DOOR_CLOSE){};
    1b1e:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1b22:	85 31       	cpi	r24, 0x15	; 21
    1b24:	e1 f7       	brne	.-8      	; 0x1b1e <Open_Door+0xdc>

		try_agin = 0;
    1b26:	10 92 3d 01 	sts	0x013D, r1
		LCD_clearScreen();
    1b2a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	    LCD_displayString("+ :Open Door");
    1b2e:	80 e6       	ldi	r24, 0x60	; 96
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	    LCD_moveCursor(1,0);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	    LCD_displayString("- :Change Pass");
    1b3e:	8d e6       	ldi	r24, 0x6D	; 109
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>

	    key_num=KEYPAD_getPressedKey();
    1b46:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	eb 5a       	subi	r30, 0xAB	; 171
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 83       	st	Z, r24
    1b52:	fe 01       	movw	r30, r28
    1b54:	ef 5a       	subi	r30, 0xAF	; 175
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	aa ef       	ldi	r26, 0xFA	; 250
    1b5e:	b3 e4       	ldi	r27, 0x43	; 67
    1b60:	80 83       	st	Z, r24
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	8e 01       	movw	r16, r28
    1b6a:	03 5b       	subi	r16, 0xB3	; 179
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ef 5a       	subi	r30, 0xAF	; 175
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b96:	fe 01       	movw	r30, r28
    1b98:	e3 5b       	subi	r30, 0xB3	; 179
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	44 f4       	brge	.+16     	; 0x1bc4 <Open_Door+0x182>
		__ticks = 1;
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e5 5b       	subi	r30, 0xB5	; 181
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	64 c0       	rjmp	.+200    	; 0x1c8c <Open_Door+0x24a>
	else if (__tmp > 65535)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e3 5b       	subi	r30, 0xB3	; 179
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	0c f0       	brlt	.+2      	; 0x1be4 <Open_Door+0x1a2>
    1be2:	43 c0       	rjmp	.+134    	; 0x1c6a <Open_Door+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	fe 01       	movw	r30, r28
    1be6:	ef 5a       	subi	r30, 0xAF	; 175
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8e 01       	movw	r16, r28
    1c04:	05 5b       	subi	r16, 0xB5	; 181
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	1f c0       	rjmp	.+62     	; 0x1c5a <Open_Door+0x218>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e7 5b       	subi	r30, 0xB7	; 183
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e7 5b       	subi	r30, 0xB7	; 183
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <Open_Door+0x1f2>
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 5b       	subi	r30, 0xB7	; 183
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	de 01       	movw	r26, r28
    1c44:	a5 5b       	subi	r26, 0xB5	; 181
    1c46:	bf 4f       	sbci	r27, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e5 5b       	subi	r30, 0xB5	; 181
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	d1 f6       	brne	.-76     	; 0x1c1c <Open_Door+0x1da>
    1c68:	b4 c0       	rjmp	.+360    	; 0x1dd2 <Open_Door+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	05 5b       	subi	r16, 0xB5	; 181
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	e3 5b       	subi	r30, 0xB3	; 179
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	de 01       	movw	r26, r28
    1c8e:	a9 5b       	subi	r26, 0xB9	; 185
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e5 5b       	subi	r30, 0xB5	; 181
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	9c 93       	st	X, r25
    1ca0:	8e 93       	st	-X, r24
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e9 5b       	subi	r30, 0xB9	; 185
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <Open_Door+0x26a>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e9 5b       	subi	r30, 0xB9	; 185
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
    1cba:	8b c0       	rjmp	.+278    	; 0x1dd2 <Open_Door+0x390>
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
		{
			key_num=KEYPAD_getPressedKey();
    1cbc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	eb 5a       	subi	r30, 0xAB	; 171
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 83       	st	Z, r24
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ed 5b       	subi	r30, 0xBD	; 189
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	aa ef       	ldi	r26, 0xFA	; 250
    1cd4:	b3 e4       	ldi	r27, 0x43	; 67
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	01 5c       	subi	r16, 0xC1	; 193
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ed 5b       	subi	r30, 0xBD	; 189
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 83       	st	Z, r24
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	a2 83       	std	Z+2, r26	; 0x02
    1d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ff 96       	adiw	r30, 0x3f	; 63
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <Open_Door+0x2f0>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e af       	std	Y+62, r25	; 0x3e
    1d2e:	8d af       	std	Y+61, r24	; 0x3d
    1d30:	46 c0       	rjmp	.+140    	; 0x1dbe <Open_Door+0x37c>
	else if (__tmp > 65535)
    1d32:	fe 01       	movw	r30, r28
    1d34:	ff 96       	adiw	r30, 0x3f	; 63
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	64 f5       	brge	.+88     	; 0x1da6 <Open_Door+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ed 5b       	subi	r30, 0xBD	; 189
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e af       	std	Y+62, r25	; 0x3e
    1d7a:	8d af       	std	Y+61, r24	; 0x3d
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <Open_Door+0x35a>
    1d7e:	88 ec       	ldi	r24, 0xC8	; 200
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c af       	std	Y+60, r25	; 0x3c
    1d84:	8b af       	std	Y+59, r24	; 0x3b
    1d86:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d88:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <Open_Door+0x348>
    1d8e:	9c af       	std	Y+60, r25	; 0x3c
    1d90:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	9e af       	std	Y+62, r25	; 0x3e
    1d9a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	69 f7       	brne	.-38     	; 0x1d7e <Open_Door+0x33c>
    1da4:	16 c0       	rjmp	.+44     	; 0x1dd2 <Open_Door+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	fe 01       	movw	r30, r28
    1da8:	ff 96       	adiw	r30, 0x3f	; 63
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e af       	std	Y+62, r25	; 0x3e
    1dbc:	8d af       	std	Y+61, r24	; 0x3d
    1dbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dc2:	9a af       	std	Y+58, r25	; 0x3a
    1dc4:	89 af       	std	Y+57, r24	; 0x39
    1dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <Open_Door+0x388>
    1dce:	9a af       	std	Y+58, r25	; 0x3a
    1dd0:	89 af       	std	Y+57, r24	; 0x39
	    LCD_displayString("- :Change Pass");

	    key_num=KEYPAD_getPressedKey();
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	eb 5a       	subi	r30, 0xAB	; 171
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	8d 32       	cpi	r24, 0x2D	; 45
    1ddc:	39 f0       	breq	.+14     	; 0x1dec <Open_Door+0x3aa>
    1dde:	fe 01       	movw	r30, r28
    1de0:	eb 5a       	subi	r30, 0xAB	; 171
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	8b 32       	cpi	r24, 0x2B	; 43
    1de8:	09 f0       	breq	.+2      	; 0x1dec <Open_Door+0x3aa>
    1dea:	68 cf       	rjmp	.-304    	; 0x1cbc <Open_Door+0x27a>
		{
			key_num=KEYPAD_getPressedKey();
		    _delay_ms(500);
		}
		if(key_num == '+')
    1dec:	fe 01       	movw	r30, r28
    1dee:	eb 5a       	subi	r30, 0xAB	; 171
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	8b 32       	cpi	r24, 0x2B	; 43
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <Open_Door+0x3bc>
		{
			Open_Door();
    1df8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    1dfc:	35 c2       	rjmp	.+1130   	; 0x2268 <Open_Door+0x826>
		}
		else if(key_num == '-')
    1dfe:	fe 01       	movw	r30, r28
    1e00:	eb 5a       	subi	r30, 0xAB	; 171
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	8d 32       	cpi	r24, 0x2D	; 45
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <Open_Door+0x3ca>
    1e0a:	2e c2       	rjmp	.+1116   	; 0x2268 <Open_Door+0x826>
		{
			Chanage_Password();
    1e0c:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
    1e10:	2b c2       	rjmp	.+1110   	; 0x2268 <Open_Door+0x826>
		}
	}
	else
	{
		if(try_agin!=PASSWORD_MAX_trial)
    1e12:	80 91 3d 01 	lds	r24, 0x013D
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <Open_Door+0x3da>
    1e1a:	7b c0       	rjmp	.+246    	; 0x1f12 <Open_Door+0x4d0>
		{
		    LCD_clearScreen();
    1e1c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		    LCD_displayString("UNMATCHED");
    1e20:	8a e0       	ldi	r24, 0x0A	; 10
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	aa ef       	ldi	r26, 0xFA	; 250
    1e2e:	b3 e4       	ldi	r27, 0x43	; 67
    1e30:	8d ab       	std	Y+53, r24	; 0x35
    1e32:	9e ab       	std	Y+54, r25	; 0x36
    1e34:	af ab       	std	Y+55, r26	; 0x37
    1e36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6d a9       	ldd	r22, Y+53	; 0x35
    1e3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	89 ab       	std	Y+49, r24	; 0x31
    1e52:	9a ab       	std	Y+50, r25	; 0x32
    1e54:	ab ab       	std	Y+51, r26	; 0x33
    1e56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e58:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <Open_Door+0x438>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <Open_Door+0x4b6>
	else if (__tmp > 65535)
    1e7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e80:	9c a9       	ldd	r25, Y+52	; 0x34
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <Open_Door+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6d a9       	ldd	r22, Y+53	; 0x35
    1e94:	7e a9       	ldd	r23, Y+54	; 0x36
    1e96:	8f a9       	ldd	r24, Y+55	; 0x37
    1e98:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <Open_Door+0x498>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9e a7       	std	Y+46, r25	; 0x2e
    1ec2:	8d a7       	std	Y+45, r24	; 0x2d
    1ec4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ec6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <Open_Door+0x486>
    1ecc:	9e a7       	std	Y+46, r25	; 0x2e
    1ece:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <Open_Door+0x47a>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <Open_Door+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9c a9       	ldd	r25, Y+52	; 0x34
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	98 ab       	std	Y+48, r25	; 0x30
    1ef6:	8f a7       	std	Y+47, r24	; 0x2f
    1ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efa:	98 a9       	ldd	r25, Y+48	; 0x30
    1efc:	9c a7       	std	Y+44, r25	; 0x2c
    1efe:	8b a7       	std	Y+43, r24	; 0x2b
    1f00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <Open_Door+0x4c2>
    1f08:	9c a7       	std	Y+44, r25	; 0x2c
    1f0a:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(500);
		    Open_Door();
    1f0c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    1f10:	ab c1       	rjmp	.+854    	; 0x2268 <Open_Door+0x826>
		}
		else if(try_agin==PASSWORD_MAX_trial)
    1f12:	80 91 3d 01 	lds	r24, 0x013D
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <Open_Door+0x4da>
    1f1a:	a6 c1       	rjmp	.+844    	; 0x2268 <Open_Door+0x826>
		{
			LCD_clearScreen();
    1f1c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
			LCD_displayString(" rejected ");
    1f20:	8a ea       	ldi	r24, 0xAA	; 170
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	aa ef       	ldi	r26, 0xFA	; 250
    1f2e:	b3 e4       	ldi	r27, 0x43	; 67
    1f30:	8f a3       	std	Y+39, r24	; 0x27
    1f32:	98 a7       	std	Y+40, r25	; 0x28
    1f34:	a9 a7       	std	Y+41, r26	; 0x29
    1f36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8b a3       	std	Y+35, r24	; 0x23
    1f52:	9c a3       	std	Y+36, r25	; 0x24
    1f54:	ad a3       	std	Y+37, r26	; 0x25
    1f56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <Open_Door+0x538>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <Open_Door+0x5b6>
	else if (__tmp > 65535)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <Open_Door+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6f a1       	ldd	r22, Y+39	; 0x27
    1f94:	78 a5       	ldd	r23, Y+40	; 0x28
    1f96:	89 a5       	ldd	r24, Y+41	; 0x29
    1f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <Open_Door+0x598>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 a3       	std	Y+32, r25	; 0x20
    1fc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <Open_Door+0x586>
    1fcc:	98 a3       	std	Y+32, r25	; 0x20
    1fce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <Open_Door+0x57a>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <Open_Door+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    2000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2002:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <Open_Door+0x5c2>
    2008:	9e 8f       	std	Y+30, r25	; 0x1e
    200a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			UART_sendByte(BUZZER_ON);
    200c:	87 e1       	ldi	r24, 0x17	; 23
    200e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
			seconds = 0;
    2012:	10 92 3c 01 	sts	0x013C, r1
			while (seconds < 60);
    2016:	80 91 3c 01 	lds	r24, 0x013C
    201a:	8c 33       	cpi	r24, 0x3C	; 60
    201c:	e0 f3       	brcs	.-8      	; 0x2016 <Open_Door+0x5d4>

			while (UART_recieveByte() != BUZZER_OFF){};
    201e:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2022:	88 31       	cpi	r24, 0x18	; 24
    2024:	e1 f7       	brne	.-8      	; 0x201e <Open_Door+0x5dc>
			LCD_clearScreen();
    2026:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
			try_agin = 0;
    202a:	10 92 3d 01 	sts	0x013D, r1

			LCD_clearScreen();
    202e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		    LCD_displayString("+ :Open Door");
    2032:	80 e6       	ldi	r24, 0x60	; 96
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		    LCD_moveCursor(1,0);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
		    LCD_displayString("- :Change Pass");
    2042:	8d e6       	ldi	r24, 0x6D	; 109
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>

		    key_num=KEYPAD_getPressedKey();
    204a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    204e:	fe 01       	movw	r30, r28
    2050:	eb 5a       	subi	r30, 0xAB	; 171
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 83       	st	Z, r24
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	aa ef       	ldi	r26, 0xFA	; 250
    205c:	b3 e4       	ldi	r27, 0x43	; 67
    205e:	89 8f       	std	Y+25, r24	; 0x19
    2060:	9a 8f       	std	Y+26, r25	; 0x1a
    2062:	ab 8f       	std	Y+27, r26	; 0x1b
    2064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	69 8d       	ldd	r22, Y+25	; 0x19
    2068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a ef       	ldi	r20, 0xFA	; 250
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8d 8b       	std	Y+21, r24	; 0x15
    2080:	9e 8b       	std	Y+22, r25	; 0x16
    2082:	af 8b       	std	Y+23, r26	; 0x17
    2084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <Open_Door+0x666>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <Open_Door+0x6e4>
	else if (__tmp > 65535)
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <Open_Door+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	69 8d       	ldd	r22, Y+25	; 0x19
    20c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 8b       	std	Y+20, r25	; 0x14
    20e6:	8b 8b       	std	Y+19, r24	; 0x13
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <Open_Door+0x6c6>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9a 8b       	std	Y+18, r25	; 0x12
    20f0:	89 8b       	std	Y+17, r24	; 0x11
    20f2:	89 89       	ldd	r24, Y+17	; 0x11
    20f4:	9a 89       	ldd	r25, Y+18	; 0x12
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <Open_Door+0x6b4>
    20fa:	9a 8b       	std	Y+18, r25	; 0x12
    20fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9c 8b       	std	Y+20, r25	; 0x14
    2106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <Open_Door+0x6a8>
    2110:	8d c0       	rjmp	.+282    	; 0x222c <Open_Door+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <Open_Door+0x6f0>
    2136:	98 8b       	std	Y+16, r25	; 0x10
    2138:	8f 87       	std	Y+15, r24	; 0x0f
    213a:	78 c0       	rjmp	.+240    	; 0x222c <Open_Door+0x7ea>
		    _delay_ms(500);

			while (key_num!='-' && key_num!='+')
			{
				key_num=KEYPAD_getPressedKey();
    213c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    2140:	fe 01       	movw	r30, r28
    2142:	eb 5a       	subi	r30, 0xAB	; 171
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 83       	st	Z, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	af ea       	ldi	r26, 0xAF	; 175
    214e:	b3 e4       	ldi	r27, 0x43	; 67
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <Open_Door+0x758>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <Open_Door+0x7d6>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <Open_Door+0x7c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <Open_Door+0x7b8>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <Open_Door+0x7a6>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <Open_Door+0x79a>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <Open_Door+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <Open_Door+0x7e2>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
		    LCD_displayString("- :Change Pass");

		    key_num=KEYPAD_getPressedKey();
		    _delay_ms(500);

			while (key_num!='-' && key_num!='+')
    222c:	fe 01       	movw	r30, r28
    222e:	eb 5a       	subi	r30, 0xAB	; 171
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	8d 32       	cpi	r24, 0x2D	; 45
    2236:	39 f0       	breq	.+14     	; 0x2246 <Open_Door+0x804>
    2238:	fe 01       	movw	r30, r28
    223a:	eb 5a       	subi	r30, 0xAB	; 171
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	8b 32       	cpi	r24, 0x2B	; 43
    2242:	09 f0       	breq	.+2      	; 0x2246 <Open_Door+0x804>
    2244:	7b cf       	rjmp	.-266    	; 0x213c <Open_Door+0x6fa>
			{
				key_num=KEYPAD_getPressedKey();
				_delay_ms(350);
			}
		    if(key_num == '+')
    2246:	fe 01       	movw	r30, r28
    2248:	eb 5a       	subi	r30, 0xAB	; 171
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	8b 32       	cpi	r24, 0x2B	; 43
    2250:	19 f4       	brne	.+6      	; 0x2258 <Open_Door+0x816>
			{
				Open_Door();
    2252:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <Open_Door+0x826>
			}
			else if(key_num == '-')
    2258:	fe 01       	movw	r30, r28
    225a:	eb 5a       	subi	r30, 0xAB	; 171
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	8d 32       	cpi	r24, 0x2D	; 45
    2262:	11 f4       	brne	.+4      	; 0x2268 <Open_Door+0x826>
			{
				Chanage_Password();
    2264:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
			}
		}
	}
}
    2268:	ca 5a       	subi	r28, 0xAA	; 170
    226a:	df 4f       	sbci	r29, 0xFF	; 255
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <Chanage_Password>:

void Chanage_Password(void)
{
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	c4 56       	subi	r28, 0x64	; 100
    228e:	d0 40       	sbci	r29, 0x00	; 0
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
	uint8 PASS;
	uint8 key_num;
	try_agin++;
    229a:	80 91 3d 01 	lds	r24, 0x013D
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	80 93 3d 01 	sts	0x013D, r24
	LCD_clearScreen();
    22a4:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	LCD_displayString( "plz enter Pass:");
    22a8:	80 ec       	ldi	r24, 0xC0	; 192
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	LCD_moveCursor(1, 0);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	Enter_password(password1);
    22b8:	89 e4       	ldi	r24, 0x49	; 73
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	0e 94 00 0b 	call	0x1600	; 0x1600 <Enter_password>
	UART_sendByte(ENTER_PASSWORD);
    22c0:	82 e1       	ldi	r24, 0x12	; 18
    22c2:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
	Send_password(password1);
    22c6:	89 e4       	ldi	r24, 0x49	; 73
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <Send_password>
	UART_sendByte(READY);
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
	PASS=UART_recieveByte();
    22d4:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    22d8:	fe 01       	movw	r30, r28
    22da:	ec 59       	subi	r30, 0x9C	; 156
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 83       	st	Z, r24

	if(PASS == MATCHED)
    22e0:	fe 01       	movw	r30, r28
    22e2:	ec 59       	subi	r30, 0x9C	; 156
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	09 f0       	breq	.+2      	; 0x22ee <Chanage_Password+0x6e>
    22ec:	31 c2       	rjmp	.+1122   	; 0x2750 <Chanage_Password+0x4d0>
	{
		Create_password();
    22ee:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Create_password>
		LCD_clearScreen();
    22f2:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		LCD_displayString("Password changed!");
    22f6:	84 e1       	ldi	r24, 0x14	; 20
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    22fe:	fe 01       	movw	r30, r28
    2300:	e1 5a       	subi	r30, 0xA1	; 161
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	aa ef       	ldi	r26, 0xFA	; 250
    230a:	b3 e4       	ldi	r27, 0x43	; 67
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	a2 83       	std	Z+2, r26	; 0x02
    2312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	8e 01       	movw	r16, r28
    2316:	05 5a       	subi	r16, 0xA5	; 165
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	fe 01       	movw	r30, r28
    231c:	e1 5a       	subi	r30, 0xA1	; 161
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	80 83       	st	Z, r24
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	a2 83       	std	Z+2, r26	; 0x02
    2340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2342:	fe 01       	movw	r30, r28
    2344:	e5 5a       	subi	r30, 0xA5	; 165
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	44 f4       	brge	.+16     	; 0x2370 <Chanage_Password+0xf0>
		__ticks = 1;
    2360:	fe 01       	movw	r30, r28
    2362:	e7 5a       	subi	r30, 0xA7	; 167
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	64 c0       	rjmp	.+200    	; 0x2438 <Chanage_Password+0x1b8>
	else if (__tmp > 65535)
    2370:	fe 01       	movw	r30, r28
    2372:	e5 5a       	subi	r30, 0xA5	; 165
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	0c f0       	brlt	.+2      	; 0x2390 <Chanage_Password+0x110>
    238e:	43 c0       	rjmp	.+134    	; 0x2416 <Chanage_Password+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2390:	fe 01       	movw	r30, r28
    2392:	e1 5a       	subi	r30, 0xA1	; 161
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8e 01       	movw	r16, r28
    23b0:	07 5a       	subi	r16, 0xA7	; 167
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	f8 01       	movw	r30, r16
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	1f c0       	rjmp	.+62     	; 0x2406 <Chanage_Password+0x186>
    23c8:	fe 01       	movw	r30, r28
    23ca:	e9 5a       	subi	r30, 0xA9	; 169
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	88 ec       	ldi	r24, 0xC8	; 200
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	fe 01       	movw	r30, r28
    23d8:	e9 5a       	subi	r30, 0xA9	; 169
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <Chanage_Password+0x160>
    23e4:	fe 01       	movw	r30, r28
    23e6:	e9 5a       	subi	r30, 0xA9	; 169
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	de 01       	movw	r26, r28
    23f0:	a7 5a       	subi	r26, 0xA7	; 167
    23f2:	bf 4f       	sbci	r27, 0xFF	; 255
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5a       	subi	r30, 0xA7	; 167
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	9c 93       	st	X, r25
    2404:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5a       	subi	r30, 0xA7	; 167
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	d1 f6       	brne	.-76     	; 0x23c8 <Chanage_Password+0x148>
    2414:	27 c0       	rjmp	.+78     	; 0x2464 <Chanage_Password+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	8e 01       	movw	r16, r28
    2418:	07 5a       	subi	r16, 0xA7	; 167
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	e5 5a       	subi	r30, 0xA5	; 165
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	f8 01       	movw	r30, r16
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	de 01       	movw	r26, r28
    243a:	ab 5a       	subi	r26, 0xAB	; 171
    243c:	bf 4f       	sbci	r27, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	e7 5a       	subi	r30, 0xA7	; 167
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	8d 93       	st	X+, r24
    244a:	9c 93       	st	X, r25
    244c:	fe 01       	movw	r30, r28
    244e:	eb 5a       	subi	r30, 0xAB	; 171
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <Chanage_Password+0x1d6>
    245a:	fe 01       	movw	r30, r28
    245c:	eb 5a       	subi	r30, 0xAB	; 171
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
		_delay_ms(500);
		try_agin = 0;
    2464:	10 92 3d 01 	sts	0x013D, r1
		LCD_clearScreen();
    2468:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
	    LCD_displayString("+ :Open Door");
    246c:	80 e6       	ldi	r24, 0x60	; 96
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
	    LCD_moveCursor(1,0);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	    LCD_displayString("- :Change Pass");
    247c:	8d e6       	ldi	r24, 0x6D	; 109
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>

	    key_num=KEYPAD_getPressedKey();
    2484:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    2488:	fe 01       	movw	r30, r28
    248a:	ed 59       	subi	r30, 0x9D	; 157
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 83       	st	Z, r24
    2490:	fe 01       	movw	r30, r28
    2492:	ef 5a       	subi	r30, 0xAF	; 175
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	aa ef       	ldi	r26, 0xFA	; 250
    249c:	b3 e4       	ldi	r27, 0x43	; 67
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	8e 01       	movw	r16, r28
    24a8:	03 5b       	subi	r16, 0xB3	; 179
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	ef 5a       	subi	r30, 0xAF	; 175
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e3 5b       	subi	r30, 0xB3	; 179
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	44 f4       	brge	.+16     	; 0x2502 <Chanage_Password+0x282>
		__ticks = 1;
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5b       	subi	r30, 0xB5	; 181
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	64 c0       	rjmp	.+200    	; 0x25ca <Chanage_Password+0x34a>
	else if (__tmp > 65535)
    2502:	fe 01       	movw	r30, r28
    2504:	e3 5b       	subi	r30, 0xB3	; 179
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	0c f0       	brlt	.+2      	; 0x2522 <Chanage_Password+0x2a2>
    2520:	43 c0       	rjmp	.+134    	; 0x25a8 <Chanage_Password+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	fe 01       	movw	r30, r28
    2524:	ef 5a       	subi	r30, 0xAF	; 175
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8e 01       	movw	r16, r28
    2542:	05 5b       	subi	r16, 0xB5	; 181
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	1f c0       	rjmp	.+62     	; 0x2598 <Chanage_Password+0x318>
    255a:	fe 01       	movw	r30, r28
    255c:	e7 5b       	subi	r30, 0xB7	; 183
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	fe 01       	movw	r30, r28
    256a:	e7 5b       	subi	r30, 0xB7	; 183
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <Chanage_Password+0x2f2>
    2576:	fe 01       	movw	r30, r28
    2578:	e7 5b       	subi	r30, 0xB7	; 183
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	de 01       	movw	r26, r28
    2582:	a5 5b       	subi	r26, 0xB5	; 181
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e5 5b       	subi	r30, 0xB5	; 181
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	fe 01       	movw	r30, r28
    259a:	e5 5b       	subi	r30, 0xB5	; 181
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	d1 f6       	brne	.-76     	; 0x255a <Chanage_Password+0x2da>
    25a6:	b4 c0       	rjmp	.+360    	; 0x2710 <Chanage_Password+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	8e 01       	movw	r16, r28
    25aa:	05 5b       	subi	r16, 0xB5	; 181
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	fe 01       	movw	r30, r28
    25b0:	e3 5b       	subi	r30, 0xB3	; 179
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	de 01       	movw	r26, r28
    25cc:	a9 5b       	subi	r26, 0xB9	; 185
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	e5 5b       	subi	r30, 0xB5	; 181
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	11 96       	adiw	r26, 0x01	; 1
    25dc:	9c 93       	st	X, r25
    25de:	8e 93       	st	-X, r24
    25e0:	fe 01       	movw	r30, r28
    25e2:	e9 5b       	subi	r30, 0xB9	; 185
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <Chanage_Password+0x36a>
    25ee:	fe 01       	movw	r30, r28
    25f0:	e9 5b       	subi	r30, 0xB9	; 185
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	8b c0       	rjmp	.+278    	; 0x2710 <Chanage_Password+0x490>
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
		{
			key_num=KEYPAD_getPressedKey();
    25fa:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 59       	subi	r30, 0x9D	; 157
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 83       	st	Z, r24
    2606:	fe 01       	movw	r30, r28
    2608:	ed 5b       	subi	r30, 0xBD	; 189
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	af ea       	ldi	r26, 0xAF	; 175
    2612:	b3 e4       	ldi	r27, 0x43	; 67
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	8e 01       	movw	r16, r28
    261e:	01 5c       	subi	r16, 0xC1	; 193
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	ed 5b       	subi	r30, 0xBD	; 189
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a ef       	ldi	r20, 0xFA	; 250
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264a:	fe 01       	movw	r30, r28
    264c:	ff 96       	adiw	r30, 0x3f	; 63
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <Chanage_Password+0x3f0>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9e af       	std	Y+62, r25	; 0x3e
    266c:	8d af       	std	Y+61, r24	; 0x3d
    266e:	46 c0       	rjmp	.+140    	; 0x26fc <Chanage_Password+0x47c>
	else if (__tmp > 65535)
    2670:	fe 01       	movw	r30, r28
    2672:	ff 96       	adiw	r30, 0x3f	; 63
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	64 f5       	brge	.+88     	; 0x26e4 <Chanage_Password+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	fe 01       	movw	r30, r28
    268e:	ed 5b       	subi	r30, 0xBD	; 189
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e af       	std	Y+62, r25	; 0x3e
    26b8:	8d af       	std	Y+61, r24	; 0x3d
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <Chanage_Password+0x45a>
    26bc:	88 ec       	ldi	r24, 0xC8	; 200
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c af       	std	Y+60, r25	; 0x3c
    26c2:	8b af       	std	Y+59, r24	; 0x3b
    26c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <Chanage_Password+0x448>
    26cc:	9c af       	std	Y+60, r25	; 0x3c
    26ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e af       	std	Y+62, r25	; 0x3e
    26d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d ad       	ldd	r24, Y+61	; 0x3d
    26dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <Chanage_Password+0x43c>
    26e2:	16 c0       	rjmp	.+44     	; 0x2710 <Chanage_Password+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	fe 01       	movw	r30, r28
    26e6:	ff 96       	adiw	r30, 0x3f	; 63
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e af       	std	Y+62, r25	; 0x3e
    26fa:	8d af       	std	Y+61, r24	; 0x3d
    26fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2700:	9a af       	std	Y+58, r25	; 0x3a
    2702:	89 af       	std	Y+57, r24	; 0x39
    2704:	89 ad       	ldd	r24, Y+57	; 0x39
    2706:	9a ad       	ldd	r25, Y+58	; 0x3a
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <Chanage_Password+0x488>
    270c:	9a af       	std	Y+58, r25	; 0x3a
    270e:	89 af       	std	Y+57, r24	; 0x39
	    LCD_displayString("- :Change Pass");

	    key_num=KEYPAD_getPressedKey();
	    _delay_ms(500);

		while (key_num!='-' && key_num!='+')
    2710:	fe 01       	movw	r30, r28
    2712:	ed 59       	subi	r30, 0x9D	; 157
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	8d 32       	cpi	r24, 0x2D	; 45
    271a:	39 f0       	breq	.+14     	; 0x272a <Chanage_Password+0x4aa>
    271c:	fe 01       	movw	r30, r28
    271e:	ed 59       	subi	r30, 0x9D	; 157
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	8b 32       	cpi	r24, 0x2B	; 43
    2726:	09 f0       	breq	.+2      	; 0x272a <Chanage_Password+0x4aa>
    2728:	68 cf       	rjmp	.-304    	; 0x25fa <Chanage_Password+0x37a>
		{
			key_num=KEYPAD_getPressedKey();
		    _delay_ms(350);
		}
		if(key_num == '+')
    272a:	fe 01       	movw	r30, r28
    272c:	ed 59       	subi	r30, 0x9D	; 157
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	8b 32       	cpi	r24, 0x2B	; 43
    2734:	19 f4       	brne	.+6      	; 0x273c <Chanage_Password+0x4bc>
		{
			Open_Door();
    2736:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    273a:	35 c2       	rjmp	.+1130   	; 0x2ba6 <Chanage_Password+0x926>
		}
		else if(key_num == '-')
    273c:	fe 01       	movw	r30, r28
    273e:	ed 59       	subi	r30, 0x9D	; 157
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	8d 32       	cpi	r24, 0x2D	; 45
    2746:	09 f0       	breq	.+2      	; 0x274a <Chanage_Password+0x4ca>
    2748:	2e c2       	rjmp	.+1116   	; 0x2ba6 <Chanage_Password+0x926>
		{
			Chanage_Password();
    274a:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
    274e:	2b c2       	rjmp	.+1110   	; 0x2ba6 <Chanage_Password+0x926>
		}
	}
	else
	{
		if(try_agin!=PASSWORD_MAX_trial)
    2750:	80 91 3d 01 	lds	r24, 0x013D
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	09 f4       	brne	.+2      	; 0x275a <Chanage_Password+0x4da>
    2758:	7b c0       	rjmp	.+246    	; 0x2850 <Chanage_Password+0x5d0>
		{
		    LCD_clearScreen();
    275a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		    LCD_displayString("UNMATCHED");
    275e:	8a e0       	ldi	r24, 0x0A	; 10
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	aa ef       	ldi	r26, 0xFA	; 250
    276c:	b3 e4       	ldi	r27, 0x43	; 67
    276e:	8d ab       	std	Y+53, r24	; 0x35
    2770:	9e ab       	std	Y+54, r25	; 0x36
    2772:	af ab       	std	Y+55, r26	; 0x37
    2774:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	6d a9       	ldd	r22, Y+53	; 0x35
    2778:	7e a9       	ldd	r23, Y+54	; 0x36
    277a:	8f a9       	ldd	r24, Y+55	; 0x37
    277c:	98 ad       	ldd	r25, Y+56	; 0x38
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a ef       	ldi	r20, 0xFA	; 250
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	89 ab       	std	Y+49, r24	; 0x31
    2790:	9a ab       	std	Y+50, r25	; 0x32
    2792:	ab ab       	std	Y+51, r26	; 0x33
    2794:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2796:	69 a9       	ldd	r22, Y+49	; 0x31
    2798:	7a a9       	ldd	r23, Y+50	; 0x32
    279a:	8b a9       	ldd	r24, Y+51	; 0x33
    279c:	9c a9       	ldd	r25, Y+52	; 0x34
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <Chanage_Password+0x538>
		__ticks = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
    27b6:	3f c0       	rjmp	.+126    	; 0x2836 <Chanage_Password+0x5b6>
	else if (__tmp > 65535)
    27b8:	69 a9       	ldd	r22, Y+49	; 0x31
    27ba:	7a a9       	ldd	r23, Y+50	; 0x32
    27bc:	8b a9       	ldd	r24, Y+51	; 0x33
    27be:	9c a9       	ldd	r25, Y+52	; 0x34
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	4c f5       	brge	.+82     	; 0x2822 <Chanage_Password+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	6d a9       	ldd	r22, Y+53	; 0x35
    27d2:	7e a9       	ldd	r23, Y+54	; 0x36
    27d4:	8f a9       	ldd	r24, Y+55	; 0x37
    27d6:	98 ad       	ldd	r25, Y+56	; 0x38
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	98 ab       	std	Y+48, r25	; 0x30
    27f6:	8f a7       	std	Y+47, r24	; 0x2f
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <Chanage_Password+0x598>
    27fa:	88 ec       	ldi	r24, 0xC8	; 200
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9e a7       	std	Y+46, r25	; 0x2e
    2800:	8d a7       	std	Y+45, r24	; 0x2d
    2802:	8d a5       	ldd	r24, Y+45	; 0x2d
    2804:	9e a5       	ldd	r25, Y+46	; 0x2e
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <Chanage_Password+0x586>
    280a:	9e a7       	std	Y+46, r25	; 0x2e
    280c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2810:	98 a9       	ldd	r25, Y+48	; 0x30
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	98 ab       	std	Y+48, r25	; 0x30
    2816:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	8f a5       	ldd	r24, Y+47	; 0x2f
    281a:	98 a9       	ldd	r25, Y+48	; 0x30
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <Chanage_Password+0x57a>
    2820:	14 c0       	rjmp	.+40     	; 0x284a <Chanage_Password+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	69 a9       	ldd	r22, Y+49	; 0x31
    2824:	7a a9       	ldd	r23, Y+50	; 0x32
    2826:	8b a9       	ldd	r24, Y+51	; 0x33
    2828:	9c a9       	ldd	r25, Y+52	; 0x34
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	98 ab       	std	Y+48, r25	; 0x30
    2834:	8f a7       	std	Y+47, r24	; 0x2f
    2836:	8f a5       	ldd	r24, Y+47	; 0x2f
    2838:	98 a9       	ldd	r25, Y+48	; 0x30
    283a:	9c a7       	std	Y+44, r25	; 0x2c
    283c:	8b a7       	std	Y+43, r24	; 0x2b
    283e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2840:	9c a5       	ldd	r25, Y+44	; 0x2c
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <Chanage_Password+0x5c2>
    2846:	9c a7       	std	Y+44, r25	; 0x2c
    2848:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(500);
		    Chanage_Password();
    284a:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
    284e:	ab c1       	rjmp	.+854    	; 0x2ba6 <Chanage_Password+0x926>
		}
		else if(try_agin==PASSWORD_MAX_trial)
    2850:	80 91 3d 01 	lds	r24, 0x013D
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	09 f0       	breq	.+2      	; 0x285a <Chanage_Password+0x5da>
    2858:	a6 c1       	rjmp	.+844    	; 0x2ba6 <Chanage_Password+0x926>
		{
			LCD_clearScreen();
    285a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
			LCD_displayString(" rejected ");
    285e:	8a ea       	ldi	r24, 0xAA	; 170
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	aa ef       	ldi	r26, 0xFA	; 250
    286c:	b3 e4       	ldi	r27, 0x43	; 67
    286e:	8f a3       	std	Y+39, r24	; 0x27
    2870:	98 a7       	std	Y+40, r25	; 0x28
    2872:	a9 a7       	std	Y+41, r26	; 0x29
    2874:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	6f a1       	ldd	r22, Y+39	; 0x27
    2878:	78 a5       	ldd	r23, Y+40	; 0x28
    287a:	89 a5       	ldd	r24, Y+41	; 0x29
    287c:	9a a5       	ldd	r25, Y+42	; 0x2a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a ef       	ldi	r20, 0xFA	; 250
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	8b a3       	std	Y+35, r24	; 0x23
    2890:	9c a3       	std	Y+36, r25	; 0x24
    2892:	ad a3       	std	Y+37, r26	; 0x25
    2894:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2896:	6b a1       	ldd	r22, Y+35	; 0x23
    2898:	7c a1       	ldd	r23, Y+36	; 0x24
    289a:	8d a1       	ldd	r24, Y+37	; 0x25
    289c:	9e a1       	ldd	r25, Y+38	; 0x26
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <Chanage_Password+0x638>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9a a3       	std	Y+34, r25	; 0x22
    28b4:	89 a3       	std	Y+33, r24	; 0x21
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <Chanage_Password+0x6b6>
	else if (__tmp > 65535)
    28b8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ba:	7c a1       	ldd	r23, Y+36	; 0x24
    28bc:	8d a1       	ldd	r24, Y+37	; 0x25
    28be:	9e a1       	ldd	r25, Y+38	; 0x26
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	4c f5       	brge	.+82     	; 0x2922 <Chanage_Password+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d0:	6f a1       	ldd	r22, Y+39	; 0x27
    28d2:	78 a5       	ldd	r23, Y+40	; 0x28
    28d4:	89 a5       	ldd	r24, Y+41	; 0x29
    28d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9a a3       	std	Y+34, r25	; 0x22
    28f6:	89 a3       	std	Y+33, r24	; 0x21
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <Chanage_Password+0x698>
    28fa:	88 ec       	ldi	r24, 0xC8	; 200
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	98 a3       	std	Y+32, r25	; 0x20
    2900:	8f 8f       	std	Y+31, r24	; 0x1f
    2902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2904:	98 a1       	ldd	r25, Y+32	; 0x20
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <Chanage_Password+0x686>
    290a:	98 a3       	std	Y+32, r25	; 0x20
    290c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290e:	89 a1       	ldd	r24, Y+33	; 0x21
    2910:	9a a1       	ldd	r25, Y+34	; 0x22
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	9a a3       	std	Y+34, r25	; 0x22
    2916:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	89 a1       	ldd	r24, Y+33	; 0x21
    291a:	9a a1       	ldd	r25, Y+34	; 0x22
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	69 f7       	brne	.-38     	; 0x28fa <Chanage_Password+0x67a>
    2920:	14 c0       	rjmp	.+40     	; 0x294a <Chanage_Password+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	9a a1       	ldd	r25, Y+34	; 0x22
    293a:	9e 8f       	std	Y+30, r25	; 0x1e
    293c:	8d 8f       	std	Y+29, r24	; 0x1d
    293e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <Chanage_Password+0x6c2>
    2946:	9e 8f       	std	Y+30, r25	; 0x1e
    2948:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			UART_sendByte(BUZZER_ON);
    294a:	87 e1       	ldi	r24, 0x17	; 23
    294c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
			seconds = 0;
    2950:	10 92 3c 01 	sts	0x013C, r1
			while (seconds < 60);
    2954:	80 91 3c 01 	lds	r24, 0x013C
    2958:	8c 33       	cpi	r24, 0x3C	; 60
    295a:	e0 f3       	brcs	.-8      	; 0x2954 <Chanage_Password+0x6d4>
			while (UART_recieveByte() != BUZZER_OFF){};
    295c:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2960:	88 31       	cpi	r24, 0x18	; 24
    2962:	e1 f7       	brne	.-8      	; 0x295c <Chanage_Password+0x6dc>
			LCD_clearScreen();
    2964:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
			try_agin = 0;
    2968:	10 92 3d 01 	sts	0x013D, r1

			LCD_clearScreen();
    296c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_clearScreen>
		    LCD_displayString("+ :Open Door");
    2970:	80 e6       	ldi	r24, 0x60	; 96
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
		    LCD_moveCursor(1,0);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
		    LCD_displayString("- :Change Pass");
    2980:	8d e6       	ldi	r24, 0x6D	; 109
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>

		    key_num=KEYPAD_getPressedKey();
    2988:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    298c:	fe 01       	movw	r30, r28
    298e:	ed 59       	subi	r30, 0x9D	; 157
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 83       	st	Z, r24
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	aa ef       	ldi	r26, 0xFA	; 250
    299a:	b3 e4       	ldi	r27, 0x43	; 67
    299c:	89 8f       	std	Y+25, r24	; 0x19
    299e:	9a 8f       	std	Y+26, r25	; 0x1a
    29a0:	ab 8f       	std	Y+27, r26	; 0x1b
    29a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	69 8d       	ldd	r22, Y+25	; 0x19
    29a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8d 8b       	std	Y+21, r24	; 0x15
    29be:	9e 8b       	std	Y+22, r25	; 0x16
    29c0:	af 8b       	std	Y+23, r26	; 0x17
    29c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c4:	6d 89       	ldd	r22, Y+21	; 0x15
    29c6:	7e 89       	ldd	r23, Y+22	; 0x16
    29c8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ca:	98 8d       	ldd	r25, Y+24	; 0x18
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <Chanage_Password+0x766>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <Chanage_Password+0x7e4>
	else if (__tmp > 65535)
    29e6:	6d 89       	ldd	r22, Y+21	; 0x15
    29e8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <Chanage_Password+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <Chanage_Password+0x7c6>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9a 8b       	std	Y+18, r25	; 0x12
    2a2e:	89 8b       	std	Y+17, r24	; 0x11
    2a30:	89 89       	ldd	r24, Y+17	; 0x11
    2a32:	9a 89       	ldd	r25, Y+18	; 0x12
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <Chanage_Password+0x7b4>
    2a38:	9a 8b       	std	Y+18, r25	; 0x12
    2a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <Chanage_Password+0x7a8>
    2a4e:	8d c0       	rjmp	.+282    	; 0x2b6a <Chanage_Password+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	98 8b       	std	Y+16, r25	; 0x10
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f
    2a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6e:	98 89       	ldd	r25, Y+16	; 0x10
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <Chanage_Password+0x7f0>
    2a74:	98 8b       	std	Y+16, r25	; 0x10
    2a76:	8f 87       	std	Y+15, r24	; 0x0f
    2a78:	78 c0       	rjmp	.+240    	; 0x2b6a <Chanage_Password+0x8ea>
		    _delay_ms(500);

			while (key_num!='-' && key_num!='+')
			{
				key_num=KEYPAD_getPressedKey();
    2a7a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <KEYPAD_getPressedKey>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ed 59       	subi	r30, 0x9D	; 157
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 83       	st	Z, r24
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	af ea       	ldi	r26, 0xAF	; 175
    2a8c:	b3 e4       	ldi	r27, 0x43	; 67
    2a8e:	8b 87       	std	Y+11, r24	; 0x0b
    2a90:	9c 87       	std	Y+12, r25	; 0x0c
    2a92:	ad 87       	std	Y+13, r26	; 0x0d
    2a94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8f 83       	std	Y+7, r24	; 0x07
    2ab0:	98 87       	std	Y+8, r25	; 0x08
    2ab2:	a9 87       	std	Y+9, r26	; 0x09
    2ab4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <Chanage_Password+0x858>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <Chanage_Password+0x8d6>
	else if (__tmp > 65535)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <Chanage_Password+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <Chanage_Password+0x8b8>
    2b1a:	88 ec       	ldi	r24, 0xC8	; 200
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <Chanage_Password+0x8a6>
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <Chanage_Password+0x89a>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <Chanage_Password+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	9a 81       	ldd	r25, Y+2	; 0x02
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <Chanage_Password+0x8e2>
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
		    LCD_displayString("- :Change Pass");

		    key_num=KEYPAD_getPressedKey();
		    _delay_ms(500);

			while (key_num!='-' && key_num!='+')
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ed 59       	subi	r30, 0x9D	; 157
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	8d 32       	cpi	r24, 0x2D	; 45
    2b74:	39 f0       	breq	.+14     	; 0x2b84 <Chanage_Password+0x904>
    2b76:	fe 01       	movw	r30, r28
    2b78:	ed 59       	subi	r30, 0x9D	; 157
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8b 32       	cpi	r24, 0x2B	; 43
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <Chanage_Password+0x904>
    2b82:	7b cf       	rjmp	.-266    	; 0x2a7a <Chanage_Password+0x7fa>
			{
				key_num=KEYPAD_getPressedKey();
			    _delay_ms(350);
			}

		    if(key_num == '+')
    2b84:	fe 01       	movw	r30, r28
    2b86:	ed 59       	subi	r30, 0x9D	; 157
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8b 32       	cpi	r24, 0x2B	; 43
    2b8e:	19 f4       	brne	.+6      	; 0x2b96 <Chanage_Password+0x916>
			{
				Open_Door();
    2b90:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Open_Door>
    2b94:	08 c0       	rjmp	.+16     	; 0x2ba6 <Chanage_Password+0x926>
			}
			else if(key_num == '-')
    2b96:	fe 01       	movw	r30, r28
    2b98:	ed 59       	subi	r30, 0x9D	; 157
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8d 32       	cpi	r24, 0x2D	; 45
    2ba0:	11 f4       	brne	.+4      	; 0x2ba6 <Chanage_Password+0x926>
			{
				Chanage_Password();
    2ba2:	0e 94 40 11 	call	0x2280	; 0x2280 <Chanage_Password>
			}
		}
	}
}
    2ba6:	cc 59       	subi	r28, 0x9C	; 156
    2ba8:	df 4f       	sbci	r29, 0xFF	; 255
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	08 95       	ret

00002bbe <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	60 97       	sbiw	r28, 0x10	; 16
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	62 e0       	ldi	r22, 0x02	; 2
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	63 e0       	ldi	r22, 0x03	; 3
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	65 e0       	ldi	r22, 0x05	; 5
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	66 e0       	ldi	r22, 0x06	; 6
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	67 e0       	ldi	r22, 0x07	; 7
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2c22:	1f 86       	std	Y+15, r1	; 0x0f
    2c24:	ab c0       	rjmp	.+342    	; 0x2d7c <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2c3a:	18 8a       	std	Y+16, r1	; 0x10
    2c3c:	22 c0       	rjmp	.+68     	; 0x2c82 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2c3e:	88 89       	ldd	r24, Y+16	; 0x10
    2c40:	98 2f       	mov	r25, r24
    2c42:	9c 5f       	subi	r25, 0xFC	; 252
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	69 2f       	mov	r22, r25
    2c48:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2c4c:	88 23       	and	r24, r24
    2c4e:	b1 f4       	brne	.+44     	; 0x2c7c <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	98 2f       	mov	r25, r24
    2c60:	88 89       	ldd	r24, Y+16	; 0x10
    2c62:	89 0f       	add	r24, r25
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2c6a:	60 96       	adiw	r28, 0x10	; 16
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2c7c:	88 89       	ldd	r24, Y+16	; 0x10
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	88 8b       	std	Y+16, r24	; 0x10
    2c82:	88 89       	ldd	r24, Y+16	; 0x10
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	d8 f2       	brcs	.-74     	; 0x2c3e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 ea       	ldi	r26, 0xA0	; 160
    2c98:	b0 e4       	ldi	r27, 0x40	; 64
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
    2c9c:	9c 87       	std	Y+12, r25	; 0x0c
    2c9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8f 83       	std	Y+7, r24	; 0x07
    2cbc:	98 87       	std	Y+8, r25	; 0x08
    2cbe:	a9 87       	std	Y+9, r26	; 0x09
    2cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <KEYPAD_getPressedKey+0x186>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <KEYPAD_getPressedKey+0x174>
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <KEYPAD_getPressedKey+0x168>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <KEYPAD_getPressedKey+0x1b0>
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	8f 87       	std	Y+15, r24	; 0x0f
    2d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d7e:	84 30       	cpi	r24, 0x04	; 4
    2d80:	08 f4       	brcc	.+2      	; 0x2d84 <KEYPAD_getPressedKey+0x1c6>
    2d82:	51 cf       	rjmp	.-350    	; 0x2c26 <KEYPAD_getPressedKey+0x68>
    2d84:	4e cf       	rjmp	.-356    	; 0x2c22 <KEYPAD_getPressedKey+0x64>

00002d86 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2d94:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	3c 83       	std	Y+4, r19	; 0x04
    2d9e:	2b 83       	std	Y+3, r18	; 0x03
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	88 30       	cpi	r24, 0x08	; 8
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <KEYPAD_4x4_adjustKeyNumber+0x26>
    2daa:	70 c0       	rjmp	.+224    	; 0x2e8c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2dac:	2b 81       	ldd	r18, Y+3	; 0x03
    2dae:	3c 81       	ldd	r19, Y+4	; 0x04
    2db0:	29 30       	cpi	r18, 0x09	; 9
    2db2:	31 05       	cpc	r19, r1
    2db4:	5c f5       	brge	.+86     	; 0x2e0c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dba:	84 30       	cpi	r24, 0x04	; 4
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2dc0:	59 c0       	rjmp	.+178    	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc6:	25 30       	cpi	r18, 0x05	; 5
    2dc8:	31 05       	cpc	r19, r1
    2dca:	9c f4       	brge	.+38     	; 0x2df2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2dd6:	48 c0       	rjmp	.+144    	; 0x2e68 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dda:	3c 81       	ldd	r19, Y+4	; 0x04
    2ddc:	23 30       	cpi	r18, 0x03	; 3
    2dde:	31 05       	cpc	r19, r1
    2de0:	0c f0       	brlt	.+2      	; 0x2de4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2de2:	45 c0       	rjmp	.+138    	; 0x2e6e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	91 05       	cpc	r25, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2dee:	39 c0       	rjmp	.+114    	; 0x2e62 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2df0:	67 c0       	rjmp	.+206    	; 0x2ec0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2df2:	2b 81       	ldd	r18, Y+3	; 0x03
    2df4:	3c 81       	ldd	r19, Y+4	; 0x04
    2df6:	26 30       	cpi	r18, 0x06	; 6
    2df8:	31 05       	cpc	r19, r1
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <KEYPAD_4x4_adjustKeyNumber+0x78>
    2dfc:	41 c0       	rjmp	.+130    	; 0x2e80 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	87 30       	cpi	r24, 0x07	; 7
    2e04:	91 05       	cpc	r25, r1
    2e06:	0c f0       	brlt	.+2      	; 0x2e0a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2e08:	3e c0       	rjmp	.+124    	; 0x2e86 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2e0a:	37 c0       	rjmp	.+110    	; 0x2e7a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e10:	2c 30       	cpi	r18, 0x0C	; 12
    2e12:	31 05       	cpc	r19, r1
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2e16:	46 c0       	rjmp	.+140    	; 0x2ea4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1c:	8d 30       	cpi	r24, 0x0D	; 13
    2e1e:	91 05       	cpc	r25, r1
    2e20:	5c f4       	brge	.+22     	; 0x2e38 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2e22:	2b 81       	ldd	r18, Y+3	; 0x03
    2e24:	3c 81       	ldd	r19, Y+4	; 0x04
    2e26:	2a 30       	cpi	r18, 0x0A	; 10
    2e28:	31 05       	cpc	r19, r1
    2e2a:	b1 f1       	breq	.+108    	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	8b 30       	cpi	r24, 0x0B	; 11
    2e32:	91 05       	cpc	r25, r1
    2e34:	a4 f5       	brge	.+104    	; 0x2e9e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2e36:	2d c0       	rjmp	.+90     	; 0x2e92 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2e38:	2b 81       	ldd	r18, Y+3	; 0x03
    2e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e3c:	2e 30       	cpi	r18, 0x0E	; 14
    2e3e:	31 05       	cpc	r19, r1
    2e40:	b9 f1       	breq	.+110    	; 0x2eb0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	8e 30       	cpi	r24, 0x0E	; 14
    2e48:	91 05       	cpc	r25, r1
    2e4a:	7c f1       	brlt	.+94     	; 0x2eaa <KEYPAD_4x4_adjustKeyNumber+0x124>
    2e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e50:	2f 30       	cpi	r18, 0x0F	; 15
    2e52:	31 05       	cpc	r19, r1
    2e54:	79 f1       	breq	.+94     	; 0x2eb4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	80 31       	cpi	r24, 0x10	; 16
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	69 f1       	breq	.+90     	; 0x2eba <KEYPAD_4x4_adjustKeyNumber+0x134>
    2e60:	2f c0       	rjmp	.+94     	; 0x2ec0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2e62:	87 e0       	ldi	r24, 0x07	; 7
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	2e c0       	rjmp	.+92     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2e68:	88 e0       	ldi	r24, 0x08	; 8
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	2b c0       	rjmp	.+86     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2e6e:	89 e0       	ldi	r24, 0x09	; 9
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	28 c0       	rjmp	.+80     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2e74:	85 e2       	ldi	r24, 0x25	; 37
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	25 c0       	rjmp	.+74     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2e7a:	84 e0       	ldi	r24, 0x04	; 4
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	22 c0       	rjmp	.+68     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2e80:	85 e0       	ldi	r24, 0x05	; 5
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	1f c0       	rjmp	.+62     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2e86:	86 e0       	ldi	r24, 0x06	; 6
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	1c c0       	rjmp	.+56     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2e8c:	8a e2       	ldi	r24, 0x2A	; 42
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	19 c0       	rjmp	.+50     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	16 c0       	rjmp	.+44     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	13 c0       	rjmp	.+38     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2e9e:	83 e0       	ldi	r24, 0x03	; 3
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	10 c0       	rjmp	.+32     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2ea4:	8d e2       	ldi	r24, 0x2D	; 45
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	0d c0       	rjmp	.+26     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2eaa:	8d e0       	ldi	r24, 0x0D	; 13
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	0a c0       	rjmp	.+20     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2eb0:	19 82       	std	Y+1, r1	; 0x01
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2eb4:	8d e3       	ldi	r24, 0x3D	; 61
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	05 c0       	rjmp	.+10     	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2eba:	8b e2       	ldi	r24, 0x2B	; 43
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	2e 97       	sbiw	r28, 0x0e	; 14
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	41 e0       	ldi	r20, 0x01	; 1
    2eee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	61 e0       	ldi	r22, 0x01	; 1
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 ea       	ldi	r26, 0xA0	; 160
    2f02:	b1 e4       	ldi	r27, 0x41	; 65
    2f04:	8b 87       	std	Y+11, r24	; 0x0b
    2f06:	9c 87       	std	Y+12, r25	; 0x0c
    2f08:	ad 87       	std	Y+13, r26	; 0x0d
    2f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a ef       	ldi	r20, 0xFA	; 250
    2f1a:	54 e4       	ldi	r21, 0x44	; 68
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	8f 83       	std	Y+7, r24	; 0x07
    2f26:	98 87       	std	Y+8, r25	; 0x08
    2f28:	a9 87       	std	Y+9, r26	; 0x09
    2f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <LCD_init+0x7a>
		__ticks = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	3f c0       	rjmp	.+126    	; 0x2fcc <LCD_init+0xf8>
	else if (__tmp > 65535)
    2f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f50:	78 85       	ldd	r23, Y+8	; 0x08
    2f52:	89 85       	ldd	r24, Y+9	; 0x09
    2f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	4c f5       	brge	.+82     	; 0x2fb8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <LCD_init+0xda>
    2f90:	88 ec       	ldi	r24, 0xC8	; 200
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <LCD_init+0xc8>
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <LCD_init+0xbc>
    2fb6:	14 c0       	rjmp	.+40     	; 0x2fe0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fba:	78 85       	ldd	r23, Y+8	; 0x08
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9e 83       	std	Y+6, r25	; 0x06
    2fca:	8d 83       	std	Y+5, r24	; 0x05
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_init+0x104>
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	6f ef       	ldi	r22, 0xFF	; 255
    2fe4:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2fe8:	88 e3       	ldi	r24, 0x38	; 56
    2fea:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2fee:	8c e0       	ldi	r24, 0x0C	; 12
    2ff0:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_sendCommand>
}
    2ffa:	2e 96       	adiw	r28, 0x0e	; 14
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	e9 97       	sbiw	r28, 0x39	; 57
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e8       	ldi	r26, 0x80	; 128
    3032:	bf e3       	ldi	r27, 0x3F	; 63
    3034:	8d ab       	std	Y+53, r24	; 0x35
    3036:	9e ab       	std	Y+54, r25	; 0x36
    3038:	af ab       	std	Y+55, r26	; 0x37
    303a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6d a9       	ldd	r22, Y+53	; 0x35
    303e:	7e a9       	ldd	r23, Y+54	; 0x36
    3040:	8f a9       	ldd	r24, Y+55	; 0x37
    3042:	98 ad       	ldd	r25, Y+56	; 0x38
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	54 e4       	ldi	r21, 0x44	; 68
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	89 ab       	std	Y+49, r24	; 0x31
    3056:	9a ab       	std	Y+50, r25	; 0x32
    3058:	ab ab       	std	Y+51, r26	; 0x33
    305a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    305c:	69 a9       	ldd	r22, Y+49	; 0x31
    305e:	7a a9       	ldd	r23, Y+50	; 0x32
    3060:	8b a9       	ldd	r24, Y+51	; 0x33
    3062:	9c a9       	ldd	r25, Y+52	; 0x34
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <LCD_sendCommand+0x72>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	98 ab       	std	Y+48, r25	; 0x30
    307a:	8f a7       	std	Y+47, r24	; 0x2f
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    307e:	69 a9       	ldd	r22, Y+49	; 0x31
    3080:	7a a9       	ldd	r23, Y+50	; 0x32
    3082:	8b a9       	ldd	r24, Y+51	; 0x33
    3084:	9c a9       	ldd	r25, Y+52	; 0x34
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6d a9       	ldd	r22, Y+53	; 0x35
    3098:	7e a9       	ldd	r23, Y+54	; 0x36
    309a:	8f a9       	ldd	r24, Y+55	; 0x37
    309c:	98 ad       	ldd	r25, Y+56	; 0x38
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	98 ab       	std	Y+48, r25	; 0x30
    30bc:	8f a7       	std	Y+47, r24	; 0x2f
    30be:	0f c0       	rjmp	.+30     	; 0x30de <LCD_sendCommand+0xd2>
    30c0:	88 ec       	ldi	r24, 0xC8	; 200
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9e a7       	std	Y+46, r25	; 0x2e
    30c6:	8d a7       	std	Y+45, r24	; 0x2d
    30c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <LCD_sendCommand+0xc0>
    30d0:	9e a7       	std	Y+46, r25	; 0x2e
    30d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d6:	98 a9       	ldd	r25, Y+48	; 0x30
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	98 ab       	std	Y+48, r25	; 0x30
    30dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e0:	98 a9       	ldd	r25, Y+48	; 0x30
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <LCD_sendCommand+0xb4>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	69 a9       	ldd	r22, Y+49	; 0x31
    30ea:	7a a9       	ldd	r23, Y+50	; 0x32
    30ec:	8b a9       	ldd	r24, Y+51	; 0x33
    30ee:	9c a9       	ldd	r25, Y+52	; 0x34
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	98 ab       	std	Y+48, r25	; 0x30
    30fa:	8f a7       	std	Y+47, r24	; 0x2f
    30fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3100:	9c a7       	std	Y+44, r25	; 0x2c
    3102:	8b a7       	std	Y+43, r24	; 0x2b
    3104:	8b a5       	ldd	r24, Y+43	; 0x2b
    3106:	9c a5       	ldd	r25, Y+44	; 0x2c
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <LCD_sendCommand+0xfc>
    310c:	9c a7       	std	Y+44, r25	; 0x2c
    310e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	61 e0       	ldi	r22, 0x01	; 1
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	a0 e8       	ldi	r26, 0x80	; 128
    3120:	bf e3       	ldi	r27, 0x3F	; 63
    3122:	8f a3       	std	Y+39, r24	; 0x27
    3124:	98 a7       	std	Y+40, r25	; 0x28
    3126:	a9 a7       	std	Y+41, r26	; 0x29
    3128:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312a:	6f a1       	ldd	r22, Y+39	; 0x27
    312c:	78 a5       	ldd	r23, Y+40	; 0x28
    312e:	89 a5       	ldd	r24, Y+41	; 0x29
    3130:	9a a5       	ldd	r25, Y+42	; 0x2a
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	4a ef       	ldi	r20, 0xFA	; 250
    3138:	54 e4       	ldi	r21, 0x44	; 68
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8b a3       	std	Y+35, r24	; 0x23
    3144:	9c a3       	std	Y+36, r25	; 0x24
    3146:	ad a3       	std	Y+37, r26	; 0x25
    3148:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    314a:	6b a1       	ldd	r22, Y+35	; 0x23
    314c:	7c a1       	ldd	r23, Y+36	; 0x24
    314e:	8d a1       	ldd	r24, Y+37	; 0x25
    3150:	9e a1       	ldd	r25, Y+38	; 0x26
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	2c f4       	brge	.+10     	; 0x316c <LCD_sendCommand+0x160>
		__ticks = 1;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	9a a3       	std	Y+34, r25	; 0x22
    3168:	89 a3       	std	Y+33, r24	; 0x21
    316a:	3f c0       	rjmp	.+126    	; 0x31ea <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    316c:	6b a1       	ldd	r22, Y+35	; 0x23
    316e:	7c a1       	ldd	r23, Y+36	; 0x24
    3170:	8d a1       	ldd	r24, Y+37	; 0x25
    3172:	9e a1       	ldd	r25, Y+38	; 0x26
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	4c f5       	brge	.+82     	; 0x31d6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3184:	6f a1       	ldd	r22, Y+39	; 0x27
    3186:	78 a5       	ldd	r23, Y+40	; 0x28
    3188:	89 a5       	ldd	r24, Y+41	; 0x29
    318a:	9a a5       	ldd	r25, Y+42	; 0x2a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <LCD_sendCommand+0x1c0>
    31ae:	88 ec       	ldi	r24, 0xC8	; 200
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	98 a3       	std	Y+32, r25	; 0x20
    31b4:	8f 8f       	std	Y+31, r24	; 0x1f
    31b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b8:	98 a1       	ldd	r25, Y+32	; 0x20
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <LCD_sendCommand+0x1ae>
    31be:	98 a3       	std	Y+32, r25	; 0x20
    31c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c2:	89 a1       	ldd	r24, Y+33	; 0x21
    31c4:	9a a1       	ldd	r25, Y+34	; 0x22
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	9a a3       	std	Y+34, r25	; 0x22
    31ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	89 a1       	ldd	r24, Y+33	; 0x21
    31ce:	9a a1       	ldd	r25, Y+34	; 0x22
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	69 f7       	brne	.-38     	; 0x31ae <LCD_sendCommand+0x1a2>
    31d4:	14 c0       	rjmp	.+40     	; 0x31fe <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	6b a1       	ldd	r22, Y+35	; 0x23
    31d8:	7c a1       	ldd	r23, Y+36	; 0x24
    31da:	8d a1       	ldd	r24, Y+37	; 0x25
    31dc:	9e a1       	ldd	r25, Y+38	; 0x26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	89 a1       	ldd	r24, Y+33	; 0x21
    31ec:	9a a1       	ldd	r25, Y+34	; 0x22
    31ee:	9e 8f       	std	Y+30, r25	; 0x1e
    31f0:	8d 8f       	std	Y+29, r24	; 0x1d
    31f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <LCD_sendCommand+0x1ea>
    31fa:	9e 8f       	std	Y+30, r25	; 0x1e
    31fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	69 ad       	ldd	r22, Y+57	; 0x39
    3202:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a0 e8       	ldi	r26, 0x80	; 128
    320c:	bf e3       	ldi	r27, 0x3F	; 63
    320e:	89 8f       	std	Y+25, r24	; 0x19
    3210:	9a 8f       	std	Y+26, r25	; 0x1a
    3212:	ab 8f       	std	Y+27, r26	; 0x1b
    3214:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3216:	69 8d       	ldd	r22, Y+25	; 0x19
    3218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    321a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a ef       	ldi	r20, 0xFA	; 250
    3224:	54 e4       	ldi	r21, 0x44	; 68
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	8d 8b       	std	Y+21, r24	; 0x15
    3230:	9e 8b       	std	Y+22, r25	; 0x16
    3232:	af 8b       	std	Y+23, r26	; 0x17
    3234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	2c f4       	brge	.+10     	; 0x3258 <LCD_sendCommand+0x24c>
		__ticks = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	3f c0       	rjmp	.+126    	; 0x32d6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	3f ef       	ldi	r19, 0xFF	; 255
    3264:	4f e7       	ldi	r20, 0x7F	; 127
    3266:	57 e4       	ldi	r21, 0x47	; 71
    3268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326c:	18 16       	cp	r1, r24
    326e:	4c f5       	brge	.+82     	; 0x32c2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3270:	69 8d       	ldd	r22, Y+25	; 0x19
    3272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e2       	ldi	r20, 0x20	; 32
    327e:	51 e4       	ldi	r21, 0x41	; 65
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9c 8b       	std	Y+20, r25	; 0x14
    3296:	8b 8b       	std	Y+19, r24	; 0x13
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <LCD_sendCommand+0x2ac>
    329a:	88 ec       	ldi	r24, 0xC8	; 200
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9a 8b       	std	Y+18, r25	; 0x12
    32a0:	89 8b       	std	Y+17, r24	; 0x11
    32a2:	89 89       	ldd	r24, Y+17	; 0x11
    32a4:	9a 89       	ldd	r25, Y+18	; 0x12
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <LCD_sendCommand+0x29a>
    32aa:	9a 8b       	std	Y+18, r25	; 0x12
    32ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ae:	8b 89       	ldd	r24, Y+19	; 0x13
    32b0:	9c 89       	ldd	r25, Y+20	; 0x14
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ba:	9c 89       	ldd	r25, Y+20	; 0x14
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	69 f7       	brne	.-38     	; 0x329a <LCD_sendCommand+0x28e>
    32c0:	14 c0       	rjmp	.+40     	; 0x32ea <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	8b 89       	ldd	r24, Y+19	; 0x13
    32d8:	9c 89       	ldd	r25, Y+20	; 0x14
    32da:	98 8b       	std	Y+16, r25	; 0x10
    32dc:	8f 87       	std	Y+15, r24	; 0x0f
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	98 89       	ldd	r25, Y+16	; 0x10
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <LCD_sendCommand+0x2d6>
    32e6:	98 8b       	std	Y+16, r25	; 0x10
    32e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    32ea:	82 e0       	ldi	r24, 0x02	; 2
    32ec:	61 e0       	ldi	r22, 0x01	; 1
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	a0 e8       	ldi	r26, 0x80	; 128
    32fa:	bf e3       	ldi	r27, 0x3F	; 63
    32fc:	8b 87       	std	Y+11, r24	; 0x0b
    32fe:	9c 87       	std	Y+12, r25	; 0x0c
    3300:	ad 87       	std	Y+13, r26	; 0x0d
    3302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3304:	6b 85       	ldd	r22, Y+11	; 0x0b
    3306:	7c 85       	ldd	r23, Y+12	; 0x0c
    3308:	8d 85       	ldd	r24, Y+13	; 0x0d
    330a:	9e 85       	ldd	r25, Y+14	; 0x0e
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	4a ef       	ldi	r20, 0xFA	; 250
    3312:	54 e4       	ldi	r21, 0x44	; 68
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	8f 83       	std	Y+7, r24	; 0x07
    331e:	98 87       	std	Y+8, r25	; 0x08
    3320:	a9 87       	std	Y+9, r26	; 0x09
    3322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3324:	6f 81       	ldd	r22, Y+7	; 0x07
    3326:	78 85       	ldd	r23, Y+8	; 0x08
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	9a 85       	ldd	r25, Y+10	; 0x0a
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e8       	ldi	r20, 0x80	; 128
    3332:	5f e3       	ldi	r21, 0x3F	; 63
    3334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3338:	88 23       	and	r24, r24
    333a:	2c f4       	brge	.+10     	; 0x3346 <LCD_sendCommand+0x33a>
		__ticks = 1;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
    3344:	3f c0       	rjmp	.+126    	; 0x33c4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3346:	6f 81       	ldd	r22, Y+7	; 0x07
    3348:	78 85       	ldd	r23, Y+8	; 0x08
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	3f ef       	ldi	r19, 0xFF	; 255
    3352:	4f e7       	ldi	r20, 0x7F	; 127
    3354:	57 e4       	ldi	r21, 0x47	; 71
    3356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    335a:	18 16       	cp	r1, r24
    335c:	4c f5       	brge	.+82     	; 0x33b0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3360:	7c 85       	ldd	r23, Y+12	; 0x0c
    3362:	8d 85       	ldd	r24, Y+13	; 0x0d
    3364:	9e 85       	ldd	r25, Y+14	; 0x0e
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e2       	ldi	r20, 0x20	; 32
    336c:	51 e4       	ldi	r21, 0x41	; 65
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	0f c0       	rjmp	.+30     	; 0x33a6 <LCD_sendCommand+0x39a>
    3388:	88 ec       	ldi	r24, 0xC8	; 200
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	9c 83       	std	Y+4, r25	; 0x04
    338e:	8b 83       	std	Y+3, r24	; 0x03
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	9c 81       	ldd	r25, Y+4	; 0x04
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <LCD_sendCommand+0x388>
    3398:	9c 83       	std	Y+4, r25	; 0x04
    339a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	69 f7       	brne	.-38     	; 0x3388 <LCD_sendCommand+0x37c>
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	9a 81       	ldd	r25, Y+2	; 0x02
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LCD_sendCommand+0x3c4>
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    33d8:	e9 96       	adiw	r28, 0x39	; 57
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	e9 97       	sbiw	r28, 0x39	; 57
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	41 e0       	ldi	r20, 0x01	; 1
    3406:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e8       	ldi	r26, 0x80	; 128
    3410:	bf e3       	ldi	r27, 0x3F	; 63
    3412:	8d ab       	std	Y+53, r24	; 0x35
    3414:	9e ab       	std	Y+54, r25	; 0x36
    3416:	af ab       	std	Y+55, r26	; 0x37
    3418:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	6d a9       	ldd	r22, Y+53	; 0x35
    341c:	7e a9       	ldd	r23, Y+54	; 0x36
    341e:	8f a9       	ldd	r24, Y+55	; 0x37
    3420:	98 ad       	ldd	r25, Y+56	; 0x38
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a ef       	ldi	r20, 0xFA	; 250
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	89 ab       	std	Y+49, r24	; 0x31
    3434:	9a ab       	std	Y+50, r25	; 0x32
    3436:	ab ab       	std	Y+51, r26	; 0x33
    3438:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    343a:	69 a9       	ldd	r22, Y+49	; 0x31
    343c:	7a a9       	ldd	r23, Y+50	; 0x32
    343e:	8b a9       	ldd	r24, Y+51	; 0x33
    3440:	9c a9       	ldd	r25, Y+52	; 0x34
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    344e:	88 23       	and	r24, r24
    3450:	2c f4       	brge	.+10     	; 0x345c <LCD_displayCharacter+0x72>
		__ticks = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	98 ab       	std	Y+48, r25	; 0x30
    3458:	8f a7       	std	Y+47, r24	; 0x2f
    345a:	3f c0       	rjmp	.+126    	; 0x34da <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    345c:	69 a9       	ldd	r22, Y+49	; 0x31
    345e:	7a a9       	ldd	r23, Y+50	; 0x32
    3460:	8b a9       	ldd	r24, Y+51	; 0x33
    3462:	9c a9       	ldd	r25, Y+52	; 0x34
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	4c f5       	brge	.+82     	; 0x34c6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	6d a9       	ldd	r22, Y+53	; 0x35
    3476:	7e a9       	ldd	r23, Y+54	; 0x36
    3478:	8f a9       	ldd	r24, Y+55	; 0x37
    347a:	98 ad       	ldd	r25, Y+56	; 0x38
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	98 ab       	std	Y+48, r25	; 0x30
    349a:	8f a7       	std	Y+47, r24	; 0x2f
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <LCD_displayCharacter+0xd2>
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9e a7       	std	Y+46, r25	; 0x2e
    34a4:	8d a7       	std	Y+45, r24	; 0x2d
    34a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    34a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <LCD_displayCharacter+0xc0>
    34ae:	9e a7       	std	Y+46, r25	; 0x2e
    34b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b4:	98 a9       	ldd	r25, Y+48	; 0x30
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	98 ab       	std	Y+48, r25	; 0x30
    34ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34be:	98 a9       	ldd	r25, Y+48	; 0x30
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	69 f7       	brne	.-38     	; 0x349e <LCD_displayCharacter+0xb4>
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	69 a9       	ldd	r22, Y+49	; 0x31
    34c8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ca:	8b a9       	ldd	r24, Y+51	; 0x33
    34cc:	9c a9       	ldd	r25, Y+52	; 0x34
    34ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	98 ab       	std	Y+48, r25	; 0x30
    34d8:	8f a7       	std	Y+47, r24	; 0x2f
    34da:	8f a5       	ldd	r24, Y+47	; 0x2f
    34dc:	98 a9       	ldd	r25, Y+48	; 0x30
    34de:	9c a7       	std	Y+44, r25	; 0x2c
    34e0:	8b a7       	std	Y+43, r24	; 0x2b
    34e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <LCD_displayCharacter+0xfc>
    34ea:	9c a7       	std	Y+44, r25	; 0x2c
    34ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	61 e0       	ldi	r22, 0x01	; 1
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 e8       	ldi	r26, 0x80	; 128
    34fe:	bf e3       	ldi	r27, 0x3F	; 63
    3500:	8f a3       	std	Y+39, r24	; 0x27
    3502:	98 a7       	std	Y+40, r25	; 0x28
    3504:	a9 a7       	std	Y+41, r26	; 0x29
    3506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	6f a1       	ldd	r22, Y+39	; 0x27
    350a:	78 a5       	ldd	r23, Y+40	; 0x28
    350c:	89 a5       	ldd	r24, Y+41	; 0x29
    350e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	4a ef       	ldi	r20, 0xFA	; 250
    3516:	54 e4       	ldi	r21, 0x44	; 68
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8b a3       	std	Y+35, r24	; 0x23
    3522:	9c a3       	std	Y+36, r25	; 0x24
    3524:	ad a3       	std	Y+37, r26	; 0x25
    3526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3528:	6b a1       	ldd	r22, Y+35	; 0x23
    352a:	7c a1       	ldd	r23, Y+36	; 0x24
    352c:	8d a1       	ldd	r24, Y+37	; 0x25
    352e:	9e a1       	ldd	r25, Y+38	; 0x26
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e8       	ldi	r20, 0x80	; 128
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    353c:	88 23       	and	r24, r24
    353e:	2c f4       	brge	.+10     	; 0x354a <LCD_displayCharacter+0x160>
		__ticks = 1;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9a a3       	std	Y+34, r25	; 0x22
    3546:	89 a3       	std	Y+33, r24	; 0x21
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    354a:	6b a1       	ldd	r22, Y+35	; 0x23
    354c:	7c a1       	ldd	r23, Y+36	; 0x24
    354e:	8d a1       	ldd	r24, Y+37	; 0x25
    3550:	9e a1       	ldd	r25, Y+38	; 0x26
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	4c f5       	brge	.+82     	; 0x35b4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	6f a1       	ldd	r22, Y+39	; 0x27
    3564:	78 a5       	ldd	r23, Y+40	; 0x28
    3566:	89 a5       	ldd	r24, Y+41	; 0x29
    3568:	9a a5       	ldd	r25, Y+42	; 0x2a
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9a a3       	std	Y+34, r25	; 0x22
    3588:	89 a3       	std	Y+33, r24	; 0x21
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <LCD_displayCharacter+0x1c0>
    358c:	88 ec       	ldi	r24, 0xC8	; 200
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	98 a3       	std	Y+32, r25	; 0x20
    3592:	8f 8f       	std	Y+31, r24	; 0x1f
    3594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3596:	98 a1       	ldd	r25, Y+32	; 0x20
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <LCD_displayCharacter+0x1ae>
    359c:	98 a3       	std	Y+32, r25	; 0x20
    359e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a0:	89 a1       	ldd	r24, Y+33	; 0x21
    35a2:	9a a1       	ldd	r25, Y+34	; 0x22
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	9a a3       	std	Y+34, r25	; 0x22
    35a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	89 a1       	ldd	r24, Y+33	; 0x21
    35ac:	9a a1       	ldd	r25, Y+34	; 0x22
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	69 f7       	brne	.-38     	; 0x358c <LCD_displayCharacter+0x1a2>
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b4:	6b a1       	ldd	r22, Y+35	; 0x23
    35b6:	7c a1       	ldd	r23, Y+36	; 0x24
    35b8:	8d a1       	ldd	r24, Y+37	; 0x25
    35ba:	9e a1       	ldd	r25, Y+38	; 0x26
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9a a3       	std	Y+34, r25	; 0x22
    35c6:	89 a3       	std	Y+33, r24	; 0x21
    35c8:	89 a1       	ldd	r24, Y+33	; 0x21
    35ca:	9a a1       	ldd	r25, Y+34	; 0x22
    35cc:	9e 8f       	std	Y+30, r25	; 0x1e
    35ce:	8d 8f       	std	Y+29, r24	; 0x1d
    35d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <LCD_displayCharacter+0x1ea>
    35d8:	9e 8f       	std	Y+30, r25	; 0x1e
    35da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	69 ad       	ldd	r22, Y+57	; 0x39
    35e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e8       	ldi	r26, 0x80	; 128
    35ea:	bf e3       	ldi	r27, 0x3F	; 63
    35ec:	89 8f       	std	Y+25, r24	; 0x19
    35ee:	9a 8f       	std	Y+26, r25	; 0x1a
    35f0:	ab 8f       	std	Y+27, r26	; 0x1b
    35f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f4:	69 8d       	ldd	r22, Y+25	; 0x19
    35f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a ef       	ldi	r20, 0xFA	; 250
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8d 8b       	std	Y+21, r24	; 0x15
    360e:	9e 8b       	std	Y+22, r25	; 0x16
    3610:	af 8b       	std	Y+23, r26	; 0x17
    3612:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3614:	6d 89       	ldd	r22, Y+21	; 0x15
    3616:	7e 89       	ldd	r23, Y+22	; 0x16
    3618:	8f 89       	ldd	r24, Y+23	; 0x17
    361a:	98 8d       	ldd	r25, Y+24	; 0x18
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	2c f4       	brge	.+10     	; 0x3636 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	9c 8b       	std	Y+20, r25	; 0x14
    3632:	8b 8b       	std	Y+19, r24	; 0x13
    3634:	3f c0       	rjmp	.+126    	; 0x36b4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3636:	6d 89       	ldd	r22, Y+21	; 0x15
    3638:	7e 89       	ldd	r23, Y+22	; 0x16
    363a:	8f 89       	ldd	r24, Y+23	; 0x17
    363c:	98 8d       	ldd	r25, Y+24	; 0x18
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	4c f5       	brge	.+82     	; 0x36a0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	69 8d       	ldd	r22, Y+25	; 0x19
    3650:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9c 8b       	std	Y+20, r25	; 0x14
    3674:	8b 8b       	std	Y+19, r24	; 0x13
    3676:	0f c0       	rjmp	.+30     	; 0x3696 <LCD_displayCharacter+0x2ac>
    3678:	88 ec       	ldi	r24, 0xC8	; 200
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9a 8b       	std	Y+18, r25	; 0x12
    367e:	89 8b       	std	Y+17, r24	; 0x11
    3680:	89 89       	ldd	r24, Y+17	; 0x11
    3682:	9a 89       	ldd	r25, Y+18	; 0x12
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <LCD_displayCharacter+0x29a>
    3688:	9a 8b       	std	Y+18, r25	; 0x12
    368a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368c:	8b 89       	ldd	r24, Y+19	; 0x13
    368e:	9c 89       	ldd	r25, Y+20	; 0x14
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	9c 8b       	std	Y+20, r25	; 0x14
    3694:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	69 f7       	brne	.-38     	; 0x3678 <LCD_displayCharacter+0x28e>
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a0:	6d 89       	ldd	r22, Y+21	; 0x15
    36a2:	7e 89       	ldd	r23, Y+22	; 0x16
    36a4:	8f 89       	ldd	r24, Y+23	; 0x17
    36a6:	98 8d       	ldd	r25, Y+24	; 0x18
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	9c 8b       	std	Y+20, r25	; 0x14
    36b2:	8b 8b       	std	Y+19, r24	; 0x13
    36b4:	8b 89       	ldd	r24, Y+19	; 0x13
    36b6:	9c 89       	ldd	r25, Y+20	; 0x14
    36b8:	98 8b       	std	Y+16, r25	; 0x10
    36ba:	8f 87       	std	Y+15, r24	; 0x0f
    36bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36be:	98 89       	ldd	r25, Y+16	; 0x10
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <LCD_displayCharacter+0x2d6>
    36c4:	98 8b       	std	Y+16, r25	; 0x10
    36c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36c8:	82 e0       	ldi	r24, 0x02	; 2
    36ca:	61 e0       	ldi	r22, 0x01	; 1
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	a0 e8       	ldi	r26, 0x80	; 128
    36d8:	bf e3       	ldi	r27, 0x3F	; 63
    36da:	8b 87       	std	Y+11, r24	; 0x0b
    36dc:	9c 87       	std	Y+12, r25	; 0x0c
    36de:	ad 87       	std	Y+13, r26	; 0x0d
    36e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	4a ef       	ldi	r20, 0xFA	; 250
    36f0:	54 e4       	ldi	r21, 0x44	; 68
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	8f 83       	std	Y+7, r24	; 0x07
    36fc:	98 87       	std	Y+8, r25	; 0x08
    36fe:	a9 87       	std	Y+9, r26	; 0x09
    3700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3702:	6f 81       	ldd	r22, Y+7	; 0x07
    3704:	78 85       	ldd	r23, Y+8	; 0x08
    3706:	89 85       	ldd	r24, Y+9	; 0x09
    3708:	9a 85       	ldd	r25, Y+10	; 0x0a
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e8       	ldi	r20, 0x80	; 128
    3710:	5f e3       	ldi	r21, 0x3F	; 63
    3712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3716:	88 23       	and	r24, r24
    3718:	2c f4       	brge	.+10     	; 0x3724 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	3f c0       	rjmp	.+126    	; 0x37a2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3724:	6f 81       	ldd	r22, Y+7	; 0x07
    3726:	78 85       	ldd	r23, Y+8	; 0x08
    3728:	89 85       	ldd	r24, Y+9	; 0x09
    372a:	9a 85       	ldd	r25, Y+10	; 0x0a
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	3f ef       	ldi	r19, 0xFF	; 255
    3730:	4f e7       	ldi	r20, 0x7F	; 127
    3732:	57 e4       	ldi	r21, 0x47	; 71
    3734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3738:	18 16       	cp	r1, r24
    373a:	4c f5       	brge	.+82     	; 0x378e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373c:	6b 85       	ldd	r22, Y+11	; 0x0b
    373e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3740:	8d 85       	ldd	r24, Y+13	; 0x0d
    3742:	9e 85       	ldd	r25, Y+14	; 0x0e
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e2       	ldi	r20, 0x20	; 32
    374a:	51 e4       	ldi	r21, 0x41	; 65
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	9e 83       	std	Y+6, r25	; 0x06
    3762:	8d 83       	std	Y+5, r24	; 0x05
    3764:	0f c0       	rjmp	.+30     	; 0x3784 <LCD_displayCharacter+0x39a>
    3766:	88 ec       	ldi	r24, 0xC8	; 200
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	9c 83       	std	Y+4, r25	; 0x04
    376c:	8b 83       	std	Y+3, r24	; 0x03
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	9c 81       	ldd	r25, Y+4	; 0x04
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	f1 f7       	brne	.-4      	; 0x3772 <LCD_displayCharacter+0x388>
    3776:	9c 83       	std	Y+4, r25	; 0x04
    3778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	00 97       	sbiw	r24, 0x00	; 0
    378a:	69 f7       	brne	.-38     	; 0x3766 <LCD_displayCharacter+0x37c>
    378c:	14 c0       	rjmp	.+40     	; 0x37b6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378e:	6f 81       	ldd	r22, Y+7	; 0x07
    3790:	78 85       	ldd	r23, Y+8	; 0x08
    3792:	89 85       	ldd	r24, Y+9	; 0x09
    3794:	9a 85       	ldd	r25, Y+10	; 0x0a
    3796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	8d 83       	std	Y+5, r24	; 0x05
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	9a 83       	std	Y+2, r25	; 0x02
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	9a 81       	ldd	r25, Y+2	; 0x02
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	f1 f7       	brne	.-4      	; 0x37ae <LCD_displayCharacter+0x3c4>
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    37b6:	e9 96       	adiw	r28, 0x39	; 57
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <LCD_displayString+0x6>
    37ce:	0f 92       	push	r0
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	9b 83       	std	Y+3, r25	; 0x03
    37d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37d8:	19 82       	std	Y+1, r1	; 0x01
    37da:	0e c0       	rjmp	.+28     	; 0x37f8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	8a 81       	ldd	r24, Y+2	; 0x02
    37e4:	9b 81       	ldd	r25, Y+3	; 0x03
    37e6:	fc 01       	movw	r30, r24
    37e8:	e2 0f       	add	r30, r18
    37ea:	f3 1f       	adc	r31, r19
    37ec:	80 81       	ld	r24, Z
    37ee:	0e 94 f5 19 	call	0x33ea	; 0x33ea <LCD_displayCharacter>
		i++;
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	8f 5f       	subi	r24, 0xFF	; 255
    37f6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	28 2f       	mov	r18, r24
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	9b 81       	ldd	r25, Y+3	; 0x03
    3802:	fc 01       	movw	r30, r24
    3804:	e2 0f       	add	r30, r18
    3806:	f3 1f       	adc	r31, r19
    3808:	80 81       	ld	r24, Z
    380a:	88 23       	and	r24, r24
    380c:	39 f7       	brne	.-50     	; 0x37dc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	00 d0       	rcall	.+0      	; 0x3820 <LCD_moveCursor+0x6>
    3820:	00 d0       	rcall	.+0      	; 0x3822 <LCD_moveCursor+0x8>
    3822:	0f 92       	push	r0
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	8a 83       	std	Y+2, r24	; 0x02
    382a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	3d 83       	std	Y+5, r19	; 0x05
    3834:	2c 83       	std	Y+4, r18	; 0x04
    3836:	8c 81       	ldd	r24, Y+4	; 0x04
    3838:	9d 81       	ldd	r25, Y+5	; 0x05
    383a:	81 30       	cpi	r24, 0x01	; 1
    383c:	91 05       	cpc	r25, r1
    383e:	c1 f0       	breq	.+48     	; 0x3870 <LCD_moveCursor+0x56>
    3840:	2c 81       	ldd	r18, Y+4	; 0x04
    3842:	3d 81       	ldd	r19, Y+5	; 0x05
    3844:	22 30       	cpi	r18, 0x02	; 2
    3846:	31 05       	cpc	r19, r1
    3848:	2c f4       	brge	.+10     	; 0x3854 <LCD_moveCursor+0x3a>
    384a:	8c 81       	ldd	r24, Y+4	; 0x04
    384c:	9d 81       	ldd	r25, Y+5	; 0x05
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	61 f0       	breq	.+24     	; 0x386a <LCD_moveCursor+0x50>
    3852:	19 c0       	rjmp	.+50     	; 0x3886 <LCD_moveCursor+0x6c>
    3854:	2c 81       	ldd	r18, Y+4	; 0x04
    3856:	3d 81       	ldd	r19, Y+5	; 0x05
    3858:	22 30       	cpi	r18, 0x02	; 2
    385a:	31 05       	cpc	r19, r1
    385c:	69 f0       	breq	.+26     	; 0x3878 <LCD_moveCursor+0x5e>
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	9d 81       	ldd	r25, Y+5	; 0x05
    3862:	83 30       	cpi	r24, 0x03	; 3
    3864:	91 05       	cpc	r25, r1
    3866:	61 f0       	breq	.+24     	; 0x3880 <LCD_moveCursor+0x66>
    3868:	0e c0       	rjmp	.+28     	; 0x3886 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    386a:	8b 81       	ldd	r24, Y+3	; 0x03
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	0b c0       	rjmp	.+22     	; 0x3886 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	80 5c       	subi	r24, 0xC0	; 192
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	80 5f       	subi	r24, 0xF0	; 240
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	03 c0       	rjmp	.+6      	; 0x3886 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	80 5b       	subi	r24, 0xB0	; 176
    3884:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	80 68       	ori	r24, 0x80	; 128
    388a:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_sendCommand>
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	00 d0       	rcall	.+0      	; 0x38a4 <LCD_displayStringRowColumn+0x6>
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <LCD_displayStringRowColumn+0x8>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	6a 83       	std	Y+2, r22	; 0x02
    38ae:	5c 83       	std	Y+4, r21	; 0x04
    38b0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	6a 81       	ldd	r22, Y+2	; 0x02
    38b6:	0e 94 0d 1c 	call	0x381a	; 0x381a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	9c 81       	ldd	r25, Y+4	; 0x04
    38be:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	62 97       	sbiw	r28, 0x12	; 18
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	f8 94       	cli
    38de:	de bf       	out	0x3e, r29	; 62
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	cd bf       	out	0x3d, r28	; 61
    38e4:	9a 8b       	std	Y+18, r25	; 0x12
    38e6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    38e8:	89 89       	ldd	r24, Y+17	; 0x11
    38ea:	9a 89       	ldd	r25, Y+18	; 0x12
    38ec:	9e 01       	movw	r18, r28
    38ee:	2f 5f       	subi	r18, 0xFF	; 255
    38f0:	3f 4f       	sbci	r19, 0xFF	; 255
    38f2:	b9 01       	movw	r22, r18
    38f4:	4a e0       	ldi	r20, 0x0A	; 10
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <itoa>
   LCD_displayString(buff); /* Display the string */
    38fc:	ce 01       	movw	r24, r28
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_displayString>
}
    3904:	62 96       	adiw	r28, 0x12	; 18
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_sendCommand>
}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <__vector_11>:

/********************************************************/
/*                   ISR functions                      */
/********************************************************/

ISR(TIMER0_OVF_vect) {
    392a:	1f 92       	push	r1
    392c:	0f 92       	push	r0
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	0f 92       	push	r0
    3932:	11 24       	eor	r1, r1
    3934:	2f 93       	push	r18
    3936:	3f 93       	push	r19
    3938:	4f 93       	push	r20
    393a:	5f 93       	push	r21
    393c:	6f 93       	push	r22
    393e:	7f 93       	push	r23
    3940:	8f 93       	push	r24
    3942:	9f 93       	push	r25
    3944:	af 93       	push	r26
    3946:	bf 93       	push	r27
    3948:	ef 93       	push	r30
    394a:	ff 93       	push	r31
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    3954:	80 91 3e 01 	lds	r24, 0x013E
    3958:	90 91 3f 01 	lds	r25, 0x013F
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	29 f0       	breq	.+10     	; 0x396a <__vector_11+0x40>
	{
		(*g_Timer0CallBackPtr)();
    3960:	e0 91 3e 01 	lds	r30, 0x013E
    3964:	f0 91 3f 01 	lds	r31, 0x013F
    3968:	09 95       	icall
	}
}
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	ff 91       	pop	r31
    3970:	ef 91       	pop	r30
    3972:	bf 91       	pop	r27
    3974:	af 91       	pop	r26
    3976:	9f 91       	pop	r25
    3978:	8f 91       	pop	r24
    397a:	7f 91       	pop	r23
    397c:	6f 91       	pop	r22
    397e:	5f 91       	pop	r21
    3980:	4f 91       	pop	r20
    3982:	3f 91       	pop	r19
    3984:	2f 91       	pop	r18
    3986:	0f 90       	pop	r0
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	0f 90       	pop	r0
    398c:	1f 90       	pop	r1
    398e:	18 95       	reti

00003990 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    3990:	1f 92       	push	r1
    3992:	0f 92       	push	r0
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	0f 92       	push	r0
    3998:	11 24       	eor	r1, r1
    399a:	2f 93       	push	r18
    399c:	3f 93       	push	r19
    399e:	4f 93       	push	r20
    39a0:	5f 93       	push	r21
    39a2:	6f 93       	push	r22
    39a4:	7f 93       	push	r23
    39a6:	8f 93       	push	r24
    39a8:	9f 93       	push	r25
    39aa:	af 93       	push	r26
    39ac:	bf 93       	push	r27
    39ae:	ef 93       	push	r30
    39b0:	ff 93       	push	r31
    39b2:	df 93       	push	r29
    39b4:	cf 93       	push	r28
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR)
    39ba:	80 91 3e 01 	lds	r24, 0x013E
    39be:	90 91 3f 01 	lds	r25, 0x013F
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	29 f0       	breq	.+10     	; 0x39d0 <__vector_10+0x40>
	{
		(*g_Timer0CallBackPtr)();
    39c6:	e0 91 3e 01 	lds	r30, 0x013E
    39ca:	f0 91 3f 01 	lds	r31, 0x013F
    39ce:	09 95       	icall
	}
}
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	ff 91       	pop	r31
    39d6:	ef 91       	pop	r30
    39d8:	bf 91       	pop	r27
    39da:	af 91       	pop	r26
    39dc:	9f 91       	pop	r25
    39de:	8f 91       	pop	r24
    39e0:	7f 91       	pop	r23
    39e2:	6f 91       	pop	r22
    39e4:	5f 91       	pop	r21
    39e6:	4f 91       	pop	r20
    39e8:	3f 91       	pop	r19
    39ea:	2f 91       	pop	r18
    39ec:	0f 90       	pop	r0
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	0f 90       	pop	r0
    39f2:	1f 90       	pop	r1
    39f4:	18 95       	reti

000039f6 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    39f6:	1f 92       	push	r1
    39f8:	0f 92       	push	r0
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	0f 92       	push	r0
    39fe:	11 24       	eor	r1, r1
    3a00:	2f 93       	push	r18
    3a02:	3f 93       	push	r19
    3a04:	4f 93       	push	r20
    3a06:	5f 93       	push	r21
    3a08:	6f 93       	push	r22
    3a0a:	7f 93       	push	r23
    3a0c:	8f 93       	push	r24
    3a0e:	9f 93       	push	r25
    3a10:	af 93       	push	r26
    3a12:	bf 93       	push	r27
    3a14:	ef 93       	push	r30
    3a16:	ff 93       	push	r31
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR)
    3a20:	80 91 40 01 	lds	r24, 0x0140
    3a24:	90 91 41 01 	lds	r25, 0x0141
    3a28:	00 97       	sbiw	r24, 0x00	; 0
    3a2a:	29 f0       	breq	.+10     	; 0x3a36 <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
    3a2c:	e0 91 40 01 	lds	r30, 0x0140
    3a30:	f0 91 41 01 	lds	r31, 0x0141
    3a34:	09 95       	icall
	}
}
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	ff 91       	pop	r31
    3a3c:	ef 91       	pop	r30
    3a3e:	bf 91       	pop	r27
    3a40:	af 91       	pop	r26
    3a42:	9f 91       	pop	r25
    3a44:	8f 91       	pop	r24
    3a46:	7f 91       	pop	r23
    3a48:	6f 91       	pop	r22
    3a4a:	5f 91       	pop	r21
    3a4c:	4f 91       	pop	r20
    3a4e:	3f 91       	pop	r19
    3a50:	2f 91       	pop	r18
    3a52:	0f 90       	pop	r0
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	0f 90       	pop	r0
    3a58:	1f 90       	pop	r1
    3a5a:	18 95       	reti

00003a5c <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    3a5c:	1f 92       	push	r1
    3a5e:	0f 92       	push	r0
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	0f 92       	push	r0
    3a64:	11 24       	eor	r1, r1
    3a66:	2f 93       	push	r18
    3a68:	3f 93       	push	r19
    3a6a:	4f 93       	push	r20
    3a6c:	5f 93       	push	r21
    3a6e:	6f 93       	push	r22
    3a70:	7f 93       	push	r23
    3a72:	8f 93       	push	r24
    3a74:	9f 93       	push	r25
    3a76:	af 93       	push	r26
    3a78:	bf 93       	push	r27
    3a7a:	ef 93       	push	r30
    3a7c:	ff 93       	push	r31
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    3a86:	80 91 40 01 	lds	r24, 0x0140
    3a8a:	90 91 41 01 	lds	r25, 0x0141
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	29 f0       	breq	.+10     	; 0x3a9c <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    3a92:	e0 91 40 01 	lds	r30, 0x0140
    3a96:	f0 91 41 01 	lds	r31, 0x0141
    3a9a:	09 95       	icall
	}
}
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	ff 91       	pop	r31
    3aa2:	ef 91       	pop	r30
    3aa4:	bf 91       	pop	r27
    3aa6:	af 91       	pop	r26
    3aa8:	9f 91       	pop	r25
    3aaa:	8f 91       	pop	r24
    3aac:	7f 91       	pop	r23
    3aae:	6f 91       	pop	r22
    3ab0:	5f 91       	pop	r21
    3ab2:	4f 91       	pop	r20
    3ab4:	3f 91       	pop	r19
    3ab6:	2f 91       	pop	r18
    3ab8:	0f 90       	pop	r0
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	0f 90       	pop	r0
    3abe:	1f 90       	pop	r1
    3ac0:	18 95       	reti

00003ac2 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    3ac2:	1f 92       	push	r1
    3ac4:	0f 92       	push	r0
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	0f 92       	push	r0
    3aca:	11 24       	eor	r1, r1
    3acc:	2f 93       	push	r18
    3ace:	3f 93       	push	r19
    3ad0:	4f 93       	push	r20
    3ad2:	5f 93       	push	r21
    3ad4:	6f 93       	push	r22
    3ad6:	7f 93       	push	r23
    3ad8:	8f 93       	push	r24
    3ada:	9f 93       	push	r25
    3adc:	af 93       	push	r26
    3ade:	bf 93       	push	r27
    3ae0:	ef 93       	push	r30
    3ae2:	ff 93       	push	r31
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    3aec:	80 91 42 01 	lds	r24, 0x0142
    3af0:	90 91 43 01 	lds	r25, 0x0143
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	29 f0       	breq	.+10     	; 0x3b02 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    3af8:	e0 91 42 01 	lds	r30, 0x0142
    3afc:	f0 91 43 01 	lds	r31, 0x0143
    3b00:	09 95       	icall
	}
}
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	ff 91       	pop	r31
    3b08:	ef 91       	pop	r30
    3b0a:	bf 91       	pop	r27
    3b0c:	af 91       	pop	r26
    3b0e:	9f 91       	pop	r25
    3b10:	8f 91       	pop	r24
    3b12:	7f 91       	pop	r23
    3b14:	6f 91       	pop	r22
    3b16:	5f 91       	pop	r21
    3b18:	4f 91       	pop	r20
    3b1a:	3f 91       	pop	r19
    3b1c:	2f 91       	pop	r18
    3b1e:	0f 90       	pop	r0
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	0f 90       	pop	r0
    3b24:	1f 90       	pop	r1
    3b26:	18 95       	reti

00003b28 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    3b28:	1f 92       	push	r1
    3b2a:	0f 92       	push	r0
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	0f 92       	push	r0
    3b30:	11 24       	eor	r1, r1
    3b32:	2f 93       	push	r18
    3b34:	3f 93       	push	r19
    3b36:	4f 93       	push	r20
    3b38:	5f 93       	push	r21
    3b3a:	6f 93       	push	r22
    3b3c:	7f 93       	push	r23
    3b3e:	8f 93       	push	r24
    3b40:	9f 93       	push	r25
    3b42:	af 93       	push	r26
    3b44:	bf 93       	push	r27
    3b46:	ef 93       	push	r30
    3b48:	ff 93       	push	r31
    3b4a:	df 93       	push	r29
    3b4c:	cf 93       	push	r28
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    3b52:	80 91 42 01 	lds	r24, 0x0142
    3b56:	90 91 43 01 	lds	r25, 0x0143
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	29 f0       	breq	.+10     	; 0x3b68 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    3b5e:	e0 91 42 01 	lds	r30, 0x0142
    3b62:	f0 91 43 01 	lds	r31, 0x0143
    3b66:	09 95       	icall
	}
}
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	ff 91       	pop	r31
    3b6e:	ef 91       	pop	r30
    3b70:	bf 91       	pop	r27
    3b72:	af 91       	pop	r26
    3b74:	9f 91       	pop	r25
    3b76:	8f 91       	pop	r24
    3b78:	7f 91       	pop	r23
    3b7a:	6f 91       	pop	r22
    3b7c:	5f 91       	pop	r21
    3b7e:	4f 91       	pop	r20
    3b80:	3f 91       	pop	r19
    3b82:	2f 91       	pop	r18
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	0f 90       	pop	r0
    3b8a:	1f 90       	pop	r1
    3b8c:	18 95       	reti

00003b8e <Timer_init>:
 *  Function to initialize the Timer driver
 *  Inputs: pointer to the configuration structure with type Timer_ConfigType.
 *  Return: None
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <Timer_init+0x6>
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	9a 83       	std	Y+2, r25	; 0x02
    3b9a:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->timer_ID == TIMER0)
    3b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba0:	84 81       	ldd	r24, Z+4	; 0x04
    3ba2:	88 23       	and	r24, r24
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <Timer_init+0x1a>
    3ba6:	52 c0       	rjmp	.+164    	; 0x3c4c <Timer_init+0xbe>
	{
		SET_BIT(TCCR0,FOC0);
    3ba8:	a3 e5       	ldi	r26, 0x53	; 83
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	e3 e5       	ldi	r30, 0x53	; 83
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	80 68       	ori	r24, 0x80	; 128
    3bb4:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->timer_InitialValue;
    3bb6:	a2 e5       	ldi	r26, 0x52	; 82
    3bb8:	b0 e0       	ldi	r27, 0x00	; 0
    3bba:	e9 81       	ldd	r30, Y+1	; 0x01
    3bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	8c 93       	st	X, r24
		TCCR0 = 0;
    3bc4:	e3 e5       	ldi	r30, 0x53	; 83
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	10 82       	st	Z, r1
		TCCR0 |= (Config_Ptr->timer_clock);
    3bca:	a3 e5       	ldi	r26, 0x53	; 83
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	e3 e5       	ldi	r30, 0x53	; 83
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	90 81       	ld	r25, Z
    3bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bd8:	85 81       	ldd	r24, Z+5	; 0x05
    3bda:	89 2b       	or	r24, r25
    3bdc:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	86 81       	ldd	r24, Z+6	; 0x06
    3be4:	88 23       	and	r24, r24
    3be6:	79 f4       	brne	.+30     	; 0x3c06 <Timer_init+0x78>
		{
			SET_BIT(TIMSK,TOIE0);
    3be8:	a9 e5       	ldi	r26, 0x59	; 89
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	e9 e5       	ldi	r30, 0x59	; 89
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	81 60       	ori	r24, 0x01	; 1
    3bf4:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0);
    3bf6:	a8 e5       	ldi	r26, 0x58	; 88
    3bf8:	b0 e0       	ldi	r27, 0x00	; 0
    3bfa:	e8 e5       	ldi	r30, 0x58	; 88
    3bfc:	f0 e0       	ldi	r31, 0x00	; 0
    3bfe:	80 81       	ld	r24, Z
    3c00:	81 60       	ori	r24, 0x01	; 1
    3c02:	8c 93       	st	X, r24
    3c04:	d8 c0       	rjmp	.+432    	; 0x3db6 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    3c06:	e9 81       	ldd	r30, Y+1	; 0x01
    3c08:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0a:	86 81       	ldd	r24, Z+6	; 0x06
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	09 f0       	breq	.+2      	; 0x3c12 <Timer_init+0x84>
    3c10:	d2 c0       	rjmp	.+420    	; 0x3db6 <Timer_init+0x228>
		{
			SET_BIT(TCCR0,WGM01);
    3c12:	a3 e5       	ldi	r26, 0x53	; 83
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	e3 e5       	ldi	r30, 0x53	; 83
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	88 60       	ori	r24, 0x08	; 8
    3c1e:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    3c20:	ac e5       	ldi	r26, 0x5C	; 92
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	e9 81       	ldd	r30, Y+1	; 0x01
    3c26:	fa 81       	ldd	r31, Y+2	; 0x02
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    3c2e:	a9 e5       	ldi	r26, 0x59	; 89
    3c30:	b0 e0       	ldi	r27, 0x00	; 0
    3c32:	e9 e5       	ldi	r30, 0x59	; 89
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	82 60       	ori	r24, 0x02	; 2
    3c3a:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0);
    3c3c:	a8 e5       	ldi	r26, 0x58	; 88
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	e8 e5       	ldi	r30, 0x58	; 88
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	80 81       	ld	r24, Z
    3c46:	82 60       	ori	r24, 0x02	; 2
    3c48:	8c 93       	st	X, r24
    3c4a:	b5 c0       	rjmp	.+362    	; 0x3db6 <Timer_init+0x228>
		}
	}
	else if (Config_Ptr->timer_ID == TIMER1)
    3c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c50:	84 81       	ldd	r24, Z+4	; 0x04
    3c52:	81 30       	cpi	r24, 0x01	; 1
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <Timer_init+0xca>
    3c56:	59 c0       	rjmp	.+178    	; 0x3d0a <Timer_init+0x17c>
	{
		TCCR1A =0;
    3c58:	ef e4       	ldi	r30, 0x4F	; 79
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A);
    3c5e:	af e4       	ldi	r26, 0x4F	; 79
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	ef e4       	ldi	r30, 0x4F	; 79
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	80 81       	ld	r24, Z
    3c68:	88 60       	ori	r24, 0x08	; 8
    3c6a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    3c6c:	af e4       	ldi	r26, 0x4F	; 79
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	ef e4       	ldi	r30, 0x4F	; 79
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	84 60       	ori	r24, 0x04	; 4
    3c78:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->timer_clock;
    3c7a:	ae e4       	ldi	r26, 0x4E	; 78
    3c7c:	b0 e0       	ldi	r27, 0x00	; 0
    3c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c80:	fa 81       	ldd	r31, Y+2	; 0x02
    3c82:	85 81       	ldd	r24, Z+5	; 0x05
    3c84:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->timer_InitialValue;
    3c86:	ac e4       	ldi	r26, 0x4C	; 76
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	11 96       	adiw	r26, 0x01	; 1
    3c94:	9c 93       	st	X, r25
    3c96:	8e 93       	st	-X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    3c98:	e9 81       	ldd	r30, Y+1	; 0x01
    3c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9c:	86 81       	ldd	r24, Z+6	; 0x06
    3c9e:	88 23       	and	r24, r24
    3ca0:	79 f4       	brne	.+30     	; 0x3cc0 <Timer_init+0x132>
		{
			SET_BIT(TIMSK, TOIE1);
    3ca2:	a9 e5       	ldi	r26, 0x59	; 89
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	e9 e5       	ldi	r30, 0x59	; 89
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	84 60       	ori	r24, 0x04	; 4
    3cae:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    3cb0:	a8 e5       	ldi	r26, 0x58	; 88
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	e8 e5       	ldi	r30, 0x58	; 88
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	84 60       	ori	r24, 0x04	; 4
    3cbc:	8c 93       	st	X, r24
    3cbe:	7b c0       	rjmp	.+246    	; 0x3db6 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    3cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc4:	86 81       	ldd	r24, Z+6	; 0x06
    3cc6:	81 30       	cpi	r24, 0x01	; 1
    3cc8:	09 f0       	breq	.+2      	; 0x3ccc <Timer_init+0x13e>
    3cca:	75 c0       	rjmp	.+234    	; 0x3db6 <Timer_init+0x228>
		{
			SET_BIT(TCCR1B, WGM12);
    3ccc:	ae e4       	ldi	r26, 0x4E	; 78
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	ee e4       	ldi	r30, 0x4E	; 78
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	88 60       	ori	r24, 0x08	; 8
    3cd8:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    3cda:	aa e4       	ldi	r26, 0x4A	; 74
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	82 81       	ldd	r24, Z+2	; 0x02
    3ce4:	93 81       	ldd	r25, Z+3	; 0x03
    3ce6:	11 96       	adiw	r26, 0x01	; 1
    3ce8:	9c 93       	st	X, r25
    3cea:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);
    3cec:	a9 e5       	ldi	r26, 0x59	; 89
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	e9 e5       	ldi	r30, 0x59	; 89
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	80 81       	ld	r24, Z
    3cf6:	80 61       	ori	r24, 0x10	; 16
    3cf8:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A);
    3cfa:	a8 e5       	ldi	r26, 0x58	; 88
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	e8 e5       	ldi	r30, 0x58	; 88
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	80 61       	ori	r24, 0x10	; 16
    3d06:	8c 93       	st	X, r24
    3d08:	56 c0       	rjmp	.+172    	; 0x3db6 <Timer_init+0x228>
		}
	}
	else if (Config_Ptr->timer_ID == TIMER2)
    3d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0e:	84 81       	ldd	r24, Z+4	; 0x04
    3d10:	82 30       	cpi	r24, 0x02	; 2
    3d12:	09 f0       	breq	.+2      	; 0x3d16 <Timer_init+0x188>
    3d14:	50 c0       	rjmp	.+160    	; 0x3db6 <Timer_init+0x228>
	{
		SET_BIT(TCCR2, FOC2);
    3d16:	a5 e4       	ldi	r26, 0x45	; 69
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	e5 e4       	ldi	r30, 0x45	; 69
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	80 81       	ld	r24, Z
    3d20:	80 68       	ori	r24, 0x80	; 128
    3d22:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->timer_InitialValue;
    3d24:	a4 e4       	ldi	r26, 0x44	; 68
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	8c 93       	st	X, r24
		TCCR2 = 0;
    3d32:	e5 e4       	ldi	r30, 0x45	; 69
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	10 82       	st	Z, r1
		TCCR2 |= (Config_Ptr->timer_clock);
    3d38:	a5 e4       	ldi	r26, 0x45	; 69
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e5 e4       	ldi	r30, 0x45	; 69
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	90 81       	ld	r25, Z
    3d42:	e9 81       	ldd	r30, Y+1	; 0x01
    3d44:	fa 81       	ldd	r31, Y+2	; 0x02
    3d46:	85 81       	ldd	r24, Z+5	; 0x05
    3d48:	89 2b       	or	r24, r25
    3d4a:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode)
    3d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d50:	86 81       	ldd	r24, Z+6	; 0x06
    3d52:	88 23       	and	r24, r24
    3d54:	79 f4       	brne	.+30     	; 0x3d74 <Timer_init+0x1e6>
		{
			SET_BIT(TIMSK, TOIE2);
    3d56:	a9 e5       	ldi	r26, 0x59	; 89
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e9 e5       	ldi	r30, 0x59	; 89
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	80 64       	ori	r24, 0x40	; 64
    3d62:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2);
    3d64:	a8 e5       	ldi	r26, 0x58	; 88
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e8 e5       	ldi	r30, 0x58	; 88
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	80 64       	ori	r24, 0x40	; 64
    3d70:	8c 93       	st	X, r24
    3d72:	21 c0       	rjmp	.+66     	; 0x3db6 <Timer_init+0x228>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode)
    3d74:	e9 81       	ldd	r30, Y+1	; 0x01
    3d76:	fa 81       	ldd	r31, Y+2	; 0x02
    3d78:	86 81       	ldd	r24, Z+6	; 0x06
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	e1 f4       	brne	.+56     	; 0x3db6 <Timer_init+0x228>
		{
			SET_BIT(TCCR0, WGM21);
    3d7e:	a3 e5       	ldi	r26, 0x53	; 83
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	e3 e5       	ldi	r30, 0x53	; 83
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	80 81       	ld	r24, Z
    3d88:	88 60       	ori	r24, 0x08	; 8
    3d8a:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    3d8c:	a3 e4       	ldi	r26, 0x43	; 67
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	e9 81       	ldd	r30, Y+1	; 0x01
    3d92:	fa 81       	ldd	r31, Y+2	; 0x02
    3d94:	82 81       	ldd	r24, Z+2	; 0x02
    3d96:	93 81       	ldd	r25, Z+3	; 0x03
    3d98:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    3d9a:	a9 e5       	ldi	r26, 0x59	; 89
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	e9 e5       	ldi	r30, 0x59	; 89
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	80 81       	ld	r24, Z
    3da4:	80 68       	ori	r24, 0x80	; 128
    3da6:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2);
    3da8:	a8 e5       	ldi	r26, 0x58	; 88
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	e8 e5       	ldi	r30, 0x58	; 88
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 81       	ld	r24, Z
    3db2:	80 68       	ori	r24, 0x80	; 128
    3db4:	8c 93       	st	X, r24
		}
	}
}
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	cf 91       	pop	r28
    3dbc:	df 91       	pop	r29
    3dbe:	08 95       	ret

00003dc0 <Timer_deInit>:
 *   Function to disable the Timer via Timer_ID.
 *   Inputs: Timer_ID
 *   Return: None
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	0f 92       	push	r0
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	89 83       	std	Y+1, r24	; 0x01
	if (timer_type==TIMER0)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	88 23       	and	r24, r24
    3dd0:	e1 f4       	brne	.+56     	; 0x3e0a <Timer_deInit+0x4a>
	{
		OCR0=0;
    3dd2:	ec e5       	ldi	r30, 0x5C	; 92
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	10 82       	st	Z, r1
		TCCR0=0;
    3dd8:	e3 e5       	ldi	r30, 0x53	; 83
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	10 82       	st	Z, r1
		TCNT0= 0;
    3dde:	e2 e5       	ldi	r30, 0x52	; 82
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    3de4:	a9 e5       	ldi	r26, 0x59	; 89
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e9 e5       	ldi	r30, 0x59	; 89
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	8d 7f       	andi	r24, 0xFD	; 253
    3df0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    3df2:	a9 e5       	ldi	r26, 0x59	; 89
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	e9 e5       	ldi	r30, 0x59	; 89
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	8e 7f       	andi	r24, 0xFE	; 254
    3dfe:	8c 93       	st	X, r24
		g_Timer0CallBackPtr=NULL_PTR;
    3e00:	10 92 3f 01 	sts	0x013F, r1
    3e04:	10 92 3e 01 	sts	0x013E, r1
    3e08:	42 c0       	rjmp	.+132    	; 0x3e8e <Timer_deInit+0xce>
	}
	else if (timer_type==TIMER1)
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	81 30       	cpi	r24, 0x01	; 1
    3e0e:	09 f5       	brne	.+66     	; 0x3e52 <Timer_deInit+0x92>
	{
		OCR1A=0;
    3e10:	ea e4       	ldi	r30, 0x4A	; 74
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	11 82       	std	Z+1, r1	; 0x01
    3e16:	10 82       	st	Z, r1
		TCCR1A=0;
    3e18:	ef e4       	ldi	r30, 0x4F	; 79
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	10 82       	st	Z, r1
		TCCR1B=0;
    3e1e:	ee e4       	ldi	r30, 0x4E	; 78
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	10 82       	st	Z, r1
		TCNT1=0;
    3e24:	ec e4       	ldi	r30, 0x4C	; 76
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	11 82       	std	Z+1, r1	; 0x01
    3e2a:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    3e2c:	a9 e5       	ldi	r26, 0x59	; 89
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	e9 e5       	ldi	r30, 0x59	; 89
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	8b 7f       	andi	r24, 0xFB	; 251
    3e38:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    3e3a:	a9 e5       	ldi	r26, 0x59	; 89
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	e9 e5       	ldi	r30, 0x59	; 89
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	8f 7e       	andi	r24, 0xEF	; 239
    3e46:	8c 93       	st	X, r24
		g_Timer1CallBackPtr=NULL_PTR;
    3e48:	10 92 41 01 	sts	0x0141, r1
    3e4c:	10 92 40 01 	sts	0x0140, r1
    3e50:	1e c0       	rjmp	.+60     	; 0x3e8e <Timer_deInit+0xce>
	}
	else if (timer_type==TIMER2)
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	82 30       	cpi	r24, 0x02	; 2
    3e56:	d9 f4       	brne	.+54     	; 0x3e8e <Timer_deInit+0xce>
	{
		OCR2=0;
    3e58:	e3 e4       	ldi	r30, 0x43	; 67
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	10 82       	st	Z, r1
		TCCR2=0;
    3e5e:	e5 e4       	ldi	r30, 0x45	; 69
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	10 82       	st	Z, r1
		TCNT2=0;
    3e64:	e4 e4       	ldi	r30, 0x44	; 68
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE2);
    3e6a:	a9 e5       	ldi	r26, 0x59	; 89
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	e9 e5       	ldi	r30, 0x59	; 89
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	8f 77       	andi	r24, 0x7F	; 127
    3e76:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE2);
    3e78:	a9 e5       	ldi	r26, 0x59	; 89
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	e9 e5       	ldi	r30, 0x59	; 89
    3e7e:	f0 e0       	ldi	r31, 0x00	; 0
    3e80:	80 81       	ld	r24, Z
    3e82:	8f 7b       	andi	r24, 0xBF	; 191
    3e84:	8c 93       	st	X, r24
		g_Timer2CallBackPtr=NULL_PTR;
    3e86:	10 92 43 01 	sts	0x0143, r1
    3e8a:	10 92 42 01 	sts	0x0142, r1
	}
}
    3e8e:	0f 90       	pop	r0
    3e90:	cf 91       	pop	r28
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <Timer_setCallBack>:
 *   Function to set the Call Back function address to the required Timer.
 *   Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 *   Return: None
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    3e96:	df 93       	push	r29
    3e98:	cf 93       	push	r28
    3e9a:	00 d0       	rcall	.+0      	; 0x3e9c <Timer_setCallBack+0x6>
    3e9c:	0f 92       	push	r0
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01
    3ea6:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID==TIMER0)
    3ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eaa:	88 23       	and	r24, r24
    3eac:	39 f4       	brne	.+14     	; 0x3ebc <Timer_setCallBack+0x26>
	{
		g_Timer0CallBackPtr=a_ptr;
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	90 93 3f 01 	sts	0x013F, r25
    3eb6:	80 93 3e 01 	sts	0x013E, r24
    3eba:	13 c0       	rjmp	.+38     	; 0x3ee2 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER1)
    3ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebe:	81 30       	cpi	r24, 0x01	; 1
    3ec0:	39 f4       	brne	.+14     	; 0x3ed0 <Timer_setCallBack+0x3a>
	{
		g_Timer1CallBackPtr=a_ptr;
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	90 93 41 01 	sts	0x0141, r25
    3eca:	80 93 40 01 	sts	0x0140, r24
    3ece:	09 c0       	rjmp	.+18     	; 0x3ee2 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER2)
    3ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed2:	82 30       	cpi	r24, 0x02	; 2
    3ed4:	31 f4       	brne	.+12     	; 0x3ee2 <Timer_setCallBack+0x4c>
	{
		g_Timer2CallBackPtr=a_ptr;
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eda:	90 93 43 01 	sts	0x0143, r25
    3ede:	80 93 42 01 	sts	0x0142, r24
	}
}
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	08 95       	ret

00003eee <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3eee:	df 93       	push	r29
    3ef0:	cf 93       	push	r28
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <UART_init+0x6>
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <UART_init+0x8>
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	9c 83       	std	Y+4, r25	; 0x04
    3efc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3efe:	1a 82       	std	Y+2, r1	; 0x02
    3f00:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3f02:	eb e2       	ldi	r30, 0x2B	; 43
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3f0a:	ea e2       	ldi	r30, 0x2A	; 42
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	88 e1       	ldi	r24, 0x18	; 24
    3f10:	80 83       	st	Z, r24
	UCSRC =(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    3f12:	a0 e4       	ldi	r26, 0x40	; 64
    3f14:	b0 e0       	ldi	r27, 0x00	; 0
    3f16:	e0 e4       	ldi	r30, 0x40	; 64
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	80 81       	ld	r24, Z
    3f1c:	28 2f       	mov	r18, r24
    3f1e:	29 7f       	andi	r18, 0xF9	; 249
    3f20:	eb 81       	ldd	r30, Y+3	; 0x03
    3f22:	fc 81       	ldd	r31, Y+4	; 0x04
    3f24:	80 81       	ld	r24, Z
    3f26:	88 2f       	mov	r24, r24
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	82 2b       	or	r24, r18
    3f30:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) ;
    3f32:	a0 e4       	ldi	r26, 0x40	; 64
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	e0 e4       	ldi	r30, 0x40	; 64
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	80 81       	ld	r24, Z
    3f3c:	80 68       	ori	r24, 0x80	; 128
    3f3e:	8c 93       	st	X, r24
	UCSRC =(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    3f40:	a0 e4       	ldi	r26, 0x40	; 64
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e0 e4       	ldi	r30, 0x40	; 64
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	2f 7c       	andi	r18, 0xCF	; 207
    3f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f50:	fc 81       	ldd	r31, Y+4	; 0x04
    3f52:	81 81       	ldd	r24, Z+1	; 0x01
    3f54:	88 2f       	mov	r24, r24
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	82 95       	swap	r24
    3f5a:	92 95       	swap	r25
    3f5c:	90 7f       	andi	r25, 0xF0	; 240
    3f5e:	98 27       	eor	r25, r24
    3f60:	80 7f       	andi	r24, 0xF0	; 240
    3f62:	98 27       	eor	r25, r24
    3f64:	82 2b       	or	r24, r18
    3f66:	8c 93       	st	X, r24
	UCSRC =(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    3f68:	a0 e4       	ldi	r26, 0x40	; 64
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	e0 e4       	ldi	r30, 0x40	; 64
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	28 2f       	mov	r18, r24
    3f74:	27 7f       	andi	r18, 0xF7	; 247
    3f76:	eb 81       	ldd	r30, Y+3	; 0x03
    3f78:	fc 81       	ldd	r31, Y+4	; 0x04
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	88 0f       	add	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	82 2b       	or	r24, r18
    3f8e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3f90:	eb 81       	ldd	r30, Y+3	; 0x03
    3f92:	fc 81       	ldd	r31, Y+4	; 0x04
    3f94:	83 81       	ldd	r24, Z+3	; 0x03
    3f96:	94 81       	ldd	r25, Z+4	; 0x04
    3f98:	a5 81       	ldd	r26, Z+5	; 0x05
    3f9a:	b6 81       	ldd	r27, Z+6	; 0x06
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	aa 1f       	adc	r26, r26
    3fa2:	bb 1f       	adc	r27, r27
    3fa4:	88 0f       	add	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	aa 1f       	adc	r26, r26
    3faa:	bb 1f       	adc	r27, r27
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	aa 1f       	adc	r26, r26
    3fb2:	bb 1f       	adc	r27, r27
    3fb4:	9c 01       	movw	r18, r24
    3fb6:	ad 01       	movw	r20, r26
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	92 e1       	ldi	r25, 0x12	; 18
    3fbc:	aa e7       	ldi	r26, 0x7A	; 122
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodsi4>
    3fc8:	da 01       	movw	r26, r20
    3fca:	c9 01       	movw	r24, r18
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	9a 83       	std	Y+2, r25	; 0x02
    3fd0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3fd2:	e0 e4       	ldi	r30, 0x40	; 64
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fda:	89 2f       	mov	r24, r25
    3fdc:	99 27       	eor	r25, r25
    3fde:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3fe0:	e9 e2       	ldi	r30, 0x29	; 41
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	80 83       	st	Z, r24
}
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	0f 92       	push	r0
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4002:	eb e2       	ldi	r30, 0x2B	; 43
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	88 2f       	mov	r24, r24
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	80 72       	andi	r24, 0x20	; 32
    400e:	90 70       	andi	r25, 0x00	; 0
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	b9 f3       	breq	.-18     	; 0x4002 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4014:	ec e2       	ldi	r30, 0x2C	; 44
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    401c:	0f 90       	pop	r0
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    402c:	eb e2       	ldi	r30, 0x2B	; 43
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	88 23       	and	r24, r24
    4034:	dc f7       	brge	.-10     	; 0x402c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4036:	ec e2       	ldi	r30, 0x2C	; 44
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	80 81       	ld	r24, Z
}
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	00 d0       	rcall	.+0      	; 0x4048 <UART_sendString+0x6>
    4048:	0f 92       	push	r0
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	9b 83       	std	Y+3, r25	; 0x03
    4050:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4052:	19 82       	std	Y+1, r1	; 0x01
    4054:	0e c0       	rjmp	.+28     	; 0x4072 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	9b 81       	ldd	r25, Y+3	; 0x03
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	80 81       	ld	r24, Z
    4068:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		i++;
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	8f 5f       	subi	r24, 0xFF	; 255
    4070:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	9b 81       	ldd	r25, Y+3	; 0x03
    407c:	fc 01       	movw	r30, r24
    407e:	e2 0f       	add	r30, r18
    4080:	f3 1f       	adc	r31, r19
    4082:	80 81       	ld	r24, Z
    4084:	88 23       	and	r24, r24
    4086:	39 f7       	brne	.-50     	; 0x4056 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	00 d0       	rcall	.+0      	; 0x409e <UART_receiveString+0xa>
    409e:	0f 92       	push	r0
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	9b 83       	std	Y+3, r25	; 0x03
    40a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    40a8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	8a 81       	ldd	r24, Y+2	; 0x02
    40b2:	9b 81       	ldd	r25, Y+3	; 0x03
    40b4:	8c 01       	movw	r16, r24
    40b6:	02 0f       	add	r16, r18
    40b8:	13 1f       	adc	r17, r19
    40ba:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40be:	f8 01       	movw	r30, r16
    40c0:	80 83       	st	Z, r24
    40c2:	0f c0       	rjmp	.+30     	; 0x40e2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	8c 01       	movw	r16, r24
    40d6:	02 0f       	add	r16, r18
    40d8:	13 1f       	adc	r17, r19
    40da:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40de:	f8 01       	movw	r30, r16
    40e0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	28 2f       	mov	r18, r24
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	fc 01       	movw	r30, r24
    40ee:	e2 0f       	add	r30, r18
    40f0:	f3 1f       	adc	r31, r19
    40f2:	80 81       	ld	r24, Z
    40f4:	83 32       	cpi	r24, 0x23	; 35
    40f6:	31 f7       	brne	.-52     	; 0x40c4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	28 2f       	mov	r18, r24
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	fc 01       	movw	r30, r24
    4104:	e2 0f       	add	r30, r18
    4106:	f3 1f       	adc	r31, r19
    4108:	10 82       	st	Z, r1
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <__udivmodsi4>:
    411a:	a1 e2       	ldi	r26, 0x21	; 33
    411c:	1a 2e       	mov	r1, r26
    411e:	aa 1b       	sub	r26, r26
    4120:	bb 1b       	sub	r27, r27
    4122:	fd 01       	movw	r30, r26
    4124:	0d c0       	rjmp	.+26     	; 0x4140 <__udivmodsi4_ep>

00004126 <__udivmodsi4_loop>:
    4126:	aa 1f       	adc	r26, r26
    4128:	bb 1f       	adc	r27, r27
    412a:	ee 1f       	adc	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	a2 17       	cp	r26, r18
    4130:	b3 07       	cpc	r27, r19
    4132:	e4 07       	cpc	r30, r20
    4134:	f5 07       	cpc	r31, r21
    4136:	20 f0       	brcs	.+8      	; 0x4140 <__udivmodsi4_ep>
    4138:	a2 1b       	sub	r26, r18
    413a:	b3 0b       	sbc	r27, r19
    413c:	e4 0b       	sbc	r30, r20
    413e:	f5 0b       	sbc	r31, r21

00004140 <__udivmodsi4_ep>:
    4140:	66 1f       	adc	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	1a 94       	dec	r1
    414a:	69 f7       	brne	.-38     	; 0x4126 <__udivmodsi4_loop>
    414c:	60 95       	com	r22
    414e:	70 95       	com	r23
    4150:	80 95       	com	r24
    4152:	90 95       	com	r25
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	bd 01       	movw	r22, r26
    415a:	cf 01       	movw	r24, r30
    415c:	08 95       	ret

0000415e <__prologue_saves__>:
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	4f 92       	push	r4
    4164:	5f 92       	push	r5
    4166:	6f 92       	push	r6
    4168:	7f 92       	push	r7
    416a:	8f 92       	push	r8
    416c:	9f 92       	push	r9
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	ca 1b       	sub	r28, r26
    4188:	db 0b       	sbc	r29, r27
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	09 94       	ijmp

00004196 <__epilogue_restores__>:
    4196:	2a 88       	ldd	r2, Y+18	; 0x12
    4198:	39 88       	ldd	r3, Y+17	; 0x11
    419a:	48 88       	ldd	r4, Y+16	; 0x10
    419c:	5f 84       	ldd	r5, Y+15	; 0x0f
    419e:	6e 84       	ldd	r6, Y+14	; 0x0e
    41a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a8:	b9 84       	ldd	r11, Y+9	; 0x09
    41aa:	c8 84       	ldd	r12, Y+8	; 0x08
    41ac:	df 80       	ldd	r13, Y+7	; 0x07
    41ae:	ee 80       	ldd	r14, Y+6	; 0x06
    41b0:	fd 80       	ldd	r15, Y+5	; 0x05
    41b2:	0c 81       	ldd	r16, Y+4	; 0x04
    41b4:	1b 81       	ldd	r17, Y+3	; 0x03
    41b6:	aa 81       	ldd	r26, Y+2	; 0x02
    41b8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ba:	ce 0f       	add	r28, r30
    41bc:	d1 1d       	adc	r29, r1
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	ed 01       	movw	r28, r26
    41ca:	08 95       	ret

000041cc <itoa>:
    41cc:	fb 01       	movw	r30, r22
    41ce:	9f 01       	movw	r18, r30
    41d0:	e8 94       	clt
    41d2:	42 30       	cpi	r20, 0x02	; 2
    41d4:	c4 f0       	brlt	.+48     	; 0x4206 <itoa+0x3a>
    41d6:	45 32       	cpi	r20, 0x25	; 37
    41d8:	b4 f4       	brge	.+44     	; 0x4206 <itoa+0x3a>
    41da:	4a 30       	cpi	r20, 0x0A	; 10
    41dc:	29 f4       	brne	.+10     	; 0x41e8 <itoa+0x1c>
    41de:	97 fb       	bst	r25, 7
    41e0:	1e f4       	brtc	.+6      	; 0x41e8 <itoa+0x1c>
    41e2:	90 95       	com	r25
    41e4:	81 95       	neg	r24
    41e6:	9f 4f       	sbci	r25, 0xFF	; 255
    41e8:	64 2f       	mov	r22, r20
    41ea:	77 27       	eor	r23, r23
    41ec:	0e 94 17 21 	call	0x422e	; 0x422e <__udivmodhi4>
    41f0:	80 5d       	subi	r24, 0xD0	; 208
    41f2:	8a 33       	cpi	r24, 0x3A	; 58
    41f4:	0c f0       	brlt	.+2      	; 0x41f8 <itoa+0x2c>
    41f6:	89 5d       	subi	r24, 0xD9	; 217
    41f8:	81 93       	st	Z+, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	a1 f7       	brne	.-24     	; 0x41e8 <itoa+0x1c>
    4200:	16 f4       	brtc	.+4      	; 0x4206 <itoa+0x3a>
    4202:	5d e2       	ldi	r21, 0x2D	; 45
    4204:	51 93       	st	Z+, r21
    4206:	10 82       	st	Z, r1
    4208:	c9 01       	movw	r24, r18
    420a:	0c 94 07 21 	jmp	0x420e	; 0x420e <strrev>

0000420e <strrev>:
    420e:	dc 01       	movw	r26, r24
    4210:	fc 01       	movw	r30, r24
    4212:	67 2f       	mov	r22, r23
    4214:	71 91       	ld	r23, Z+
    4216:	77 23       	and	r23, r23
    4218:	e1 f7       	brne	.-8      	; 0x4212 <strrev+0x4>
    421a:	32 97       	sbiw	r30, 0x02	; 2
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <strrev+0x18>
    421e:	7c 91       	ld	r23, X
    4220:	6d 93       	st	X+, r22
    4222:	70 83       	st	Z, r23
    4224:	62 91       	ld	r22, -Z
    4226:	ae 17       	cp	r26, r30
    4228:	bf 07       	cpc	r27, r31
    422a:	c8 f3       	brcs	.-14     	; 0x421e <strrev+0x10>
    422c:	08 95       	ret

0000422e <__udivmodhi4>:
    422e:	aa 1b       	sub	r26, r26
    4230:	bb 1b       	sub	r27, r27
    4232:	51 e1       	ldi	r21, 0x11	; 17
    4234:	07 c0       	rjmp	.+14     	; 0x4244 <__udivmodhi4_ep>

00004236 <__udivmodhi4_loop>:
    4236:	aa 1f       	adc	r26, r26
    4238:	bb 1f       	adc	r27, r27
    423a:	a6 17       	cp	r26, r22
    423c:	b7 07       	cpc	r27, r23
    423e:	10 f0       	brcs	.+4      	; 0x4244 <__udivmodhi4_ep>
    4240:	a6 1b       	sub	r26, r22
    4242:	b7 0b       	sbc	r27, r23

00004244 <__udivmodhi4_ep>:
    4244:	88 1f       	adc	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	5a 95       	dec	r21
    424a:	a9 f7       	brne	.-22     	; 0x4236 <__udivmodhi4_loop>
    424c:	80 95       	com	r24
    424e:	90 95       	com	r25
    4250:	bc 01       	movw	r22, r24
    4252:	cd 01       	movw	r24, r26
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
